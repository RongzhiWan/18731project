node {
  name: "global_step/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Fill"
  input: "global_step/Initializer/zeros/shape_as_tensor"
  input: "global_step/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4200
        }
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_0/Initializer/random_uniform/max"
  input: "device_dummy_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_0/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_0/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_0/Initializer/random_uniform/mul"
  input: "device_dummy_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_0"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_0/Assign"
  op: "Assign"
  input: "device_dummy_0"
  input: "device_dummy_0/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_0/read"
  op: "Identity"
  input: "device_dummy_0"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_1/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_1/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_1/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_1/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_1/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_1/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_1/Initializer/random_uniform/max"
  input: "device_dummy_1/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_1/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_1/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_1/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_1/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_1/Initializer/random_uniform/mul"
  input: "device_dummy_1/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_1"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_1/Assign"
  op: "Assign"
  input: "device_dummy_1"
  input: "device_dummy_1/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_1/read"
  op: "Identity"
  input: "device_dummy_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_2/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_2/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_2/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_2/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_2/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_2/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_2/Initializer/random_uniform/max"
  input: "device_dummy_2/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_2/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_2/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_2/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_2/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_2/Initializer/random_uniform/mul"
  input: "device_dummy_2/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_2"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_2/Assign"
  op: "Assign"
  input: "device_dummy_2"
  input: "device_dummy_2/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_2/read"
  op: "Identity"
  input: "device_dummy_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_3/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_3/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_3/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_3/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_3/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_3/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_3/Initializer/random_uniform/max"
  input: "device_dummy_3/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_3/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_3/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_3/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_3/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_3/Initializer/random_uniform/mul"
  input: "device_dummy_3/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_3"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_3/Assign"
  op: "Assign"
  input: "device_dummy_3"
  input: "device_dummy_3/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_3/read"
  op: "Identity"
  input: "device_dummy_3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_4/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_4/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_4/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_4/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_4/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_4/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_4/Initializer/random_uniform/max"
  input: "device_dummy_4/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_4/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_4/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_4/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_4/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_4/Initializer/random_uniform/mul"
  input: "device_dummy_4/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_4"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_4/Assign"
  op: "Assign"
  input: "device_dummy_4"
  input: "device_dummy_4/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_4/read"
  op: "Identity"
  input: "device_dummy_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_5/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_5/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_5/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_5/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_5/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_5/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_5/Initializer/random_uniform/max"
  input: "device_dummy_5/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_5/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_5/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_5/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_5/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_5/Initializer/random_uniform/mul"
  input: "device_dummy_5/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_5"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_5/Assign"
  op: "Assign"
  input: "device_dummy_5"
  input: "device_dummy_5/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_5/read"
  op: "Identity"
  input: "device_dummy_5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_6/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_6/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_6/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_6/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_6/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_6/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_6/Initializer/random_uniform/max"
  input: "device_dummy_6/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_6/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_6/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_6/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_6/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_6/Initializer/random_uniform/mul"
  input: "device_dummy_6/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_6"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_6/Assign"
  op: "Assign"
  input: "device_dummy_6"
  input: "device_dummy_6/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_6/read"
  op: "Identity"
  input: "device_dummy_6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_7/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_7/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_7/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_7/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_7/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_7/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_7/Initializer/random_uniform/max"
  input: "device_dummy_7/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_7/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_7/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_7/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_7/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_7/Initializer/random_uniform/mul"
  input: "device_dummy_7/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_7"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_7/Assign"
  op: "Assign"
  input: "device_dummy_7"
  input: "device_dummy_7/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_7/read"
  op: "Identity"
  input: "device_dummy_7"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_8/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_8/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_8/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_8/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_8/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_8/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_8/Initializer/random_uniform/max"
  input: "device_dummy_8/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_8/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_8/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_8/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_8/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_8/Initializer/random_uniform/mul"
  input: "device_dummy_8/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_8"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_8/Assign"
  op: "Assign"
  input: "device_dummy_8"
  input: "device_dummy_8/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_8/read"
  op: "Identity"
  input: "device_dummy_8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_9/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_9/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_9/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_9/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_9/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_9/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_9/Initializer/random_uniform/max"
  input: "device_dummy_9/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_9/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_9/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_9/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_9/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_9/Initializer/random_uniform/mul"
  input: "device_dummy_9/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_9"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_9/Assign"
  op: "Assign"
  input: "device_dummy_9"
  input: "device_dummy_9/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_9/read"
  op: "Identity"
  input: "device_dummy_9"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_10/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_10/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_10/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_10/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_10/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_10/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_10/Initializer/random_uniform/max"
  input: "device_dummy_10/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_10/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_10/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_10/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_10/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_10/Initializer/random_uniform/mul"
  input: "device_dummy_10/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_10"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_10/Assign"
  op: "Assign"
  input: "device_dummy_10"
  input: "device_dummy_10/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_10/read"
  op: "Identity"
  input: "device_dummy_10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_11/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_11/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_11/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_11/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_11/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_11/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_11/Initializer/random_uniform/max"
  input: "device_dummy_11/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_11/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_11/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_11/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_11/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_11/Initializer/random_uniform/mul"
  input: "device_dummy_11/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_11"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_11/Assign"
  op: "Assign"
  input: "device_dummy_11"
  input: "device_dummy_11/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_11/read"
  op: "Identity"
  input: "device_dummy_11"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_12/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_12/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_12/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_12/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_12/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_12/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_12/Initializer/random_uniform/max"
  input: "device_dummy_12/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_12/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_12/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_12/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_12/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_12/Initializer/random_uniform/mul"
  input: "device_dummy_12/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_12"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_12/Assign"
  op: "Assign"
  input: "device_dummy_12"
  input: "device_dummy_12/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_12/read"
  op: "Identity"
  input: "device_dummy_12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_13/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_13/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_13/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_13/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_13/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_13/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_13/Initializer/random_uniform/max"
  input: "device_dummy_13/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_13/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_13/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_13/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_13/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_13/Initializer/random_uniform/mul"
  input: "device_dummy_13/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_13"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_13/Assign"
  op: "Assign"
  input: "device_dummy_13"
  input: "device_dummy_13/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_13/read"
  op: "Identity"
  input: "device_dummy_13"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_14/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_14/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_14/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_14/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_14/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_14/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_14/Initializer/random_uniform/max"
  input: "device_dummy_14/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_14/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_14/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_14/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_14/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_14/Initializer/random_uniform/mul"
  input: "device_dummy_14/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_14"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_14/Assign"
  op: "Assign"
  input: "device_dummy_14"
  input: "device_dummy_14/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_14/read"
  op: "Identity"
  input: "device_dummy_14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_15/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_15/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_15/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_15/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_15/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_15/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_15/Initializer/random_uniform/max"
  input: "device_dummy_15/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_15/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_15/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_15/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_15/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_15/Initializer/random_uniform/mul"
  input: "device_dummy_15/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_15"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_15/Assign"
  op: "Assign"
  input: "device_dummy_15"
  input: "device_dummy_15/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_15/read"
  op: "Identity"
  input: "device_dummy_15"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_16/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_16/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_16/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_16/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_16/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_16/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_16/Initializer/random_uniform/max"
  input: "device_dummy_16/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_16/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_16/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_16/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_16/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_16/Initializer/random_uniform/mul"
  input: "device_dummy_16/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_16"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_16/Assign"
  op: "Assign"
  input: "device_dummy_16"
  input: "device_dummy_16/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_16/read"
  op: "Identity"
  input: "device_dummy_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_17/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_17/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_17/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_17/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_17/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_17/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_17/Initializer/random_uniform/max"
  input: "device_dummy_17/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_17/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_17/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_17/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_17/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_17/Initializer/random_uniform/mul"
  input: "device_dummy_17/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_17"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_17/Assign"
  op: "Assign"
  input: "device_dummy_17"
  input: "device_dummy_17/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_17/read"
  op: "Identity"
  input: "device_dummy_17"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_18/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_18/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_18/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_18/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_18/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_18/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_18/Initializer/random_uniform/max"
  input: "device_dummy_18/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_18/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_18/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_18/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_18/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_18/Initializer/random_uniform/mul"
  input: "device_dummy_18/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_18"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_18/Assign"
  op: "Assign"
  input: "device_dummy_18"
  input: "device_dummy_18/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_18/read"
  op: "Identity"
  input: "device_dummy_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_19/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_19/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_19/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_19/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_19/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_19/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_19/Initializer/random_uniform/max"
  input: "device_dummy_19/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_19/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_19/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_19/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_19/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_19/Initializer/random_uniform/mul"
  input: "device_dummy_19/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_19"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_19/Assign"
  op: "Assign"
  input: "device_dummy_19"
  input: "device_dummy_19/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_19/read"
  op: "Identity"
  input: "device_dummy_19"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_20/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_20/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_20/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_20/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_20/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_20/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_20/Initializer/random_uniform/max"
  input: "device_dummy_20/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_20/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_20/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_20/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_20/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_20/Initializer/random_uniform/mul"
  input: "device_dummy_20/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_20"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_20/Assign"
  op: "Assign"
  input: "device_dummy_20"
  input: "device_dummy_20/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_20/read"
  op: "Identity"
  input: "device_dummy_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_21/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_21/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_21/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_21/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_21/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_21/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_21/Initializer/random_uniform/max"
  input: "device_dummy_21/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_21/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_21/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_21/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_21/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_21/Initializer/random_uniform/mul"
  input: "device_dummy_21/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_21"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_21/Assign"
  op: "Assign"
  input: "device_dummy_21"
  input: "device_dummy_21/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_21/read"
  op: "Identity"
  input: "device_dummy_21"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_22/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_22/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_22/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_22/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_22/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_22/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_22/Initializer/random_uniform/max"
  input: "device_dummy_22/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_22/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_22/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_22/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_22/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_22/Initializer/random_uniform/mul"
  input: "device_dummy_22/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_22"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_22/Assign"
  op: "Assign"
  input: "device_dummy_22"
  input: "device_dummy_22/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_22/read"
  op: "Identity"
  input: "device_dummy_22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_23/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_23/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_23/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_23/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_23/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_23/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_23/Initializer/random_uniform/max"
  input: "device_dummy_23/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_23/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_23/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_23/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_23/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_23/Initializer/random_uniform/mul"
  input: "device_dummy_23/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_23"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_23/Assign"
  op: "Assign"
  input: "device_dummy_23"
  input: "device_dummy_23/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_23/read"
  op: "Identity"
  input: "device_dummy_23"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_24/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_24/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_24/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_24/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_24/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_24/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_24/Initializer/random_uniform/max"
  input: "device_dummy_24/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_24/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_24/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_24/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_24/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_24/Initializer/random_uniform/mul"
  input: "device_dummy_24/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_24"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_24/Assign"
  op: "Assign"
  input: "device_dummy_24"
  input: "device_dummy_24/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_24/read"
  op: "Identity"
  input: "device_dummy_24"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_25/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_25/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_25/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_25/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_25/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_25/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_25/Initializer/random_uniform/max"
  input: "device_dummy_25/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_25/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_25/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_25/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_25/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_25/Initializer/random_uniform/mul"
  input: "device_dummy_25/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_25"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_25/Assign"
  op: "Assign"
  input: "device_dummy_25"
  input: "device_dummy_25/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_25/read"
  op: "Identity"
  input: "device_dummy_25"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_26/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_26/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_26/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_26/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_26/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_26/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_26/Initializer/random_uniform/max"
  input: "device_dummy_26/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_26/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_26/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_26/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_26/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_26/Initializer/random_uniform/mul"
  input: "device_dummy_26/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_26"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_26/Assign"
  op: "Assign"
  input: "device_dummy_26"
  input: "device_dummy_26/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_26/read"
  op: "Identity"
  input: "device_dummy_26"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_27/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_27/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_27/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_27/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_27/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_27/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_27/Initializer/random_uniform/max"
  input: "device_dummy_27/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_27/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_27/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_27/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_27/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_27/Initializer/random_uniform/mul"
  input: "device_dummy_27/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_27"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_27/Assign"
  op: "Assign"
  input: "device_dummy_27"
  input: "device_dummy_27/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_27/read"
  op: "Identity"
  input: "device_dummy_27"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_28/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_28/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_28/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_28/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_28/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_28/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_28/Initializer/random_uniform/max"
  input: "device_dummy_28/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_28/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_28/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_28/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_28/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_28/Initializer/random_uniform/mul"
  input: "device_dummy_28/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_28"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_28/Assign"
  op: "Assign"
  input: "device_dummy_28"
  input: "device_dummy_28/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_28/read"
  op: "Identity"
  input: "device_dummy_28"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_29/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_29/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_29/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_29/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_29/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_29/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_29/Initializer/random_uniform/max"
  input: "device_dummy_29/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_29/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_29/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_29/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_29/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_29/Initializer/random_uniform/mul"
  input: "device_dummy_29/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_29"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_29/Assign"
  op: "Assign"
  input: "device_dummy_29"
  input: "device_dummy_29/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_29/read"
  op: "Identity"
  input: "device_dummy_29"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_30/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_30/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_30/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_30/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_30/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_30/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_30/Initializer/random_uniform/max"
  input: "device_dummy_30/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_30/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_30/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_30/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_30/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_30/Initializer/random_uniform/mul"
  input: "device_dummy_30/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_30"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_30/Assign"
  op: "Assign"
  input: "device_dummy_30"
  input: "device_dummy_30/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_30/read"
  op: "Identity"
  input: "device_dummy_30"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_31/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_31/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_31/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_31/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_31/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_31/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_31/Initializer/random_uniform/max"
  input: "device_dummy_31/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_31/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_31/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_31/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_31/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_31/Initializer/random_uniform/mul"
  input: "device_dummy_31/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_31"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_31/Assign"
  op: "Assign"
  input: "device_dummy_31"
  input: "device_dummy_31/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_31/read"
  op: "Identity"
  input: "device_dummy_31"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_32/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_32/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_32/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_32/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_32/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_32/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_32/Initializer/random_uniform/max"
  input: "device_dummy_32/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_32/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_32/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_32/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_32/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_32/Initializer/random_uniform/mul"
  input: "device_dummy_32/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_32"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_32/Assign"
  op: "Assign"
  input: "device_dummy_32"
  input: "device_dummy_32/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_32/read"
  op: "Identity"
  input: "device_dummy_32"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_33/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_33/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_33/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_33/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_33/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_33/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_33/Initializer/random_uniform/max"
  input: "device_dummy_33/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_33/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_33/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_33/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_33/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_33/Initializer/random_uniform/mul"
  input: "device_dummy_33/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_33"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_33/Assign"
  op: "Assign"
  input: "device_dummy_33"
  input: "device_dummy_33/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_33/read"
  op: "Identity"
  input: "device_dummy_33"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_34/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_34/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_34/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_34/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_34/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_34/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_34/Initializer/random_uniform/max"
  input: "device_dummy_34/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_34/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_34/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_34/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_34/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_34/Initializer/random_uniform/mul"
  input: "device_dummy_34/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_34"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_34/Assign"
  op: "Assign"
  input: "device_dummy_34"
  input: "device_dummy_34/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_34/read"
  op: "Identity"
  input: "device_dummy_34"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_35/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_35/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_35/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_35/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_35/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_35/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_35/Initializer/random_uniform/max"
  input: "device_dummy_35/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_35/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_35/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_35/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_35/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_35/Initializer/random_uniform/mul"
  input: "device_dummy_35/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_35"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_35/Assign"
  op: "Assign"
  input: "device_dummy_35"
  input: "device_dummy_35/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_35/read"
  op: "Identity"
  input: "device_dummy_35"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_36/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_36/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_36/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_36/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_36/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_36/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_36/Initializer/random_uniform/max"
  input: "device_dummy_36/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_36/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_36/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_36/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_36/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_36/Initializer/random_uniform/mul"
  input: "device_dummy_36/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_36"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_36/Assign"
  op: "Assign"
  input: "device_dummy_36"
  input: "device_dummy_36/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_36/read"
  op: "Identity"
  input: "device_dummy_36"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_37/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_37/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_37/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_37/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_37/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_37/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_37/Initializer/random_uniform/max"
  input: "device_dummy_37/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_37/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_37/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_37/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_37/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_37/Initializer/random_uniform/mul"
  input: "device_dummy_37/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_37"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_37/Assign"
  op: "Assign"
  input: "device_dummy_37"
  input: "device_dummy_37/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_37/read"
  op: "Identity"
  input: "device_dummy_37"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_38/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_38/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_38/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_38/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_38/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_38/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_38/Initializer/random_uniform/max"
  input: "device_dummy_38/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_38/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_38/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_38/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_38/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_38/Initializer/random_uniform/mul"
  input: "device_dummy_38/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_38"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_38/Assign"
  op: "Assign"
  input: "device_dummy_38"
  input: "device_dummy_38/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_38/read"
  op: "Identity"
  input: "device_dummy_38"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_39/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_39/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_39/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_39/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_39/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_39/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_39/Initializer/random_uniform/max"
  input: "device_dummy_39/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_39/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_39/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_39/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_39/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_39/Initializer/random_uniform/mul"
  input: "device_dummy_39/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_39"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_39/Assign"
  op: "Assign"
  input: "device_dummy_39"
  input: "device_dummy_39/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_39/read"
  op: "Identity"
  input: "device_dummy_39"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_40/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_40/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_40/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_40/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_40/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_40/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_40/Initializer/random_uniform/max"
  input: "device_dummy_40/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_40/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_40/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_40/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_40/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_40/Initializer/random_uniform/mul"
  input: "device_dummy_40/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_40"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_40/Assign"
  op: "Assign"
  input: "device_dummy_40"
  input: "device_dummy_40/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_40/read"
  op: "Identity"
  input: "device_dummy_40"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_41/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_41/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_41/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_41/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_41/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_41/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_41/Initializer/random_uniform/max"
  input: "device_dummy_41/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_41/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_41/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_41/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_41/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_41/Initializer/random_uniform/mul"
  input: "device_dummy_41/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_41"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_41/Assign"
  op: "Assign"
  input: "device_dummy_41"
  input: "device_dummy_41/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_41/read"
  op: "Identity"
  input: "device_dummy_41"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_42/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_42/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_42/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_42/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_42/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_42/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_42/Initializer/random_uniform/max"
  input: "device_dummy_42/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_42/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_42/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_42/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_42/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_42/Initializer/random_uniform/mul"
  input: "device_dummy_42/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_42"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_42/Assign"
  op: "Assign"
  input: "device_dummy_42"
  input: "device_dummy_42/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_42/read"
  op: "Identity"
  input: "device_dummy_42"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_43/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_43/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_43/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_43/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_43/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_43/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_43/Initializer/random_uniform/max"
  input: "device_dummy_43/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_43/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_43/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_43/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_43/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_43/Initializer/random_uniform/mul"
  input: "device_dummy_43/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_43"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_43/Assign"
  op: "Assign"
  input: "device_dummy_43"
  input: "device_dummy_43/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_43/read"
  op: "Identity"
  input: "device_dummy_43"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_44/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_44/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_44/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_44/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_44/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_44/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_44/Initializer/random_uniform/max"
  input: "device_dummy_44/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_44/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_44/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_44/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_44/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_44/Initializer/random_uniform/mul"
  input: "device_dummy_44/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_44"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_44/Assign"
  op: "Assign"
  input: "device_dummy_44"
  input: "device_dummy_44/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_44/read"
  op: "Identity"
  input: "device_dummy_44"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_45/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_45/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_45/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_45/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_45/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_45/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_45/Initializer/random_uniform/max"
  input: "device_dummy_45/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_45/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_45/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_45/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_45/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_45/Initializer/random_uniform/mul"
  input: "device_dummy_45/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_45"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_45/Assign"
  op: "Assign"
  input: "device_dummy_45"
  input: "device_dummy_45/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_45/read"
  op: "Identity"
  input: "device_dummy_45"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_46/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_46/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_46/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_46/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_46/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_46/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_46/Initializer/random_uniform/max"
  input: "device_dummy_46/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_46/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_46/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_46/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_46/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_46/Initializer/random_uniform/mul"
  input: "device_dummy_46/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_46"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_46/Assign"
  op: "Assign"
  input: "device_dummy_46"
  input: "device_dummy_46/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_46/read"
  op: "Identity"
  input: "device_dummy_46"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_47/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_47/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_47/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_47/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_47/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_47/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_47/Initializer/random_uniform/max"
  input: "device_dummy_47/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_47/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_47/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_47/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_47/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_47/Initializer/random_uniform/mul"
  input: "device_dummy_47/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_47"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_47/Assign"
  op: "Assign"
  input: "device_dummy_47"
  input: "device_dummy_47/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_47/read"
  op: "Identity"
  input: "device_dummy_47"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_48/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_48/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_48/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_48/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_48/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_48/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_48/Initializer/random_uniform/max"
  input: "device_dummy_48/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_48/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_48/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_48/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_48/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_48/Initializer/random_uniform/mul"
  input: "device_dummy_48/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_48"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_48/Assign"
  op: "Assign"
  input: "device_dummy_48"
  input: "device_dummy_48/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_48/read"
  op: "Identity"
  input: "device_dummy_48"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_49/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "device_dummy_49/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_49/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "device_dummy_49/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "device_dummy_49/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "device_dummy_49/Initializer/random_uniform/sub"
  op: "Sub"
  input: "device_dummy_49/Initializer/random_uniform/max"
  input: "device_dummy_49/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "device_dummy_49/Initializer/random_uniform/mul"
  op: "Mul"
  input: "device_dummy_49/Initializer/random_uniform/RandomUniform"
  input: "device_dummy_49/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_49/Initializer/random_uniform"
  op: "Add"
  input: "device_dummy_49/Initializer/random_uniform/mul"
  input: "device_dummy_49/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "device_dummy_49"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "device_dummy_49/Assign"
  op: "Assign"
  input: "device_dummy_49"
  input: "device_dummy_49/Initializer/random_uniform"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "device_dummy_49/read"
  op: "Identity"
  input: "device_dummy_49"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "stats-0"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-0/"
    }
  }
}
node {
  name: "stats-0/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-0/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-0"
  input: "stats-0/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-0/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-0/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-0"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-0/"
    }
  }
}
node {
  name: "tree-0/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-0/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-0"
  input: "tree-0/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-0/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-0/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-1"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-1/"
    }
  }
}
node {
  name: "stats-1/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-1/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-1"
  input: "stats-1/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-1/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-1/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-1"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-1/"
    }
  }
}
node {
  name: "tree-1/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-1/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-1"
  input: "tree-1/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-1/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-1/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-2"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-2/"
    }
  }
}
node {
  name: "stats-2/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-2/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-2"
  input: "stats-2/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-2/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-2/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-2"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-2/"
    }
  }
}
node {
  name: "tree-2/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-2/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-2"
  input: "tree-2/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-2/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-2/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-3"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-3/"
    }
  }
}
node {
  name: "stats-3/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-3/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-3"
  input: "stats-3/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-3/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-3"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-3/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-3"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-3"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-3/"
    }
  }
}
node {
  name: "tree-3/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-3/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-3"
  input: "tree-3/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-3/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-3"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-3/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-3"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-4"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-4/"
    }
  }
}
node {
  name: "stats-4/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-4/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-4"
  input: "stats-4/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-4/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-4"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-4/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-4"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-4"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-4/"
    }
  }
}
node {
  name: "tree-4/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-4/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-4"
  input: "tree-4/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-4/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-4"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-4/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-4"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-5"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-5/"
    }
  }
}
node {
  name: "stats-5/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-5/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-5"
  input: "stats-5/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-5/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-5"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-5/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-5"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-5"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-5/"
    }
  }
}
node {
  name: "tree-5/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-5/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-5"
  input: "tree-5/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-5/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-5"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-5/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-5"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-6"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-6/"
    }
  }
}
node {
  name: "stats-6/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-6/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-6"
  input: "stats-6/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-6/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-6"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-6/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-6"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-6"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-6/"
    }
  }
}
node {
  name: "tree-6/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-6/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-6"
  input: "tree-6/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-6/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-6"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-6/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-6"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-7"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-7/"
    }
  }
}
node {
  name: "stats-7/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-7/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-7"
  input: "stats-7/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-7/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-7"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-7/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-7"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-7"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-7/"
    }
  }
}
node {
  name: "tree-7/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-7/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-7"
  input: "tree-7/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-7/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-7"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-7/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-7"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-8"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-8/"
    }
  }
}
node {
  name: "stats-8/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-8/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-8"
  input: "stats-8/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-8/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-8"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-8/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-8"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-8"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-8/"
    }
  }
}
node {
  name: "tree-8/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-8/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-8"
  input: "tree-8/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-8/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-8"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-8/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-8"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-9"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-9/"
    }
  }
}
node {
  name: "stats-9/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-9/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-9"
  input: "stats-9/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-9/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-9"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-9/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-9"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-9"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-9/"
    }
  }
}
node {
  name: "tree-9/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-9/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-9"
  input: "tree-9/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-9/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-9"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-9/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-9"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-10"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-10/"
    }
  }
}
node {
  name: "stats-10/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-10/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-10"
  input: "stats-10/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-10/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-10"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-10/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-10"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-10"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-10/"
    }
  }
}
node {
  name: "tree-10/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-10/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-10"
  input: "tree-10/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-10/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-10"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-10/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-10"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-11"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-11/"
    }
  }
}
node {
  name: "stats-11/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-11/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-11"
  input: "stats-11/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-11/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-11"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-11/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-11"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-11"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-11/"
    }
  }
}
node {
  name: "tree-11/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-11/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-11"
  input: "tree-11/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-11/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-11"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-11/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-11"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-12"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-12/"
    }
  }
}
node {
  name: "stats-12/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-12/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-12"
  input: "stats-12/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-12/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-12"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-12/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-12"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-12"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-12/"
    }
  }
}
node {
  name: "tree-12/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-12/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-12"
  input: "tree-12/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-12/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-12"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-12/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-12"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-13"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-13/"
    }
  }
}
node {
  name: "stats-13/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-13/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-13"
  input: "stats-13/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-13/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-13"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-13/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-13"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-13"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-13/"
    }
  }
}
node {
  name: "tree-13/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-13/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-13"
  input: "tree-13/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-13/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-13"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-13/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-13"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-14"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-14/"
    }
  }
}
node {
  name: "stats-14/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-14/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-14"
  input: "stats-14/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-14/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-14"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-14/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-14"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-14"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-14/"
    }
  }
}
node {
  name: "tree-14/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-14/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-14"
  input: "tree-14/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-14/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-14"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-14/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-14"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-15"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-15/"
    }
  }
}
node {
  name: "stats-15/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-15/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-15"
  input: "stats-15/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-15/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-15"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-15/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-15"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-15"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-15/"
    }
  }
}
node {
  name: "tree-15/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-15/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-15"
  input: "tree-15/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-15/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-15"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-15/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-15"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-16"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-16/"
    }
  }
}
node {
  name: "stats-16/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-16/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-16"
  input: "stats-16/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-16/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-16"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-16/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-16"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-16"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-16/"
    }
  }
}
node {
  name: "tree-16/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-16/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-16"
  input: "tree-16/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-16/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-16"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-16/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-16"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-17"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-17/"
    }
  }
}
node {
  name: "stats-17/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-17/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-17"
  input: "stats-17/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-17/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-17"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-17/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-17"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-17"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-17/"
    }
  }
}
node {
  name: "tree-17/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-17/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-17"
  input: "tree-17/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-17/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-17"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-17/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-17"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-18"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-18/"
    }
  }
}
node {
  name: "stats-18/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-18/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-18"
  input: "stats-18/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-18/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-18"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-18/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-18"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-18"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-18/"
    }
  }
}
node {
  name: "tree-18/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-18/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-18"
  input: "tree-18/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-18/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-18"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-18/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-18"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-19"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-19/"
    }
  }
}
node {
  name: "stats-19/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-19/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-19"
  input: "stats-19/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-19/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-19"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-19/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-19"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-19"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-19/"
    }
  }
}
node {
  name: "tree-19/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-19/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-19"
  input: "tree-19/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-19/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-19"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-19/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-19"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-20"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-20/"
    }
  }
}
node {
  name: "stats-20/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-20/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-20"
  input: "stats-20/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-20/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-20"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-20/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-20"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-20"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-20/"
    }
  }
}
node {
  name: "tree-20/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-20/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-20"
  input: "tree-20/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-20/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-20"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-20/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-20"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-21"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-21/"
    }
  }
}
node {
  name: "stats-21/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-21/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-21"
  input: "stats-21/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-21/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-21"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-21/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-21"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-21"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-21/"
    }
  }
}
node {
  name: "tree-21/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-21/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-21"
  input: "tree-21/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-21/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-21"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-21/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-21"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-22"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-22/"
    }
  }
}
node {
  name: "stats-22/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-22/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-22"
  input: "stats-22/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-22/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-22"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-22/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-22"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-22"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-22/"
    }
  }
}
node {
  name: "tree-22/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-22/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-22"
  input: "tree-22/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-22/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-22"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-22/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-22"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-23"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-23/"
    }
  }
}
node {
  name: "stats-23/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-23/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-23"
  input: "stats-23/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-23/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-23"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-23/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-23"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-23"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-23/"
    }
  }
}
node {
  name: "tree-23/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-23/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-23"
  input: "tree-23/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-23/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-23"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-23/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-23"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-24"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-24/"
    }
  }
}
node {
  name: "stats-24/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-24/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-24"
  input: "stats-24/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-24/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-24"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-24/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-24"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-24"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-24/"
    }
  }
}
node {
  name: "tree-24/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-24/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-24"
  input: "tree-24/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-24/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-24"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-24/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-24"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-25"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-25/"
    }
  }
}
node {
  name: "stats-25/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-25/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-25"
  input: "stats-25/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-25/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-25"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-25/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-25"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-25"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-25/"
    }
  }
}
node {
  name: "tree-25/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-25/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-25"
  input: "tree-25/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-25/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-25"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-25/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-25"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-26"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-26/"
    }
  }
}
node {
  name: "stats-26/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-26/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-26"
  input: "stats-26/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-26/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-26"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-26/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-26"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-26"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-26/"
    }
  }
}
node {
  name: "tree-26/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-26/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-26"
  input: "tree-26/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-26/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-26"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-26/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-26"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-27"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-27/"
    }
  }
}
node {
  name: "stats-27/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-27/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-27"
  input: "stats-27/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-27/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-27"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-27/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-27"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-27"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-27/"
    }
  }
}
node {
  name: "tree-27/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-27/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-27"
  input: "tree-27/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-27/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-27"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-27/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-27"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-28"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-28/"
    }
  }
}
node {
  name: "stats-28/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-28/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-28"
  input: "stats-28/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-28/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-28"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-28/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-28"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-28"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-28/"
    }
  }
}
node {
  name: "tree-28/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-28/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-28"
  input: "tree-28/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-28/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-28"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-28/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-28"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-29"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-29/"
    }
  }
}
node {
  name: "stats-29/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-29/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-29"
  input: "stats-29/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-29/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-29"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-29/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-29"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-29"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-29/"
    }
  }
}
node {
  name: "tree-29/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-29/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-29"
  input: "tree-29/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-29/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-29"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-29/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-29"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-30"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-30/"
    }
  }
}
node {
  name: "stats-30/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-30/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-30"
  input: "stats-30/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-30/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-30"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-30/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-30"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-30"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-30/"
    }
  }
}
node {
  name: "tree-30/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-30/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-30"
  input: "tree-30/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-30/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-30"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-30/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-30"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-31"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-31/"
    }
  }
}
node {
  name: "stats-31/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-31/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-31"
  input: "stats-31/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-31/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-31"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-31/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-31"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-31"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-31/"
    }
  }
}
node {
  name: "tree-31/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-31/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-31"
  input: "tree-31/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-31/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-31"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-31/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-31"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-32"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-32/"
    }
  }
}
node {
  name: "stats-32/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-32/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-32"
  input: "stats-32/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-32/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-32"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-32/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-32"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-32"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-32/"
    }
  }
}
node {
  name: "tree-32/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-32/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-32"
  input: "tree-32/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-32/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-32"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-32/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-32"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-33"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-33/"
    }
  }
}
node {
  name: "stats-33/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-33/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-33"
  input: "stats-33/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-33/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-33"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-33/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-33"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-33"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-33/"
    }
  }
}
node {
  name: "tree-33/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-33/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-33"
  input: "tree-33/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-33/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-33"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-33/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-33"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-34"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-34/"
    }
  }
}
node {
  name: "stats-34/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-34/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-34"
  input: "stats-34/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-34/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-34"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-34/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-34"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-34"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-34/"
    }
  }
}
node {
  name: "tree-34/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-34/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-34"
  input: "tree-34/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-34/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-34"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-34/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-34"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-35"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-35/"
    }
  }
}
node {
  name: "stats-35/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-35/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-35"
  input: "stats-35/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-35/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-35"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-35/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-35"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-35"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-35/"
    }
  }
}
node {
  name: "tree-35/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-35/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-35"
  input: "tree-35/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-35/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-35"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-35/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-35"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-36"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-36/"
    }
  }
}
node {
  name: "stats-36/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-36/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-36"
  input: "stats-36/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-36/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-36"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-36/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-36"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-36"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-36/"
    }
  }
}
node {
  name: "tree-36/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-36/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-36"
  input: "tree-36/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-36/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-36"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-36/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-36"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-37"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-37/"
    }
  }
}
node {
  name: "stats-37/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-37/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-37"
  input: "stats-37/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-37/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-37"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-37/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-37"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-37"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-37/"
    }
  }
}
node {
  name: "tree-37/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-37/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-37"
  input: "tree-37/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-37/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-37"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-37/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-37"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-38"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-38/"
    }
  }
}
node {
  name: "stats-38/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-38/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-38"
  input: "stats-38/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-38/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-38"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-38/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-38"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-38"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-38/"
    }
  }
}
node {
  name: "tree-38/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-38/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-38"
  input: "tree-38/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-38/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-38"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-38/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-38"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-39"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-39/"
    }
  }
}
node {
  name: "stats-39/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-39/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-39"
  input: "stats-39/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-39/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-39"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-39/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-39"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-39"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-39/"
    }
  }
}
node {
  name: "tree-39/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-39/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-39"
  input: "tree-39/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-39/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-39"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-39/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-39"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-40"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-40/"
    }
  }
}
node {
  name: "stats-40/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-40/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-40"
  input: "stats-40/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-40/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-40"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-40/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-40"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-40"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-40/"
    }
  }
}
node {
  name: "tree-40/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-40/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-40"
  input: "tree-40/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-40/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-40"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-40/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-40"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-41"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-41/"
    }
  }
}
node {
  name: "stats-41/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-41/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-41"
  input: "stats-41/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-41/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-41"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-41/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-41"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-41"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-41/"
    }
  }
}
node {
  name: "tree-41/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-41/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-41"
  input: "tree-41/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-41/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-41"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-41/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-41"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-42"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-42/"
    }
  }
}
node {
  name: "stats-42/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-42/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-42"
  input: "stats-42/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-42/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-42"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-42/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-42"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-42"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-42/"
    }
  }
}
node {
  name: "tree-42/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-42/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-42"
  input: "tree-42/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-42/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-42"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-42/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-42"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-43"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-43/"
    }
  }
}
node {
  name: "stats-43/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-43/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-43"
  input: "stats-43/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-43/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-43"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-43/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-43"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-43"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-43/"
    }
  }
}
node {
  name: "tree-43/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-43/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-43"
  input: "tree-43/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-43/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-43"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-43/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-43"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-44"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-44/"
    }
  }
}
node {
  name: "stats-44/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-44/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-44"
  input: "stats-44/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-44/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-44"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-44/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-44"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-44"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-44/"
    }
  }
}
node {
  name: "tree-44/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-44/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-44"
  input: "tree-44/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-44/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-44"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-44/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-44"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-45"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-45/"
    }
  }
}
node {
  name: "stats-45/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-45/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-45"
  input: "stats-45/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-45/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-45"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-45/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-45"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-45"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-45/"
    }
  }
}
node {
  name: "tree-45/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-45/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-45"
  input: "tree-45/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-45/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-45"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-45/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-45"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-46"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-46/"
    }
  }
}
node {
  name: "stats-46/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-46/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-46"
  input: "stats-46/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-46/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-46"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-46/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-46"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-46"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-46/"
    }
  }
}
node {
  name: "tree-46/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-46/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-46"
  input: "tree-46/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-46/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-46"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-46/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-46"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-47"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-47/"
    }
  }
}
node {
  name: "stats-47/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-47/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-47"
  input: "stats-47/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-47/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-47"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-47/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-47"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-47"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-47/"
    }
  }
}
node {
  name: "tree-47/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-47/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-47"
  input: "tree-47/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-47/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-47"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-47/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-47"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-48"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-48/"
    }
  }
}
node {
  name: "stats-48/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-48/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-48"
  input: "stats-48/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-48/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-48"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-48/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-48"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-48"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-48/"
    }
  }
}
node {
  name: "tree-48/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-48/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-48"
  input: "tree-48/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-48/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-48"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-48/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-48"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-49"
  op: "FertileStatsResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stats-49/"
    }
  }
}
node {
  name: "stats-49/CreateFertileStatsVariable/stats_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "stats-49/CreateFertileStatsVariable"
  op: "CreateFertileStatsVariable"
  input: "stats-49"
  input: "stats-49/CreateFertileStatsVariable/stats_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stats-49/FertileStatsIsInitializedOp"
  op: "FertileStatsIsInitializedOp"
  input: "stats-49"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stats-49/FertileStatsSerialize"
  op: "FertileStatsSerialize"
  input: "stats-49"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-49"
  op: "DecisionTreeResourceHandleOp"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "tree-49/"
    }
  }
}
node {
  name: "tree-49/CreateTreeVariable/tree_config"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "tree-49/CreateTreeVariable"
  op: "CreateTreeVariable"
  input: "tree-49"
  input: "tree-49/CreateTreeVariable/tree_config"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "tree-49/TreeIsInitializedOp"
  op: "TreeIsInitializedOp"
  input: "tree-49"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tree-49/TreeSerialize"
  op: "TreeSerialize"
  input: "tree-49"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat"
  op: "Identity"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4200
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4"
  op: "TreePredictionsV4"
  input: "tree-0"
  input: "concat"
  input: "TreePredictionsV4/sparse_input_indices"
  input: "TreePredictionsV4/sparse_input_values"
  input: "TreePredictionsV4/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_1/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_1/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_1/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_1"
  op: "TreePredictionsV4"
  input: "tree-1"
  input: "concat"
  input: "TreePredictionsV4_1/sparse_input_indices"
  input: "TreePredictionsV4_1/sparse_input_values"
  input: "TreePredictionsV4_1/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_2/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_2/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_2/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_2"
  op: "TreePredictionsV4"
  input: "tree-2"
  input: "concat"
  input: "TreePredictionsV4_2/sparse_input_indices"
  input: "TreePredictionsV4_2/sparse_input_values"
  input: "TreePredictionsV4_2/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_3/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_3/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_3/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_3"
  op: "TreePredictionsV4"
  input: "tree-3"
  input: "concat"
  input: "TreePredictionsV4_3/sparse_input_indices"
  input: "TreePredictionsV4_3/sparse_input_values"
  input: "TreePredictionsV4_3/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_4/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_4/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_4/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_4"
  op: "TreePredictionsV4"
  input: "tree-4"
  input: "concat"
  input: "TreePredictionsV4_4/sparse_input_indices"
  input: "TreePredictionsV4_4/sparse_input_values"
  input: "TreePredictionsV4_4/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_5/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_5/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_5/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_5"
  op: "TreePredictionsV4"
  input: "tree-5"
  input: "concat"
  input: "TreePredictionsV4_5/sparse_input_indices"
  input: "TreePredictionsV4_5/sparse_input_values"
  input: "TreePredictionsV4_5/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_6/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_6/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_6/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_6"
  op: "TreePredictionsV4"
  input: "tree-6"
  input: "concat"
  input: "TreePredictionsV4_6/sparse_input_indices"
  input: "TreePredictionsV4_6/sparse_input_values"
  input: "TreePredictionsV4_6/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_7/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_7/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_7/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_7"
  op: "TreePredictionsV4"
  input: "tree-7"
  input: "concat"
  input: "TreePredictionsV4_7/sparse_input_indices"
  input: "TreePredictionsV4_7/sparse_input_values"
  input: "TreePredictionsV4_7/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_8/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_8/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_8/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_8"
  op: "TreePredictionsV4"
  input: "tree-8"
  input: "concat"
  input: "TreePredictionsV4_8/sparse_input_indices"
  input: "TreePredictionsV4_8/sparse_input_values"
  input: "TreePredictionsV4_8/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_9/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_9/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_9/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_9"
  op: "TreePredictionsV4"
  input: "tree-9"
  input: "concat"
  input: "TreePredictionsV4_9/sparse_input_indices"
  input: "TreePredictionsV4_9/sparse_input_values"
  input: "TreePredictionsV4_9/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_10/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_10/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_10/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_10"
  op: "TreePredictionsV4"
  input: "tree-10"
  input: "concat"
  input: "TreePredictionsV4_10/sparse_input_indices"
  input: "TreePredictionsV4_10/sparse_input_values"
  input: "TreePredictionsV4_10/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_11/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_11/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_11/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_11"
  op: "TreePredictionsV4"
  input: "tree-11"
  input: "concat"
  input: "TreePredictionsV4_11/sparse_input_indices"
  input: "TreePredictionsV4_11/sparse_input_values"
  input: "TreePredictionsV4_11/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_12/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_12/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_12/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_12"
  op: "TreePredictionsV4"
  input: "tree-12"
  input: "concat"
  input: "TreePredictionsV4_12/sparse_input_indices"
  input: "TreePredictionsV4_12/sparse_input_values"
  input: "TreePredictionsV4_12/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_13/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_13/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_13/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_13"
  op: "TreePredictionsV4"
  input: "tree-13"
  input: "concat"
  input: "TreePredictionsV4_13/sparse_input_indices"
  input: "TreePredictionsV4_13/sparse_input_values"
  input: "TreePredictionsV4_13/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_14/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_14/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_14/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_14"
  op: "TreePredictionsV4"
  input: "tree-14"
  input: "concat"
  input: "TreePredictionsV4_14/sparse_input_indices"
  input: "TreePredictionsV4_14/sparse_input_values"
  input: "TreePredictionsV4_14/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_15/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_15/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_15/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_15"
  op: "TreePredictionsV4"
  input: "tree-15"
  input: "concat"
  input: "TreePredictionsV4_15/sparse_input_indices"
  input: "TreePredictionsV4_15/sparse_input_values"
  input: "TreePredictionsV4_15/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_16/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_16/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_16/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_16"
  op: "TreePredictionsV4"
  input: "tree-16"
  input: "concat"
  input: "TreePredictionsV4_16/sparse_input_indices"
  input: "TreePredictionsV4_16/sparse_input_values"
  input: "TreePredictionsV4_16/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_17/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_17/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_17/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_17"
  op: "TreePredictionsV4"
  input: "tree-17"
  input: "concat"
  input: "TreePredictionsV4_17/sparse_input_indices"
  input: "TreePredictionsV4_17/sparse_input_values"
  input: "TreePredictionsV4_17/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_18/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_18/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_18/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_18"
  op: "TreePredictionsV4"
  input: "tree-18"
  input: "concat"
  input: "TreePredictionsV4_18/sparse_input_indices"
  input: "TreePredictionsV4_18/sparse_input_values"
  input: "TreePredictionsV4_18/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_19/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_19/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_19/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_19"
  op: "TreePredictionsV4"
  input: "tree-19"
  input: "concat"
  input: "TreePredictionsV4_19/sparse_input_indices"
  input: "TreePredictionsV4_19/sparse_input_values"
  input: "TreePredictionsV4_19/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_20/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_20/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_20/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_20"
  op: "TreePredictionsV4"
  input: "tree-20"
  input: "concat"
  input: "TreePredictionsV4_20/sparse_input_indices"
  input: "TreePredictionsV4_20/sparse_input_values"
  input: "TreePredictionsV4_20/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_21/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_21/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_21/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_21"
  op: "TreePredictionsV4"
  input: "tree-21"
  input: "concat"
  input: "TreePredictionsV4_21/sparse_input_indices"
  input: "TreePredictionsV4_21/sparse_input_values"
  input: "TreePredictionsV4_21/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_22/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_22/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_22/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_22"
  op: "TreePredictionsV4"
  input: "tree-22"
  input: "concat"
  input: "TreePredictionsV4_22/sparse_input_indices"
  input: "TreePredictionsV4_22/sparse_input_values"
  input: "TreePredictionsV4_22/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_23/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_23/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_23/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_23"
  op: "TreePredictionsV4"
  input: "tree-23"
  input: "concat"
  input: "TreePredictionsV4_23/sparse_input_indices"
  input: "TreePredictionsV4_23/sparse_input_values"
  input: "TreePredictionsV4_23/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_24/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_24/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_24/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_24"
  op: "TreePredictionsV4"
  input: "tree-24"
  input: "concat"
  input: "TreePredictionsV4_24/sparse_input_indices"
  input: "TreePredictionsV4_24/sparse_input_values"
  input: "TreePredictionsV4_24/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_25/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_25/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_25/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_25"
  op: "TreePredictionsV4"
  input: "tree-25"
  input: "concat"
  input: "TreePredictionsV4_25/sparse_input_indices"
  input: "TreePredictionsV4_25/sparse_input_values"
  input: "TreePredictionsV4_25/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_26/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_26/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_26/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_26"
  op: "TreePredictionsV4"
  input: "tree-26"
  input: "concat"
  input: "TreePredictionsV4_26/sparse_input_indices"
  input: "TreePredictionsV4_26/sparse_input_values"
  input: "TreePredictionsV4_26/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_27/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_27/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_27/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_27"
  op: "TreePredictionsV4"
  input: "tree-27"
  input: "concat"
  input: "TreePredictionsV4_27/sparse_input_indices"
  input: "TreePredictionsV4_27/sparse_input_values"
  input: "TreePredictionsV4_27/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_28/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_28/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_28/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_28"
  op: "TreePredictionsV4"
  input: "tree-28"
  input: "concat"
  input: "TreePredictionsV4_28/sparse_input_indices"
  input: "TreePredictionsV4_28/sparse_input_values"
  input: "TreePredictionsV4_28/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_29/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_29/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_29/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_29"
  op: "TreePredictionsV4"
  input: "tree-29"
  input: "concat"
  input: "TreePredictionsV4_29/sparse_input_indices"
  input: "TreePredictionsV4_29/sparse_input_values"
  input: "TreePredictionsV4_29/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_30/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_30/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_30/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_30"
  op: "TreePredictionsV4"
  input: "tree-30"
  input: "concat"
  input: "TreePredictionsV4_30/sparse_input_indices"
  input: "TreePredictionsV4_30/sparse_input_values"
  input: "TreePredictionsV4_30/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_31/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_31/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_31/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_31"
  op: "TreePredictionsV4"
  input: "tree-31"
  input: "concat"
  input: "TreePredictionsV4_31/sparse_input_indices"
  input: "TreePredictionsV4_31/sparse_input_values"
  input: "TreePredictionsV4_31/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_32/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_32/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_32/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_32"
  op: "TreePredictionsV4"
  input: "tree-32"
  input: "concat"
  input: "TreePredictionsV4_32/sparse_input_indices"
  input: "TreePredictionsV4_32/sparse_input_values"
  input: "TreePredictionsV4_32/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_33/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_33/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_33/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_33"
  op: "TreePredictionsV4"
  input: "tree-33"
  input: "concat"
  input: "TreePredictionsV4_33/sparse_input_indices"
  input: "TreePredictionsV4_33/sparse_input_values"
  input: "TreePredictionsV4_33/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_34/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_34/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_34/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_34"
  op: "TreePredictionsV4"
  input: "tree-34"
  input: "concat"
  input: "TreePredictionsV4_34/sparse_input_indices"
  input: "TreePredictionsV4_34/sparse_input_values"
  input: "TreePredictionsV4_34/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_35/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_35/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_35/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_35"
  op: "TreePredictionsV4"
  input: "tree-35"
  input: "concat"
  input: "TreePredictionsV4_35/sparse_input_indices"
  input: "TreePredictionsV4_35/sparse_input_values"
  input: "TreePredictionsV4_35/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_36/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_36/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_36/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_36"
  op: "TreePredictionsV4"
  input: "tree-36"
  input: "concat"
  input: "TreePredictionsV4_36/sparse_input_indices"
  input: "TreePredictionsV4_36/sparse_input_values"
  input: "TreePredictionsV4_36/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_37/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_37/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_37/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_37"
  op: "TreePredictionsV4"
  input: "tree-37"
  input: "concat"
  input: "TreePredictionsV4_37/sparse_input_indices"
  input: "TreePredictionsV4_37/sparse_input_values"
  input: "TreePredictionsV4_37/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_38/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_38/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_38/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_38"
  op: "TreePredictionsV4"
  input: "tree-38"
  input: "concat"
  input: "TreePredictionsV4_38/sparse_input_indices"
  input: "TreePredictionsV4_38/sparse_input_values"
  input: "TreePredictionsV4_38/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_39/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_39/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_39/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_39"
  op: "TreePredictionsV4"
  input: "tree-39"
  input: "concat"
  input: "TreePredictionsV4_39/sparse_input_indices"
  input: "TreePredictionsV4_39/sparse_input_values"
  input: "TreePredictionsV4_39/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_40/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_40/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_40/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_40"
  op: "TreePredictionsV4"
  input: "tree-40"
  input: "concat"
  input: "TreePredictionsV4_40/sparse_input_indices"
  input: "TreePredictionsV4_40/sparse_input_values"
  input: "TreePredictionsV4_40/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_41/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_41/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_41/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_41"
  op: "TreePredictionsV4"
  input: "tree-41"
  input: "concat"
  input: "TreePredictionsV4_41/sparse_input_indices"
  input: "TreePredictionsV4_41/sparse_input_values"
  input: "TreePredictionsV4_41/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_42/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_42/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_42/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_42"
  op: "TreePredictionsV4"
  input: "tree-42"
  input: "concat"
  input: "TreePredictionsV4_42/sparse_input_indices"
  input: "TreePredictionsV4_42/sparse_input_values"
  input: "TreePredictionsV4_42/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_43/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_43/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_43/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_43"
  op: "TreePredictionsV4"
  input: "tree-43"
  input: "concat"
  input: "TreePredictionsV4_43/sparse_input_indices"
  input: "TreePredictionsV4_43/sparse_input_values"
  input: "TreePredictionsV4_43/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_44/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_44/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_44/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_44"
  op: "TreePredictionsV4"
  input: "tree-44"
  input: "concat"
  input: "TreePredictionsV4_44/sparse_input_indices"
  input: "TreePredictionsV4_44/sparse_input_values"
  input: "TreePredictionsV4_44/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_45/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_45/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_45/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_45"
  op: "TreePredictionsV4"
  input: "tree-45"
  input: "concat"
  input: "TreePredictionsV4_45/sparse_input_indices"
  input: "TreePredictionsV4_45/sparse_input_values"
  input: "TreePredictionsV4_45/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_46/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_46/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_46/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_46"
  op: "TreePredictionsV4"
  input: "tree-46"
  input: "concat"
  input: "TreePredictionsV4_46/sparse_input_indices"
  input: "TreePredictionsV4_46/sparse_input_values"
  input: "TreePredictionsV4_46/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_47/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_47/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_47/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_47"
  op: "TreePredictionsV4"
  input: "tree-47"
  input: "concat"
  input: "TreePredictionsV4_47/sparse_input_indices"
  input: "TreePredictionsV4_47/sparse_input_values"
  input: "TreePredictionsV4_47/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_48/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_48/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_48/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_48"
  op: "TreePredictionsV4"
  input: "tree-48"
  input: "concat"
  input: "TreePredictionsV4_48/sparse_input_indices"
  input: "TreePredictionsV4_48/sparse_input_values"
  input: "TreePredictionsV4_48/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "TreePredictionsV4_49/sparse_input_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_49/sparse_input_values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_49/sparse_input_shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TreePredictionsV4_49"
  op: "TreePredictionsV4"
  input: "tree-49"
  input: "concat"
  input: "TreePredictionsV4_49/sparse_input_indices"
  input: "TreePredictionsV4_49/sparse_input_values"
  input: "TreePredictionsV4_49/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "stack"
  op: "Pack"
  input: "TreePredictionsV4"
  input: "TreePredictionsV4_1"
  input: "TreePredictionsV4_2"
  input: "TreePredictionsV4_3"
  input: "TreePredictionsV4_4"
  input: "TreePredictionsV4_5"
  input: "TreePredictionsV4_6"
  input: "TreePredictionsV4_7"
  input: "TreePredictionsV4_8"
  input: "TreePredictionsV4_9"
  input: "TreePredictionsV4_10"
  input: "TreePredictionsV4_11"
  input: "TreePredictionsV4_12"
  input: "TreePredictionsV4_13"
  input: "TreePredictionsV4_14"
  input: "TreePredictionsV4_15"
  input: "TreePredictionsV4_16"
  input: "TreePredictionsV4_17"
  input: "TreePredictionsV4_18"
  input: "TreePredictionsV4_19"
  input: "TreePredictionsV4_20"
  input: "TreePredictionsV4_21"
  input: "TreePredictionsV4_22"
  input: "TreePredictionsV4_23"
  input: "TreePredictionsV4_24"
  input: "TreePredictionsV4_25"
  input: "TreePredictionsV4_26"
  input: "TreePredictionsV4_27"
  input: "TreePredictionsV4_28"
  input: "TreePredictionsV4_29"
  input: "TreePredictionsV4_30"
  input: "TreePredictionsV4_31"
  input: "TreePredictionsV4_32"
  input: "TreePredictionsV4_33"
  input: "TreePredictionsV4_34"
  input: "TreePredictionsV4_35"
  input: "TreePredictionsV4_36"
  input: "TreePredictionsV4_37"
  input: "TreePredictionsV4_38"
  input: "TreePredictionsV4_39"
  input: "TreePredictionsV4_40"
  input: "TreePredictionsV4_41"
  input: "TreePredictionsV4_42"
  input: "TreePredictionsV4_43"
  input: "TreePredictionsV4_44"
  input: "TreePredictionsV4_45"
  input: "TreePredictionsV4_46"
  input: "TreePredictionsV4_47"
  input: "TreePredictionsV4_48"
  input: "TreePredictionsV4_49"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 50
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 50
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Sum/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "stack"
  input: "Sum/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "probabilities/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 50.0
      }
    }
  }
}
node {
  name: "probabilities"
  op: "RealDiv"
  input: "Sum"
  input: "probabilities/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "stack_1"
  op: "Pack"
  input: "TreePredictionsV4:1"
  input: "TreePredictionsV4_1:1"
  input: "TreePredictionsV4_2:1"
  input: "TreePredictionsV4_3:1"
  input: "TreePredictionsV4_4:1"
  input: "TreePredictionsV4_5:1"
  input: "TreePredictionsV4_6:1"
  input: "TreePredictionsV4_7:1"
  input: "TreePredictionsV4_8:1"
  input: "TreePredictionsV4_9:1"
  input: "TreePredictionsV4_10:1"
  input: "TreePredictionsV4_11:1"
  input: "TreePredictionsV4_12:1"
  input: "TreePredictionsV4_13:1"
  input: "TreePredictionsV4_14:1"
  input: "TreePredictionsV4_15:1"
  input: "TreePredictionsV4_16:1"
  input: "TreePredictionsV4_17:1"
  input: "TreePredictionsV4_18:1"
  input: "TreePredictionsV4_19:1"
  input: "TreePredictionsV4_20:1"
  input: "TreePredictionsV4_21:1"
  input: "TreePredictionsV4_22:1"
  input: "TreePredictionsV4_23:1"
  input: "TreePredictionsV4_24:1"
  input: "TreePredictionsV4_25:1"
  input: "TreePredictionsV4_26:1"
  input: "TreePredictionsV4_27:1"
  input: "TreePredictionsV4_28:1"
  input: "TreePredictionsV4_29:1"
  input: "TreePredictionsV4_30:1"
  input: "TreePredictionsV4_31:1"
  input: "TreePredictionsV4_32:1"
  input: "TreePredictionsV4_33:1"
  input: "TreePredictionsV4_34:1"
  input: "TreePredictionsV4_35:1"
  input: "TreePredictionsV4_36:1"
  input: "TreePredictionsV4_37:1"
  input: "TreePredictionsV4_38:1"
  input: "TreePredictionsV4_39:1"
  input: "TreePredictionsV4_40:1"
  input: "TreePredictionsV4_41:1"
  input: "TreePredictionsV4_42:1"
  input: "TreePredictionsV4_43:1"
  input: "TreePredictionsV4_44:1"
  input: "TreePredictionsV4_45:1"
  input: "TreePredictionsV4_46:1"
  input: "TreePredictionsV4_47:1"
  input: "TreePredictionsV4_48:1"
  input: "TreePredictionsV4_49:1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 50
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "stack"
  input: "stack"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 50
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Sum_1/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "mul"
  input: "Sum_1/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "div/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 50.0
      }
    }
  }
}
node {
  name: "div"
  op: "RealDiv"
  input: "Sum_1"
  input: "div/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "probabilities"
  input: "probabilities"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "div"
  input: "mul_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Maximum/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Maximum"
  op: "Maximum"
  input: "Maximum/x"
  input: "sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "TreeSize"
  op: "TreeSize"
  input: "tree-0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_1"
  op: "TreeSize"
  input: "tree-1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_2"
  op: "TreeSize"
  input: "tree-2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_3"
  op: "TreeSize"
  input: "tree-3"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_4"
  op: "TreeSize"
  input: "tree-4"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_5"
  op: "TreeSize"
  input: "tree-5"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_6"
  op: "TreeSize"
  input: "tree-6"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_7"
  op: "TreeSize"
  input: "tree-7"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_8"
  op: "TreeSize"
  input: "tree-8"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_9"
  op: "TreeSize"
  input: "tree-9"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_10"
  op: "TreeSize"
  input: "tree-10"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_11"
  op: "TreeSize"
  input: "tree-11"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_12"
  op: "TreeSize"
  input: "tree-12"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_13"
  op: "TreeSize"
  input: "tree-13"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_14"
  op: "TreeSize"
  input: "tree-14"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_15"
  op: "TreeSize"
  input: "tree-15"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_16"
  op: "TreeSize"
  input: "tree-16"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_17"
  op: "TreeSize"
  input: "tree-17"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_18"
  op: "TreeSize"
  input: "tree-18"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_19"
  op: "TreeSize"
  input: "tree-19"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_20"
  op: "TreeSize"
  input: "tree-20"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_21"
  op: "TreeSize"
  input: "tree-21"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_22"
  op: "TreeSize"
  input: "tree-22"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_23"
  op: "TreeSize"
  input: "tree-23"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_24"
  op: "TreeSize"
  input: "tree-24"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_25"
  op: "TreeSize"
  input: "tree-25"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_26"
  op: "TreeSize"
  input: "tree-26"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_27"
  op: "TreeSize"
  input: "tree-27"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_28"
  op: "TreeSize"
  input: "tree-28"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_29"
  op: "TreeSize"
  input: "tree-29"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_30"
  op: "TreeSize"
  input: "tree-30"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_31"
  op: "TreeSize"
  input: "tree-31"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_32"
  op: "TreeSize"
  input: "tree-32"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_33"
  op: "TreeSize"
  input: "tree-33"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_34"
  op: "TreeSize"
  input: "tree-34"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_35"
  op: "TreeSize"
  input: "tree-35"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_36"
  op: "TreeSize"
  input: "tree-36"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_37"
  op: "TreeSize"
  input: "tree-37"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_38"
  op: "TreeSize"
  input: "tree-38"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_39"
  op: "TreeSize"
  input: "tree-39"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_40"
  op: "TreeSize"
  input: "tree-40"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_41"
  op: "TreeSize"
  input: "tree-41"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_42"
  op: "TreeSize"
  input: "tree-42"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_43"
  op: "TreeSize"
  input: "tree-43"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_44"
  op: "TreeSize"
  input: "tree-44"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_45"
  op: "TreeSize"
  input: "tree-45"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_46"
  op: "TreeSize"
  input: "tree-46"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_47"
  op: "TreeSize"
  input: "tree-47"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_48"
  op: "TreeSize"
  input: "tree-48"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TreeSize_49"
  op: "TreeSize"
  input: "tree-49"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "stack_2"
  op: "Pack"
  input: "TreeSize"
  input: "TreeSize_1"
  input: "TreeSize_2"
  input: "TreeSize_3"
  input: "TreeSize_4"
  input: "TreeSize_5"
  input: "TreeSize_6"
  input: "TreeSize_7"
  input: "TreeSize_8"
  input: "TreeSize_9"
  input: "TreeSize_10"
  input: "TreeSize_11"
  input: "TreeSize_12"
  input: "TreeSize_13"
  input: "TreeSize_14"
  input: "TreeSize_15"
  input: "TreeSize_16"
  input: "TreeSize_17"
  input: "TreeSize_18"
  input: "TreeSize_19"
  input: "TreeSize_20"
  input: "TreeSize_21"
  input: "TreeSize_22"
  input: "TreeSize_23"
  input: "TreeSize_24"
  input: "TreeSize_25"
  input: "TreeSize_26"
  input: "TreeSize_27"
  input: "TreeSize_28"
  input: "TreeSize_29"
  input: "TreeSize_30"
  input: "TreeSize_31"
  input: "TreeSize_32"
  input: "TreeSize_33"
  input: "TreeSize_34"
  input: "TreeSize_35"
  input: "TreeSize_36"
  input: "TreeSize_37"
  input: "TreeSize_38"
  input: "TreeSize_39"
  input: "TreeSize_40"
  input: "TreeSize_41"
  input: "TreeSize_42"
  input: "TreeSize_43"
  input: "TreeSize_44"
  input: "TreeSize_45"
  input: "TreeSize_46"
  input: "TreeSize_47"
  input: "TreeSize_48"
  input: "TreeSize_49"
  attr {
    key: "N"
    value {
      i: 50
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "stack_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "ToFloat"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "average_tree_size/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_tree_size"
      }
    }
  }
}
node {
  name: "average_tree_size"
  op: "ScalarSummary"
  input: "average_tree_size/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "Slice"
  op: "Slice"
  input: "probabilities"
  input: "Slice/begin"
  input: "Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "sub_1/x"
  input: "Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Maximum_1"
  op: "Maximum"
  input: "sub_1"
  input: "Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "Slice"
  input: "Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Maximum_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Maximum_2"
  op: "Maximum"
  input: "truediv"
  input: "Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Log"
  op: "Log"
  input: "Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/concat_dim"
  op: "Const"
  input: "^Log"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat_1"
  op: "Identity"
  input: "input"
  input: "^Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4200
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat_1"
  op: "Cast"
  input: "output"
  input: "^Log"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToInt32/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4"
  op: "TraverseTreeV4"
  input: "tree-0"
  input: "concat_1"
  input: "TraverseTreeV4/sparse_input_indices"
  input: "TraverseTreeV4/sparse_input_values"
  input: "TraverseTreeV4/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4"
  op: "UpdateModelV4"
  input: "tree-0"
  input: "TraverseTreeV4"
  input: "ToFloat_1"
  input: "UpdateModelV4/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4"
  op: "ProcessInputV4"
  input: "tree-0"
  input: "stats-0"
  input: "concat_1"
  input: "ProcessInputV4/sparse_input_indices"
  input: "ProcessInputV4/sparse_input_values"
  input: "ProcessInputV4/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4/input_weights"
  input: "TraverseTreeV4"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4"
  op: "GrowTreeV4"
  input: "tree-0"
  input: "stats-0"
  input: "ProcessInputV4"
  input: "^UpdateModelV4"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_1/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_1/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_1/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_1/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_1"
  op: "TraverseTreeV4"
  input: "tree-1"
  input: "concat_1"
  input: "TraverseTreeV4_1/sparse_input_indices"
  input: "TraverseTreeV4_1/sparse_input_values"
  input: "TraverseTreeV4_1/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_1/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_1"
  op: "UpdateModelV4"
  input: "tree-1"
  input: "TraverseTreeV4_1"
  input: "ToFloat_1"
  input: "UpdateModelV4_1/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_1/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_1/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_1/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_1/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_1"
  op: "ProcessInputV4"
  input: "tree-1"
  input: "stats-1"
  input: "concat_1"
  input: "ProcessInputV4_1/sparse_input_indices"
  input: "ProcessInputV4_1/sparse_input_values"
  input: "ProcessInputV4_1/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_1/input_weights"
  input: "TraverseTreeV4_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_1"
  op: "GrowTreeV4"
  input: "tree-1"
  input: "stats-1"
  input: "ProcessInputV4_1"
  input: "^UpdateModelV4_1"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_2/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_2/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_2/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_2/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_2"
  op: "TraverseTreeV4"
  input: "tree-2"
  input: "concat_1"
  input: "TraverseTreeV4_2/sparse_input_indices"
  input: "TraverseTreeV4_2/sparse_input_values"
  input: "TraverseTreeV4_2/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_2/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_2"
  op: "UpdateModelV4"
  input: "tree-2"
  input: "TraverseTreeV4_2"
  input: "ToFloat_1"
  input: "UpdateModelV4_2/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_2/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_2/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_2/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_2/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_2"
  op: "ProcessInputV4"
  input: "tree-2"
  input: "stats-2"
  input: "concat_1"
  input: "ProcessInputV4_2/sparse_input_indices"
  input: "ProcessInputV4_2/sparse_input_values"
  input: "ProcessInputV4_2/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_2/input_weights"
  input: "TraverseTreeV4_2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_2"
  op: "GrowTreeV4"
  input: "tree-2"
  input: "stats-2"
  input: "ProcessInputV4_2"
  input: "^UpdateModelV4_2"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_3/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_3/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_3/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_3/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_3"
  op: "TraverseTreeV4"
  input: "tree-3"
  input: "concat_1"
  input: "TraverseTreeV4_3/sparse_input_indices"
  input: "TraverseTreeV4_3/sparse_input_values"
  input: "TraverseTreeV4_3/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_3/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_3"
  op: "UpdateModelV4"
  input: "tree-3"
  input: "TraverseTreeV4_3"
  input: "ToFloat_1"
  input: "UpdateModelV4_3/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_3/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_3/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_3/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_3/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_3"
  op: "ProcessInputV4"
  input: "tree-3"
  input: "stats-3"
  input: "concat_1"
  input: "ProcessInputV4_3/sparse_input_indices"
  input: "ProcessInputV4_3/sparse_input_values"
  input: "ProcessInputV4_3/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_3/input_weights"
  input: "TraverseTreeV4_3"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_3"
  op: "GrowTreeV4"
  input: "tree-3"
  input: "stats-3"
  input: "ProcessInputV4_3"
  input: "^UpdateModelV4_3"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_4/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_4/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_4/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_4/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_4"
  op: "TraverseTreeV4"
  input: "tree-4"
  input: "concat_1"
  input: "TraverseTreeV4_4/sparse_input_indices"
  input: "TraverseTreeV4_4/sparse_input_values"
  input: "TraverseTreeV4_4/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_4/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_4"
  op: "UpdateModelV4"
  input: "tree-4"
  input: "TraverseTreeV4_4"
  input: "ToFloat_1"
  input: "UpdateModelV4_4/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_4/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_4/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_4/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_4/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_4"
  op: "ProcessInputV4"
  input: "tree-4"
  input: "stats-4"
  input: "concat_1"
  input: "ProcessInputV4_4/sparse_input_indices"
  input: "ProcessInputV4_4/sparse_input_values"
  input: "ProcessInputV4_4/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_4/input_weights"
  input: "TraverseTreeV4_4"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_4"
  op: "GrowTreeV4"
  input: "tree-4"
  input: "stats-4"
  input: "ProcessInputV4_4"
  input: "^UpdateModelV4_4"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_5/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_5/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_5/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_5/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_5"
  op: "TraverseTreeV4"
  input: "tree-5"
  input: "concat_1"
  input: "TraverseTreeV4_5/sparse_input_indices"
  input: "TraverseTreeV4_5/sparse_input_values"
  input: "TraverseTreeV4_5/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_5/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_5"
  op: "UpdateModelV4"
  input: "tree-5"
  input: "TraverseTreeV4_5"
  input: "ToFloat_1"
  input: "UpdateModelV4_5/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_5/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_5/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_5/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_5/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_5"
  op: "ProcessInputV4"
  input: "tree-5"
  input: "stats-5"
  input: "concat_1"
  input: "ProcessInputV4_5/sparse_input_indices"
  input: "ProcessInputV4_5/sparse_input_values"
  input: "ProcessInputV4_5/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_5/input_weights"
  input: "TraverseTreeV4_5"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_5"
  op: "GrowTreeV4"
  input: "tree-5"
  input: "stats-5"
  input: "ProcessInputV4_5"
  input: "^UpdateModelV4_5"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_6/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_6/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_6/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_6/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_6"
  op: "TraverseTreeV4"
  input: "tree-6"
  input: "concat_1"
  input: "TraverseTreeV4_6/sparse_input_indices"
  input: "TraverseTreeV4_6/sparse_input_values"
  input: "TraverseTreeV4_6/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_6/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_6"
  op: "UpdateModelV4"
  input: "tree-6"
  input: "TraverseTreeV4_6"
  input: "ToFloat_1"
  input: "UpdateModelV4_6/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_6/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_6/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_6/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_6/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_6"
  op: "ProcessInputV4"
  input: "tree-6"
  input: "stats-6"
  input: "concat_1"
  input: "ProcessInputV4_6/sparse_input_indices"
  input: "ProcessInputV4_6/sparse_input_values"
  input: "ProcessInputV4_6/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_6/input_weights"
  input: "TraverseTreeV4_6"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_6"
  op: "GrowTreeV4"
  input: "tree-6"
  input: "stats-6"
  input: "ProcessInputV4_6"
  input: "^UpdateModelV4_6"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_7/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_7/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_7/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_7/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_7"
  op: "TraverseTreeV4"
  input: "tree-7"
  input: "concat_1"
  input: "TraverseTreeV4_7/sparse_input_indices"
  input: "TraverseTreeV4_7/sparse_input_values"
  input: "TraverseTreeV4_7/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_7/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_7"
  op: "UpdateModelV4"
  input: "tree-7"
  input: "TraverseTreeV4_7"
  input: "ToFloat_1"
  input: "UpdateModelV4_7/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_7/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_7/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_7/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_7/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_7"
  op: "ProcessInputV4"
  input: "tree-7"
  input: "stats-7"
  input: "concat_1"
  input: "ProcessInputV4_7/sparse_input_indices"
  input: "ProcessInputV4_7/sparse_input_values"
  input: "ProcessInputV4_7/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_7/input_weights"
  input: "TraverseTreeV4_7"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_7"
  op: "GrowTreeV4"
  input: "tree-7"
  input: "stats-7"
  input: "ProcessInputV4_7"
  input: "^UpdateModelV4_7"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_8/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_8/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_8/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_8/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_8"
  op: "TraverseTreeV4"
  input: "tree-8"
  input: "concat_1"
  input: "TraverseTreeV4_8/sparse_input_indices"
  input: "TraverseTreeV4_8/sparse_input_values"
  input: "TraverseTreeV4_8/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_8/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_8"
  op: "UpdateModelV4"
  input: "tree-8"
  input: "TraverseTreeV4_8"
  input: "ToFloat_1"
  input: "UpdateModelV4_8/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_8/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_8/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_8/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_8/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_8"
  op: "ProcessInputV4"
  input: "tree-8"
  input: "stats-8"
  input: "concat_1"
  input: "ProcessInputV4_8/sparse_input_indices"
  input: "ProcessInputV4_8/sparse_input_values"
  input: "ProcessInputV4_8/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_8/input_weights"
  input: "TraverseTreeV4_8"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_8"
  op: "GrowTreeV4"
  input: "tree-8"
  input: "stats-8"
  input: "ProcessInputV4_8"
  input: "^UpdateModelV4_8"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_9/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_9/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_9/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_9/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_9"
  op: "TraverseTreeV4"
  input: "tree-9"
  input: "concat_1"
  input: "TraverseTreeV4_9/sparse_input_indices"
  input: "TraverseTreeV4_9/sparse_input_values"
  input: "TraverseTreeV4_9/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_9/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_9"
  op: "UpdateModelV4"
  input: "tree-9"
  input: "TraverseTreeV4_9"
  input: "ToFloat_1"
  input: "UpdateModelV4_9/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_9/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_9/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_9/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_9/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_9"
  op: "ProcessInputV4"
  input: "tree-9"
  input: "stats-9"
  input: "concat_1"
  input: "ProcessInputV4_9/sparse_input_indices"
  input: "ProcessInputV4_9/sparse_input_values"
  input: "ProcessInputV4_9/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_9/input_weights"
  input: "TraverseTreeV4_9"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_9"
  op: "GrowTreeV4"
  input: "tree-9"
  input: "stats-9"
  input: "ProcessInputV4_9"
  input: "^UpdateModelV4_9"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_10/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_10/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_10/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_10/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_10"
  op: "TraverseTreeV4"
  input: "tree-10"
  input: "concat_1"
  input: "TraverseTreeV4_10/sparse_input_indices"
  input: "TraverseTreeV4_10/sparse_input_values"
  input: "TraverseTreeV4_10/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_10/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_10"
  op: "UpdateModelV4"
  input: "tree-10"
  input: "TraverseTreeV4_10"
  input: "ToFloat_1"
  input: "UpdateModelV4_10/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_10/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_10/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_10/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_10/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_10"
  op: "ProcessInputV4"
  input: "tree-10"
  input: "stats-10"
  input: "concat_1"
  input: "ProcessInputV4_10/sparse_input_indices"
  input: "ProcessInputV4_10/sparse_input_values"
  input: "ProcessInputV4_10/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_10/input_weights"
  input: "TraverseTreeV4_10"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_10"
  op: "GrowTreeV4"
  input: "tree-10"
  input: "stats-10"
  input: "ProcessInputV4_10"
  input: "^UpdateModelV4_10"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_11/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_11/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_11/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_11/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_11"
  op: "TraverseTreeV4"
  input: "tree-11"
  input: "concat_1"
  input: "TraverseTreeV4_11/sparse_input_indices"
  input: "TraverseTreeV4_11/sparse_input_values"
  input: "TraverseTreeV4_11/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_11/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_11"
  op: "UpdateModelV4"
  input: "tree-11"
  input: "TraverseTreeV4_11"
  input: "ToFloat_1"
  input: "UpdateModelV4_11/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_11/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_11/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_11/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_11/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_11"
  op: "ProcessInputV4"
  input: "tree-11"
  input: "stats-11"
  input: "concat_1"
  input: "ProcessInputV4_11/sparse_input_indices"
  input: "ProcessInputV4_11/sparse_input_values"
  input: "ProcessInputV4_11/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_11/input_weights"
  input: "TraverseTreeV4_11"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_11"
  op: "GrowTreeV4"
  input: "tree-11"
  input: "stats-11"
  input: "ProcessInputV4_11"
  input: "^UpdateModelV4_11"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_12/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_12/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_12/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_12/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_12"
  op: "TraverseTreeV4"
  input: "tree-12"
  input: "concat_1"
  input: "TraverseTreeV4_12/sparse_input_indices"
  input: "TraverseTreeV4_12/sparse_input_values"
  input: "TraverseTreeV4_12/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_12/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_12"
  op: "UpdateModelV4"
  input: "tree-12"
  input: "TraverseTreeV4_12"
  input: "ToFloat_1"
  input: "UpdateModelV4_12/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_12/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_12/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_12/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_12/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_12"
  op: "ProcessInputV4"
  input: "tree-12"
  input: "stats-12"
  input: "concat_1"
  input: "ProcessInputV4_12/sparse_input_indices"
  input: "ProcessInputV4_12/sparse_input_values"
  input: "ProcessInputV4_12/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_12/input_weights"
  input: "TraverseTreeV4_12"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_12"
  op: "GrowTreeV4"
  input: "tree-12"
  input: "stats-12"
  input: "ProcessInputV4_12"
  input: "^UpdateModelV4_12"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_13/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_13/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_13/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_13/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_13"
  op: "TraverseTreeV4"
  input: "tree-13"
  input: "concat_1"
  input: "TraverseTreeV4_13/sparse_input_indices"
  input: "TraverseTreeV4_13/sparse_input_values"
  input: "TraverseTreeV4_13/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_13/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_13"
  op: "UpdateModelV4"
  input: "tree-13"
  input: "TraverseTreeV4_13"
  input: "ToFloat_1"
  input: "UpdateModelV4_13/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_13/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_13/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_13/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_13/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_13"
  op: "ProcessInputV4"
  input: "tree-13"
  input: "stats-13"
  input: "concat_1"
  input: "ProcessInputV4_13/sparse_input_indices"
  input: "ProcessInputV4_13/sparse_input_values"
  input: "ProcessInputV4_13/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_13/input_weights"
  input: "TraverseTreeV4_13"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_13"
  op: "GrowTreeV4"
  input: "tree-13"
  input: "stats-13"
  input: "ProcessInputV4_13"
  input: "^UpdateModelV4_13"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_14/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_14/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_14/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_14/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_14"
  op: "TraverseTreeV4"
  input: "tree-14"
  input: "concat_1"
  input: "TraverseTreeV4_14/sparse_input_indices"
  input: "TraverseTreeV4_14/sparse_input_values"
  input: "TraverseTreeV4_14/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_14/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_14"
  op: "UpdateModelV4"
  input: "tree-14"
  input: "TraverseTreeV4_14"
  input: "ToFloat_1"
  input: "UpdateModelV4_14/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_14/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_14/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_14/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_14/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_14"
  op: "ProcessInputV4"
  input: "tree-14"
  input: "stats-14"
  input: "concat_1"
  input: "ProcessInputV4_14/sparse_input_indices"
  input: "ProcessInputV4_14/sparse_input_values"
  input: "ProcessInputV4_14/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_14/input_weights"
  input: "TraverseTreeV4_14"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_14"
  op: "GrowTreeV4"
  input: "tree-14"
  input: "stats-14"
  input: "ProcessInputV4_14"
  input: "^UpdateModelV4_14"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_15/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_15/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_15/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_15/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_15"
  op: "TraverseTreeV4"
  input: "tree-15"
  input: "concat_1"
  input: "TraverseTreeV4_15/sparse_input_indices"
  input: "TraverseTreeV4_15/sparse_input_values"
  input: "TraverseTreeV4_15/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_15/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_15"
  op: "UpdateModelV4"
  input: "tree-15"
  input: "TraverseTreeV4_15"
  input: "ToFloat_1"
  input: "UpdateModelV4_15/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_15/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_15/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_15/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_15/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_15"
  op: "ProcessInputV4"
  input: "tree-15"
  input: "stats-15"
  input: "concat_1"
  input: "ProcessInputV4_15/sparse_input_indices"
  input: "ProcessInputV4_15/sparse_input_values"
  input: "ProcessInputV4_15/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_15/input_weights"
  input: "TraverseTreeV4_15"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_15"
  op: "GrowTreeV4"
  input: "tree-15"
  input: "stats-15"
  input: "ProcessInputV4_15"
  input: "^UpdateModelV4_15"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_16/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_16/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_16/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_16/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_16"
  op: "TraverseTreeV4"
  input: "tree-16"
  input: "concat_1"
  input: "TraverseTreeV4_16/sparse_input_indices"
  input: "TraverseTreeV4_16/sparse_input_values"
  input: "TraverseTreeV4_16/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_16/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_16"
  op: "UpdateModelV4"
  input: "tree-16"
  input: "TraverseTreeV4_16"
  input: "ToFloat_1"
  input: "UpdateModelV4_16/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_16/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_16/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_16/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_16/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_16"
  op: "ProcessInputV4"
  input: "tree-16"
  input: "stats-16"
  input: "concat_1"
  input: "ProcessInputV4_16/sparse_input_indices"
  input: "ProcessInputV4_16/sparse_input_values"
  input: "ProcessInputV4_16/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_16/input_weights"
  input: "TraverseTreeV4_16"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_16"
  op: "GrowTreeV4"
  input: "tree-16"
  input: "stats-16"
  input: "ProcessInputV4_16"
  input: "^UpdateModelV4_16"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_17/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_17/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_17/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_17/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_17"
  op: "TraverseTreeV4"
  input: "tree-17"
  input: "concat_1"
  input: "TraverseTreeV4_17/sparse_input_indices"
  input: "TraverseTreeV4_17/sparse_input_values"
  input: "TraverseTreeV4_17/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_17/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_17"
  op: "UpdateModelV4"
  input: "tree-17"
  input: "TraverseTreeV4_17"
  input: "ToFloat_1"
  input: "UpdateModelV4_17/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_17/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_17/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_17/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_17/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_17"
  op: "ProcessInputV4"
  input: "tree-17"
  input: "stats-17"
  input: "concat_1"
  input: "ProcessInputV4_17/sparse_input_indices"
  input: "ProcessInputV4_17/sparse_input_values"
  input: "ProcessInputV4_17/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_17/input_weights"
  input: "TraverseTreeV4_17"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_17"
  op: "GrowTreeV4"
  input: "tree-17"
  input: "stats-17"
  input: "ProcessInputV4_17"
  input: "^UpdateModelV4_17"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_18/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_18/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_18/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_18/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_18"
  op: "TraverseTreeV4"
  input: "tree-18"
  input: "concat_1"
  input: "TraverseTreeV4_18/sparse_input_indices"
  input: "TraverseTreeV4_18/sparse_input_values"
  input: "TraverseTreeV4_18/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_18/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_18"
  op: "UpdateModelV4"
  input: "tree-18"
  input: "TraverseTreeV4_18"
  input: "ToFloat_1"
  input: "UpdateModelV4_18/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_18/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_18/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_18/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_18/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_18"
  op: "ProcessInputV4"
  input: "tree-18"
  input: "stats-18"
  input: "concat_1"
  input: "ProcessInputV4_18/sparse_input_indices"
  input: "ProcessInputV4_18/sparse_input_values"
  input: "ProcessInputV4_18/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_18/input_weights"
  input: "TraverseTreeV4_18"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_18"
  op: "GrowTreeV4"
  input: "tree-18"
  input: "stats-18"
  input: "ProcessInputV4_18"
  input: "^UpdateModelV4_18"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_19/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_19/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_19/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_19/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_19"
  op: "TraverseTreeV4"
  input: "tree-19"
  input: "concat_1"
  input: "TraverseTreeV4_19/sparse_input_indices"
  input: "TraverseTreeV4_19/sparse_input_values"
  input: "TraverseTreeV4_19/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_19/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_19"
  op: "UpdateModelV4"
  input: "tree-19"
  input: "TraverseTreeV4_19"
  input: "ToFloat_1"
  input: "UpdateModelV4_19/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_19/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_19/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_19/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_19/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_19"
  op: "ProcessInputV4"
  input: "tree-19"
  input: "stats-19"
  input: "concat_1"
  input: "ProcessInputV4_19/sparse_input_indices"
  input: "ProcessInputV4_19/sparse_input_values"
  input: "ProcessInputV4_19/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_19/input_weights"
  input: "TraverseTreeV4_19"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_19"
  op: "GrowTreeV4"
  input: "tree-19"
  input: "stats-19"
  input: "ProcessInputV4_19"
  input: "^UpdateModelV4_19"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_20/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_20/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_20/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_20/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_20"
  op: "TraverseTreeV4"
  input: "tree-20"
  input: "concat_1"
  input: "TraverseTreeV4_20/sparse_input_indices"
  input: "TraverseTreeV4_20/sparse_input_values"
  input: "TraverseTreeV4_20/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_20/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_20"
  op: "UpdateModelV4"
  input: "tree-20"
  input: "TraverseTreeV4_20"
  input: "ToFloat_1"
  input: "UpdateModelV4_20/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_20/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_20/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_20/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_20/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_20"
  op: "ProcessInputV4"
  input: "tree-20"
  input: "stats-20"
  input: "concat_1"
  input: "ProcessInputV4_20/sparse_input_indices"
  input: "ProcessInputV4_20/sparse_input_values"
  input: "ProcessInputV4_20/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_20/input_weights"
  input: "TraverseTreeV4_20"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_20"
  op: "GrowTreeV4"
  input: "tree-20"
  input: "stats-20"
  input: "ProcessInputV4_20"
  input: "^UpdateModelV4_20"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_21/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_21/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_21/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_21/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_21"
  op: "TraverseTreeV4"
  input: "tree-21"
  input: "concat_1"
  input: "TraverseTreeV4_21/sparse_input_indices"
  input: "TraverseTreeV4_21/sparse_input_values"
  input: "TraverseTreeV4_21/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_21/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_21"
  op: "UpdateModelV4"
  input: "tree-21"
  input: "TraverseTreeV4_21"
  input: "ToFloat_1"
  input: "UpdateModelV4_21/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_21/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_21/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_21/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_21/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_21"
  op: "ProcessInputV4"
  input: "tree-21"
  input: "stats-21"
  input: "concat_1"
  input: "ProcessInputV4_21/sparse_input_indices"
  input: "ProcessInputV4_21/sparse_input_values"
  input: "ProcessInputV4_21/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_21/input_weights"
  input: "TraverseTreeV4_21"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_21"
  op: "GrowTreeV4"
  input: "tree-21"
  input: "stats-21"
  input: "ProcessInputV4_21"
  input: "^UpdateModelV4_21"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_22/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_22/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_22/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_22/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_22"
  op: "TraverseTreeV4"
  input: "tree-22"
  input: "concat_1"
  input: "TraverseTreeV4_22/sparse_input_indices"
  input: "TraverseTreeV4_22/sparse_input_values"
  input: "TraverseTreeV4_22/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_22/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_22"
  op: "UpdateModelV4"
  input: "tree-22"
  input: "TraverseTreeV4_22"
  input: "ToFloat_1"
  input: "UpdateModelV4_22/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_22/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_22/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_22/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_22/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_22"
  op: "ProcessInputV4"
  input: "tree-22"
  input: "stats-22"
  input: "concat_1"
  input: "ProcessInputV4_22/sparse_input_indices"
  input: "ProcessInputV4_22/sparse_input_values"
  input: "ProcessInputV4_22/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_22/input_weights"
  input: "TraverseTreeV4_22"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_22"
  op: "GrowTreeV4"
  input: "tree-22"
  input: "stats-22"
  input: "ProcessInputV4_22"
  input: "^UpdateModelV4_22"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_23/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_23/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_23/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_23/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_23"
  op: "TraverseTreeV4"
  input: "tree-23"
  input: "concat_1"
  input: "TraverseTreeV4_23/sparse_input_indices"
  input: "TraverseTreeV4_23/sparse_input_values"
  input: "TraverseTreeV4_23/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_23/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_23"
  op: "UpdateModelV4"
  input: "tree-23"
  input: "TraverseTreeV4_23"
  input: "ToFloat_1"
  input: "UpdateModelV4_23/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_23/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_23/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_23/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_23/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_23"
  op: "ProcessInputV4"
  input: "tree-23"
  input: "stats-23"
  input: "concat_1"
  input: "ProcessInputV4_23/sparse_input_indices"
  input: "ProcessInputV4_23/sparse_input_values"
  input: "ProcessInputV4_23/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_23/input_weights"
  input: "TraverseTreeV4_23"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_23"
  op: "GrowTreeV4"
  input: "tree-23"
  input: "stats-23"
  input: "ProcessInputV4_23"
  input: "^UpdateModelV4_23"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_24/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_24/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_24/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_24/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_24"
  op: "TraverseTreeV4"
  input: "tree-24"
  input: "concat_1"
  input: "TraverseTreeV4_24/sparse_input_indices"
  input: "TraverseTreeV4_24/sparse_input_values"
  input: "TraverseTreeV4_24/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_24/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_24"
  op: "UpdateModelV4"
  input: "tree-24"
  input: "TraverseTreeV4_24"
  input: "ToFloat_1"
  input: "UpdateModelV4_24/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_24/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_24/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_24/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_24/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_24"
  op: "ProcessInputV4"
  input: "tree-24"
  input: "stats-24"
  input: "concat_1"
  input: "ProcessInputV4_24/sparse_input_indices"
  input: "ProcessInputV4_24/sparse_input_values"
  input: "ProcessInputV4_24/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_24/input_weights"
  input: "TraverseTreeV4_24"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_24"
  op: "GrowTreeV4"
  input: "tree-24"
  input: "stats-24"
  input: "ProcessInputV4_24"
  input: "^UpdateModelV4_24"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_25/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_25/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_25/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_25/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_25"
  op: "TraverseTreeV4"
  input: "tree-25"
  input: "concat_1"
  input: "TraverseTreeV4_25/sparse_input_indices"
  input: "TraverseTreeV4_25/sparse_input_values"
  input: "TraverseTreeV4_25/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_25/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_25"
  op: "UpdateModelV4"
  input: "tree-25"
  input: "TraverseTreeV4_25"
  input: "ToFloat_1"
  input: "UpdateModelV4_25/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_25/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_25/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_25/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_25/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_25"
  op: "ProcessInputV4"
  input: "tree-25"
  input: "stats-25"
  input: "concat_1"
  input: "ProcessInputV4_25/sparse_input_indices"
  input: "ProcessInputV4_25/sparse_input_values"
  input: "ProcessInputV4_25/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_25/input_weights"
  input: "TraverseTreeV4_25"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_25"
  op: "GrowTreeV4"
  input: "tree-25"
  input: "stats-25"
  input: "ProcessInputV4_25"
  input: "^UpdateModelV4_25"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_26/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_26/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_26/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_26/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_26"
  op: "TraverseTreeV4"
  input: "tree-26"
  input: "concat_1"
  input: "TraverseTreeV4_26/sparse_input_indices"
  input: "TraverseTreeV4_26/sparse_input_values"
  input: "TraverseTreeV4_26/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_26/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_26"
  op: "UpdateModelV4"
  input: "tree-26"
  input: "TraverseTreeV4_26"
  input: "ToFloat_1"
  input: "UpdateModelV4_26/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_26/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_26/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_26/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_26/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_26"
  op: "ProcessInputV4"
  input: "tree-26"
  input: "stats-26"
  input: "concat_1"
  input: "ProcessInputV4_26/sparse_input_indices"
  input: "ProcessInputV4_26/sparse_input_values"
  input: "ProcessInputV4_26/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_26/input_weights"
  input: "TraverseTreeV4_26"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_26"
  op: "GrowTreeV4"
  input: "tree-26"
  input: "stats-26"
  input: "ProcessInputV4_26"
  input: "^UpdateModelV4_26"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_27/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_27/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_27/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_27/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_27"
  op: "TraverseTreeV4"
  input: "tree-27"
  input: "concat_1"
  input: "TraverseTreeV4_27/sparse_input_indices"
  input: "TraverseTreeV4_27/sparse_input_values"
  input: "TraverseTreeV4_27/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_27/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_27"
  op: "UpdateModelV4"
  input: "tree-27"
  input: "TraverseTreeV4_27"
  input: "ToFloat_1"
  input: "UpdateModelV4_27/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_27/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_27/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_27/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_27/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_27"
  op: "ProcessInputV4"
  input: "tree-27"
  input: "stats-27"
  input: "concat_1"
  input: "ProcessInputV4_27/sparse_input_indices"
  input: "ProcessInputV4_27/sparse_input_values"
  input: "ProcessInputV4_27/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_27/input_weights"
  input: "TraverseTreeV4_27"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_27"
  op: "GrowTreeV4"
  input: "tree-27"
  input: "stats-27"
  input: "ProcessInputV4_27"
  input: "^UpdateModelV4_27"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_28/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_28/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_28/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_28/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_28"
  op: "TraverseTreeV4"
  input: "tree-28"
  input: "concat_1"
  input: "TraverseTreeV4_28/sparse_input_indices"
  input: "TraverseTreeV4_28/sparse_input_values"
  input: "TraverseTreeV4_28/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_28/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_28"
  op: "UpdateModelV4"
  input: "tree-28"
  input: "TraverseTreeV4_28"
  input: "ToFloat_1"
  input: "UpdateModelV4_28/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_28/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_28/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_28/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_28/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_28"
  op: "ProcessInputV4"
  input: "tree-28"
  input: "stats-28"
  input: "concat_1"
  input: "ProcessInputV4_28/sparse_input_indices"
  input: "ProcessInputV4_28/sparse_input_values"
  input: "ProcessInputV4_28/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_28/input_weights"
  input: "TraverseTreeV4_28"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_28"
  op: "GrowTreeV4"
  input: "tree-28"
  input: "stats-28"
  input: "ProcessInputV4_28"
  input: "^UpdateModelV4_28"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_29/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_29/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_29/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_29/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_29"
  op: "TraverseTreeV4"
  input: "tree-29"
  input: "concat_1"
  input: "TraverseTreeV4_29/sparse_input_indices"
  input: "TraverseTreeV4_29/sparse_input_values"
  input: "TraverseTreeV4_29/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_29/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_29"
  op: "UpdateModelV4"
  input: "tree-29"
  input: "TraverseTreeV4_29"
  input: "ToFloat_1"
  input: "UpdateModelV4_29/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_29/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_29/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_29/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_29/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_29"
  op: "ProcessInputV4"
  input: "tree-29"
  input: "stats-29"
  input: "concat_1"
  input: "ProcessInputV4_29/sparse_input_indices"
  input: "ProcessInputV4_29/sparse_input_values"
  input: "ProcessInputV4_29/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_29/input_weights"
  input: "TraverseTreeV4_29"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_29"
  op: "GrowTreeV4"
  input: "tree-29"
  input: "stats-29"
  input: "ProcessInputV4_29"
  input: "^UpdateModelV4_29"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_30/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_30/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_30/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_30/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_30"
  op: "TraverseTreeV4"
  input: "tree-30"
  input: "concat_1"
  input: "TraverseTreeV4_30/sparse_input_indices"
  input: "TraverseTreeV4_30/sparse_input_values"
  input: "TraverseTreeV4_30/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_30/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_30"
  op: "UpdateModelV4"
  input: "tree-30"
  input: "TraverseTreeV4_30"
  input: "ToFloat_1"
  input: "UpdateModelV4_30/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_30/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_30/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_30/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_30/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_30"
  op: "ProcessInputV4"
  input: "tree-30"
  input: "stats-30"
  input: "concat_1"
  input: "ProcessInputV4_30/sparse_input_indices"
  input: "ProcessInputV4_30/sparse_input_values"
  input: "ProcessInputV4_30/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_30/input_weights"
  input: "TraverseTreeV4_30"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_30"
  op: "GrowTreeV4"
  input: "tree-30"
  input: "stats-30"
  input: "ProcessInputV4_30"
  input: "^UpdateModelV4_30"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_31/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_31/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_31/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_31/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_31"
  op: "TraverseTreeV4"
  input: "tree-31"
  input: "concat_1"
  input: "TraverseTreeV4_31/sparse_input_indices"
  input: "TraverseTreeV4_31/sparse_input_values"
  input: "TraverseTreeV4_31/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_31/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_31"
  op: "UpdateModelV4"
  input: "tree-31"
  input: "TraverseTreeV4_31"
  input: "ToFloat_1"
  input: "UpdateModelV4_31/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_31/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_31/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_31/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_31/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_31"
  op: "ProcessInputV4"
  input: "tree-31"
  input: "stats-31"
  input: "concat_1"
  input: "ProcessInputV4_31/sparse_input_indices"
  input: "ProcessInputV4_31/sparse_input_values"
  input: "ProcessInputV4_31/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_31/input_weights"
  input: "TraverseTreeV4_31"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_31"
  op: "GrowTreeV4"
  input: "tree-31"
  input: "stats-31"
  input: "ProcessInputV4_31"
  input: "^UpdateModelV4_31"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_32/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_32/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_32/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_32/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_32"
  op: "TraverseTreeV4"
  input: "tree-32"
  input: "concat_1"
  input: "TraverseTreeV4_32/sparse_input_indices"
  input: "TraverseTreeV4_32/sparse_input_values"
  input: "TraverseTreeV4_32/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_32/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_32"
  op: "UpdateModelV4"
  input: "tree-32"
  input: "TraverseTreeV4_32"
  input: "ToFloat_1"
  input: "UpdateModelV4_32/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_32/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_32/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_32/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_32/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_32"
  op: "ProcessInputV4"
  input: "tree-32"
  input: "stats-32"
  input: "concat_1"
  input: "ProcessInputV4_32/sparse_input_indices"
  input: "ProcessInputV4_32/sparse_input_values"
  input: "ProcessInputV4_32/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_32/input_weights"
  input: "TraverseTreeV4_32"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_32"
  op: "GrowTreeV4"
  input: "tree-32"
  input: "stats-32"
  input: "ProcessInputV4_32"
  input: "^UpdateModelV4_32"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_33/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_33/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_33/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_33/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_33"
  op: "TraverseTreeV4"
  input: "tree-33"
  input: "concat_1"
  input: "TraverseTreeV4_33/sparse_input_indices"
  input: "TraverseTreeV4_33/sparse_input_values"
  input: "TraverseTreeV4_33/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_33/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_33"
  op: "UpdateModelV4"
  input: "tree-33"
  input: "TraverseTreeV4_33"
  input: "ToFloat_1"
  input: "UpdateModelV4_33/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_33/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_33/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_33/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_33/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_33"
  op: "ProcessInputV4"
  input: "tree-33"
  input: "stats-33"
  input: "concat_1"
  input: "ProcessInputV4_33/sparse_input_indices"
  input: "ProcessInputV4_33/sparse_input_values"
  input: "ProcessInputV4_33/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_33/input_weights"
  input: "TraverseTreeV4_33"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_33"
  op: "GrowTreeV4"
  input: "tree-33"
  input: "stats-33"
  input: "ProcessInputV4_33"
  input: "^UpdateModelV4_33"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_34/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_34/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_34/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_34/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_34"
  op: "TraverseTreeV4"
  input: "tree-34"
  input: "concat_1"
  input: "TraverseTreeV4_34/sparse_input_indices"
  input: "TraverseTreeV4_34/sparse_input_values"
  input: "TraverseTreeV4_34/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_34/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_34"
  op: "UpdateModelV4"
  input: "tree-34"
  input: "TraverseTreeV4_34"
  input: "ToFloat_1"
  input: "UpdateModelV4_34/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_34/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_34/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_34/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_34/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_34"
  op: "ProcessInputV4"
  input: "tree-34"
  input: "stats-34"
  input: "concat_1"
  input: "ProcessInputV4_34/sparse_input_indices"
  input: "ProcessInputV4_34/sparse_input_values"
  input: "ProcessInputV4_34/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_34/input_weights"
  input: "TraverseTreeV4_34"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_34"
  op: "GrowTreeV4"
  input: "tree-34"
  input: "stats-34"
  input: "ProcessInputV4_34"
  input: "^UpdateModelV4_34"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_35/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_35/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_35/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_35/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_35"
  op: "TraverseTreeV4"
  input: "tree-35"
  input: "concat_1"
  input: "TraverseTreeV4_35/sparse_input_indices"
  input: "TraverseTreeV4_35/sparse_input_values"
  input: "TraverseTreeV4_35/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_35/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_35"
  op: "UpdateModelV4"
  input: "tree-35"
  input: "TraverseTreeV4_35"
  input: "ToFloat_1"
  input: "UpdateModelV4_35/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_35/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_35/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_35/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_35/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_35"
  op: "ProcessInputV4"
  input: "tree-35"
  input: "stats-35"
  input: "concat_1"
  input: "ProcessInputV4_35/sparse_input_indices"
  input: "ProcessInputV4_35/sparse_input_values"
  input: "ProcessInputV4_35/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_35/input_weights"
  input: "TraverseTreeV4_35"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_35"
  op: "GrowTreeV4"
  input: "tree-35"
  input: "stats-35"
  input: "ProcessInputV4_35"
  input: "^UpdateModelV4_35"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_36/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_36/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_36/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_36/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_36"
  op: "TraverseTreeV4"
  input: "tree-36"
  input: "concat_1"
  input: "TraverseTreeV4_36/sparse_input_indices"
  input: "TraverseTreeV4_36/sparse_input_values"
  input: "TraverseTreeV4_36/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_36/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_36"
  op: "UpdateModelV4"
  input: "tree-36"
  input: "TraverseTreeV4_36"
  input: "ToFloat_1"
  input: "UpdateModelV4_36/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_36/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_36/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_36/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_36/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_36"
  op: "ProcessInputV4"
  input: "tree-36"
  input: "stats-36"
  input: "concat_1"
  input: "ProcessInputV4_36/sparse_input_indices"
  input: "ProcessInputV4_36/sparse_input_values"
  input: "ProcessInputV4_36/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_36/input_weights"
  input: "TraverseTreeV4_36"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_36"
  op: "GrowTreeV4"
  input: "tree-36"
  input: "stats-36"
  input: "ProcessInputV4_36"
  input: "^UpdateModelV4_36"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_37/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_37/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_37/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_37/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_37"
  op: "TraverseTreeV4"
  input: "tree-37"
  input: "concat_1"
  input: "TraverseTreeV4_37/sparse_input_indices"
  input: "TraverseTreeV4_37/sparse_input_values"
  input: "TraverseTreeV4_37/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_37/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_37"
  op: "UpdateModelV4"
  input: "tree-37"
  input: "TraverseTreeV4_37"
  input: "ToFloat_1"
  input: "UpdateModelV4_37/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_37/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_37/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_37/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_37/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_37"
  op: "ProcessInputV4"
  input: "tree-37"
  input: "stats-37"
  input: "concat_1"
  input: "ProcessInputV4_37/sparse_input_indices"
  input: "ProcessInputV4_37/sparse_input_values"
  input: "ProcessInputV4_37/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_37/input_weights"
  input: "TraverseTreeV4_37"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_37"
  op: "GrowTreeV4"
  input: "tree-37"
  input: "stats-37"
  input: "ProcessInputV4_37"
  input: "^UpdateModelV4_37"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_38/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_38/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_38/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_38/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_38"
  op: "TraverseTreeV4"
  input: "tree-38"
  input: "concat_1"
  input: "TraverseTreeV4_38/sparse_input_indices"
  input: "TraverseTreeV4_38/sparse_input_values"
  input: "TraverseTreeV4_38/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_38/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_38"
  op: "UpdateModelV4"
  input: "tree-38"
  input: "TraverseTreeV4_38"
  input: "ToFloat_1"
  input: "UpdateModelV4_38/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_38/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_38/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_38/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_38/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_38"
  op: "ProcessInputV4"
  input: "tree-38"
  input: "stats-38"
  input: "concat_1"
  input: "ProcessInputV4_38/sparse_input_indices"
  input: "ProcessInputV4_38/sparse_input_values"
  input: "ProcessInputV4_38/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_38/input_weights"
  input: "TraverseTreeV4_38"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_38"
  op: "GrowTreeV4"
  input: "tree-38"
  input: "stats-38"
  input: "ProcessInputV4_38"
  input: "^UpdateModelV4_38"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_39/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_39/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_39/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_39/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_39"
  op: "TraverseTreeV4"
  input: "tree-39"
  input: "concat_1"
  input: "TraverseTreeV4_39/sparse_input_indices"
  input: "TraverseTreeV4_39/sparse_input_values"
  input: "TraverseTreeV4_39/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_39/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_39"
  op: "UpdateModelV4"
  input: "tree-39"
  input: "TraverseTreeV4_39"
  input: "ToFloat_1"
  input: "UpdateModelV4_39/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_39/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_39/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_39/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_39/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_39"
  op: "ProcessInputV4"
  input: "tree-39"
  input: "stats-39"
  input: "concat_1"
  input: "ProcessInputV4_39/sparse_input_indices"
  input: "ProcessInputV4_39/sparse_input_values"
  input: "ProcessInputV4_39/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_39/input_weights"
  input: "TraverseTreeV4_39"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_39"
  op: "GrowTreeV4"
  input: "tree-39"
  input: "stats-39"
  input: "ProcessInputV4_39"
  input: "^UpdateModelV4_39"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_40/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_40/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_40/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_40/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_40"
  op: "TraverseTreeV4"
  input: "tree-40"
  input: "concat_1"
  input: "TraverseTreeV4_40/sparse_input_indices"
  input: "TraverseTreeV4_40/sparse_input_values"
  input: "TraverseTreeV4_40/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_40/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_40"
  op: "UpdateModelV4"
  input: "tree-40"
  input: "TraverseTreeV4_40"
  input: "ToFloat_1"
  input: "UpdateModelV4_40/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_40/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_40/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_40/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_40/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_40"
  op: "ProcessInputV4"
  input: "tree-40"
  input: "stats-40"
  input: "concat_1"
  input: "ProcessInputV4_40/sparse_input_indices"
  input: "ProcessInputV4_40/sparse_input_values"
  input: "ProcessInputV4_40/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_40/input_weights"
  input: "TraverseTreeV4_40"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_40"
  op: "GrowTreeV4"
  input: "tree-40"
  input: "stats-40"
  input: "ProcessInputV4_40"
  input: "^UpdateModelV4_40"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_41/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_41/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_41/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_41/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_41"
  op: "TraverseTreeV4"
  input: "tree-41"
  input: "concat_1"
  input: "TraverseTreeV4_41/sparse_input_indices"
  input: "TraverseTreeV4_41/sparse_input_values"
  input: "TraverseTreeV4_41/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_41/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_41"
  op: "UpdateModelV4"
  input: "tree-41"
  input: "TraverseTreeV4_41"
  input: "ToFloat_1"
  input: "UpdateModelV4_41/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_41/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_41/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_41/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_41/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_41"
  op: "ProcessInputV4"
  input: "tree-41"
  input: "stats-41"
  input: "concat_1"
  input: "ProcessInputV4_41/sparse_input_indices"
  input: "ProcessInputV4_41/sparse_input_values"
  input: "ProcessInputV4_41/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_41/input_weights"
  input: "TraverseTreeV4_41"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_41"
  op: "GrowTreeV4"
  input: "tree-41"
  input: "stats-41"
  input: "ProcessInputV4_41"
  input: "^UpdateModelV4_41"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_42/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_42/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_42/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_42/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_42"
  op: "TraverseTreeV4"
  input: "tree-42"
  input: "concat_1"
  input: "TraverseTreeV4_42/sparse_input_indices"
  input: "TraverseTreeV4_42/sparse_input_values"
  input: "TraverseTreeV4_42/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_42/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_42"
  op: "UpdateModelV4"
  input: "tree-42"
  input: "TraverseTreeV4_42"
  input: "ToFloat_1"
  input: "UpdateModelV4_42/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_42/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_42/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_42/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_42/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_42"
  op: "ProcessInputV4"
  input: "tree-42"
  input: "stats-42"
  input: "concat_1"
  input: "ProcessInputV4_42/sparse_input_indices"
  input: "ProcessInputV4_42/sparse_input_values"
  input: "ProcessInputV4_42/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_42/input_weights"
  input: "TraverseTreeV4_42"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_42"
  op: "GrowTreeV4"
  input: "tree-42"
  input: "stats-42"
  input: "ProcessInputV4_42"
  input: "^UpdateModelV4_42"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_43/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_43/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_43/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_43/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_43"
  op: "TraverseTreeV4"
  input: "tree-43"
  input: "concat_1"
  input: "TraverseTreeV4_43/sparse_input_indices"
  input: "TraverseTreeV4_43/sparse_input_values"
  input: "TraverseTreeV4_43/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_43/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_43"
  op: "UpdateModelV4"
  input: "tree-43"
  input: "TraverseTreeV4_43"
  input: "ToFloat_1"
  input: "UpdateModelV4_43/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_43/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_43/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_43/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_43/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_43"
  op: "ProcessInputV4"
  input: "tree-43"
  input: "stats-43"
  input: "concat_1"
  input: "ProcessInputV4_43/sparse_input_indices"
  input: "ProcessInputV4_43/sparse_input_values"
  input: "ProcessInputV4_43/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_43/input_weights"
  input: "TraverseTreeV4_43"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_43"
  op: "GrowTreeV4"
  input: "tree-43"
  input: "stats-43"
  input: "ProcessInputV4_43"
  input: "^UpdateModelV4_43"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_44/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_44/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_44/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_44/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_44"
  op: "TraverseTreeV4"
  input: "tree-44"
  input: "concat_1"
  input: "TraverseTreeV4_44/sparse_input_indices"
  input: "TraverseTreeV4_44/sparse_input_values"
  input: "TraverseTreeV4_44/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_44/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_44"
  op: "UpdateModelV4"
  input: "tree-44"
  input: "TraverseTreeV4_44"
  input: "ToFloat_1"
  input: "UpdateModelV4_44/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_44/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_44/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_44/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_44/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_44"
  op: "ProcessInputV4"
  input: "tree-44"
  input: "stats-44"
  input: "concat_1"
  input: "ProcessInputV4_44/sparse_input_indices"
  input: "ProcessInputV4_44/sparse_input_values"
  input: "ProcessInputV4_44/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_44/input_weights"
  input: "TraverseTreeV4_44"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_44"
  op: "GrowTreeV4"
  input: "tree-44"
  input: "stats-44"
  input: "ProcessInputV4_44"
  input: "^UpdateModelV4_44"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_45/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_45/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_45/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_45/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_45"
  op: "TraverseTreeV4"
  input: "tree-45"
  input: "concat_1"
  input: "TraverseTreeV4_45/sparse_input_indices"
  input: "TraverseTreeV4_45/sparse_input_values"
  input: "TraverseTreeV4_45/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_45/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_45"
  op: "UpdateModelV4"
  input: "tree-45"
  input: "TraverseTreeV4_45"
  input: "ToFloat_1"
  input: "UpdateModelV4_45/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_45/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_45/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_45/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_45/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_45"
  op: "ProcessInputV4"
  input: "tree-45"
  input: "stats-45"
  input: "concat_1"
  input: "ProcessInputV4_45/sparse_input_indices"
  input: "ProcessInputV4_45/sparse_input_values"
  input: "ProcessInputV4_45/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_45/input_weights"
  input: "TraverseTreeV4_45"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_45"
  op: "GrowTreeV4"
  input: "tree-45"
  input: "stats-45"
  input: "ProcessInputV4_45"
  input: "^UpdateModelV4_45"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_46/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_46/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_46/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_46/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_46"
  op: "TraverseTreeV4"
  input: "tree-46"
  input: "concat_1"
  input: "TraverseTreeV4_46/sparse_input_indices"
  input: "TraverseTreeV4_46/sparse_input_values"
  input: "TraverseTreeV4_46/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_46/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_46"
  op: "UpdateModelV4"
  input: "tree-46"
  input: "TraverseTreeV4_46"
  input: "ToFloat_1"
  input: "UpdateModelV4_46/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_46/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_46/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_46/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_46/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_46"
  op: "ProcessInputV4"
  input: "tree-46"
  input: "stats-46"
  input: "concat_1"
  input: "ProcessInputV4_46/sparse_input_indices"
  input: "ProcessInputV4_46/sparse_input_values"
  input: "ProcessInputV4_46/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_46/input_weights"
  input: "TraverseTreeV4_46"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_46"
  op: "GrowTreeV4"
  input: "tree-46"
  input: "stats-46"
  input: "ProcessInputV4_46"
  input: "^UpdateModelV4_46"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_47/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_47/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_47/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_47/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_47"
  op: "TraverseTreeV4"
  input: "tree-47"
  input: "concat_1"
  input: "TraverseTreeV4_47/sparse_input_indices"
  input: "TraverseTreeV4_47/sparse_input_values"
  input: "TraverseTreeV4_47/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_47/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_47"
  op: "UpdateModelV4"
  input: "tree-47"
  input: "TraverseTreeV4_47"
  input: "ToFloat_1"
  input: "UpdateModelV4_47/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_47/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_47/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_47/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_47/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_47"
  op: "ProcessInputV4"
  input: "tree-47"
  input: "stats-47"
  input: "concat_1"
  input: "ProcessInputV4_47/sparse_input_indices"
  input: "ProcessInputV4_47/sparse_input_values"
  input: "ProcessInputV4_47/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_47/input_weights"
  input: "TraverseTreeV4_47"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_47"
  op: "GrowTreeV4"
  input: "tree-47"
  input: "stats-47"
  input: "ProcessInputV4_47"
  input: "^UpdateModelV4_47"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_48/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_48/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_48/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_48/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_48"
  op: "TraverseTreeV4"
  input: "tree-48"
  input: "concat_1"
  input: "TraverseTreeV4_48/sparse_input_indices"
  input: "TraverseTreeV4_48/sparse_input_values"
  input: "TraverseTreeV4_48/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_48/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_48"
  op: "UpdateModelV4"
  input: "tree-48"
  input: "TraverseTreeV4_48"
  input: "ToFloat_1"
  input: "UpdateModelV4_48/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_48/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_48/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_48/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_48/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_48"
  op: "ProcessInputV4"
  input: "tree-48"
  input: "stats-48"
  input: "concat_1"
  input: "ProcessInputV4_48/sparse_input_indices"
  input: "ProcessInputV4_48/sparse_input_values"
  input: "ProcessInputV4_48/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_48/input_weights"
  input: "TraverseTreeV4_48"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_48"
  op: "GrowTreeV4"
  input: "tree-48"
  input: "stats-48"
  input: "ProcessInputV4_48"
  input: "^UpdateModelV4_48"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ToInt32_49/x"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TraverseTreeV4_49/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_49/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_49/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "TraverseTreeV4_49"
  op: "TraverseTreeV4"
  input: "tree-49"
  input: "concat_1"
  input: "TraverseTreeV4_49/sparse_input_indices"
  input: "TraverseTreeV4_49/sparse_input_values"
  input: "TraverseTreeV4_49/sparse_input_shape"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "UpdateModelV4_49/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "UpdateModelV4_49"
  op: "UpdateModelV4"
  input: "tree-49"
  input: "TraverseTreeV4_49"
  input: "ToFloat_1"
  input: "UpdateModelV4_49/input_weights"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "ProcessInputV4_49/sparse_input_indices"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_49/sparse_input_values"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_49/sparse_input_shape"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_49/input_weights"
  op: "Const"
  input: "^Log"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ProcessInputV4_49"
  op: "ProcessInputV4"
  input: "tree-49"
  input: "stats-49"
  input: "concat_1"
  input: "ProcessInputV4_49/sparse_input_indices"
  input: "ProcessInputV4_49/sparse_input_values"
  input: "ProcessInputV4_49/sparse_input_shape"
  input: "ToFloat_1"
  input: "ProcessInputV4_49/input_weights"
  input: "TraverseTreeV4_49"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "input_spec"
    value {
      s: "dense_features_size: 4200 dense: [{name: features original_type: 0 size: 4200}] sparse: []"
    }
  }
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
  attr {
    key: "random_seed"
    value {
      i: 0
    }
  }
}
node {
  name: "GrowTreeV4_49"
  op: "GrowTreeV4"
  input: "tree-49"
  input: "stats-49"
  input: "ProcessInputV4_49"
  input: "^UpdateModelV4_49"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "train"
  op: "NoOp"
  input: "^Log"
  input: "^GrowTreeV4"
  input: "^GrowTreeV4_1"
  input: "^GrowTreeV4_2"
  input: "^GrowTreeV4_3"
  input: "^GrowTreeV4_4"
  input: "^GrowTreeV4_5"
  input: "^GrowTreeV4_6"
  input: "^GrowTreeV4_7"
  input: "^GrowTreeV4_8"
  input: "^GrowTreeV4_9"
  input: "^GrowTreeV4_10"
  input: "^GrowTreeV4_11"
  input: "^GrowTreeV4_12"
  input: "^GrowTreeV4_13"
  input: "^GrowTreeV4_14"
  input: "^GrowTreeV4_15"
  input: "^GrowTreeV4_16"
  input: "^GrowTreeV4_17"
  input: "^GrowTreeV4_18"
  input: "^GrowTreeV4_19"
  input: "^GrowTreeV4_20"
  input: "^GrowTreeV4_21"
  input: "^GrowTreeV4_22"
  input: "^GrowTreeV4_23"
  input: "^GrowTreeV4_24"
  input: "^GrowTreeV4_25"
  input: "^GrowTreeV4_26"
  input: "^GrowTreeV4_27"
  input: "^GrowTreeV4_28"
  input: "^GrowTreeV4_29"
  input: "^GrowTreeV4_30"
  input: "^GrowTreeV4_31"
  input: "^GrowTreeV4_32"
  input: "^GrowTreeV4_33"
  input: "^GrowTreeV4_34"
  input: "^GrowTreeV4_35"
  input: "^GrowTreeV4_36"
  input: "^GrowTreeV4_37"
  input: "^GrowTreeV4_38"
  input: "^GrowTreeV4_39"
  input: "^GrowTreeV4_40"
  input: "^GrowTreeV4_41"
  input: "^GrowTreeV4_42"
  input: "^GrowTreeV4_43"
  input: "^GrowTreeV4_44"
  input: "^GrowTreeV4_45"
  input: "^GrowTreeV4_46"
  input: "^GrowTreeV4_47"
  input: "^GrowTreeV4_48"
  input: "^GrowTreeV4_49"
  device: "/device:CPU:0"
}
node {
  name: "AssignAdd/value"
  op: "Const"
  input: "^Log"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "AssignAdd"
  op: "AssignAdd"
  input: "global_step"
  input: "AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "group_deps/NoOp"
  op: "NoOp"
  input: "^Log"
  input: "^AssignAdd"
}
node {
  name: "group_deps/NoOp_1"
  op: "NoOp"
  input: "^Log"
  input: "^train"
  device: "/device:CPU:0"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^Log"
  input: "^group_deps/NoOp"
  input: "^group_deps/NoOp_1"
}
node {
  name: "binary_logistic_head/predictions/zeros_like"
  op: "ZerosLike"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/predictions/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/predictions/concat"
  op: "ConcatV2"
  input: "binary_logistic_head/predictions/zeros_like"
  input: "Log"
  input: "binary_logistic_head/predictions/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/predictions/logistic"
  op: "Sigmoid"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/predictions/probabilities"
  op: "Softmax"
  input: "binary_logistic_head/predictions/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/predictions/classes/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/predictions/classes"
  op: "ArgMax"
  input: "binary_logistic_head/predictions/concat"
  input: "binary_logistic_head/predictions/classes/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/ToFloat"
  op: "Cast"
  input: "output"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/ExpandDims"
  op: "ExpandDims"
  input: "binary_logistic_head/log_loss_with_two_classes/ToFloat"
  input: "binary_logistic_head/log_loss_with_two_classes/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/zeros_like"
  op: "ZerosLike"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  op: "GreaterEqual"
  input: "Log"
  input: "binary_logistic_head/log_loss_with_two_classes/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/Select"
  op: "Select"
  input: "binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  input: "Log"
  input: "binary_logistic_head/log_loss_with_two_classes/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/Neg"
  op: "Neg"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/Select_1"
  op: "Select"
  input: "binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  input: "binary_logistic_head/log_loss_with_two_classes/Neg"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/mul"
  op: "Mul"
  input: "Log"
  input: "binary_logistic_head/log_loss_with_two_classes/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/sub"
  op: "Sub"
  input: "binary_logistic_head/log_loss_with_two_classes/Select"
  input: "binary_logistic_head/log_loss_with_two_classes/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/Exp"
  op: "Exp"
  input: "binary_logistic_head/log_loss_with_two_classes/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/Log1p"
  op: "Log1p"
  input: "binary_logistic_head/log_loss_with_two_classes/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes"
  op: "Add"
  input: "binary_logistic_head/log_loss_with_two_classes/sub"
  input: "binary_logistic_head/log_loss_with_two_classes/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/log_loss_with_two_classes/loss"
  op: "Mean"
  input: "binary_logistic_head/log_loss_with_two_classes"
  input: "binary_logistic_head/log_loss_with_two_classes/loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "binary_logistic_head/log_loss_with_two_classes/loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/Shape"
  op: "Shape"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/strided_slice"
  op: "StridedSlice"
  input: "binary_logistic_head/Shape"
  input: "binary_logistic_head/strided_slice/stack"
  input: "binary_logistic_head/strided_slice/stack_1"
  input: "binary_logistic_head/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/total/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/total/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/total/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean/total/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean/total/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/total/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/mean/total"
  input: "binary_logistic_head/metrics/mean/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/total/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/mean/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/count/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/count/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/count/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean/count/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean/count/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/count/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/mean/count"
  input: "binary_logistic_head/metrics/mean/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/count/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/mean/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/mean/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/Sum"
  op: "Sum"
  input: "binary_logistic_head/log_loss_with_two_classes/loss"
  input: "binary_logistic_head/metrics/mean/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/mean/total"
  input: "binary_logistic_head/metrics/mean/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/mean/count"
  input: "binary_logistic_head/metrics/mean/ToFloat_1"
  input: "^binary_logistic_head/log_loss_with_two_classes/loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/truediv"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/mean/total/read"
  input: "binary_logistic_head/metrics/mean/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/zeros_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/zeros_like"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean/zeros_like/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/mean/count/read"
  input: "binary_logistic_head/metrics/mean/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/value"
  op: "Select"
  input: "binary_logistic_head/metrics/mean/Greater"
  input: "binary_logistic_head/metrics/mean/truediv"
  input: "binary_logistic_head/metrics/mean/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/truediv_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/mean/AssignAdd"
  input: "binary_logistic_head/metrics/mean/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/zeros_like_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/zeros_like_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/zeros_like_1"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean/zeros_like_1/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean/zeros_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/Greater_1"
  op: "Greater"
  input: "binary_logistic_head/metrics/mean/AssignAdd_1"
  input: "binary_logistic_head/metrics/mean/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean/update_op"
  op: "Select"
  input: "binary_logistic_head/metrics/mean/Greater_1"
  input: "binary_logistic_head/metrics/mean/truediv_1"
  input: "binary_logistic_head/metrics/mean/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/Cast"
  op: "Cast"
  input: "binary_logistic_head/predictions/classes"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/Equal"
  op: "Equal"
  input: "binary_logistic_head/metrics/Cast"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/ToFloat"
  op: "Cast"
  input: "binary_logistic_head/metrics/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/total/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/total/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/total/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/accuracy/total/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/accuracy/total/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/total/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/accuracy/total"
  input: "binary_logistic_head/metrics/accuracy/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/total/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/accuracy/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/count/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/count/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/count/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/accuracy/count/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/accuracy/count/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/count/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/accuracy/count"
  input: "binary_logistic_head/metrics/accuracy/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/count/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/accuracy/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/Size"
  op: "Size"
  input: "binary_logistic_head/metrics/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/Sum"
  op: "Sum"
  input: "binary_logistic_head/metrics/ToFloat"
  input: "binary_logistic_head/metrics/accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/accuracy/total"
  input: "binary_logistic_head/metrics/accuracy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/accuracy/count"
  input: "binary_logistic_head/metrics/accuracy/ToFloat_1"
  input: "^binary_logistic_head/metrics/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/truediv"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/accuracy/total/read"
  input: "binary_logistic_head/metrics/accuracy/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/zeros_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/zeros_like"
  op: "Fill"
  input: "binary_logistic_head/metrics/accuracy/zeros_like/shape_as_tensor"
  input: "binary_logistic_head/metrics/accuracy/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/accuracy/count/read"
  input: "binary_logistic_head/metrics/accuracy/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/value"
  op: "Select"
  input: "binary_logistic_head/metrics/accuracy/Greater"
  input: "binary_logistic_head/metrics/accuracy/truediv"
  input: "binary_logistic_head/metrics/accuracy/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/truediv_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/accuracy/AssignAdd"
  input: "binary_logistic_head/metrics/accuracy/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/zeros_like_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/zeros_like_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/zeros_like_1"
  op: "Fill"
  input: "binary_logistic_head/metrics/accuracy/zeros_like_1/shape_as_tensor"
  input: "binary_logistic_head/metrics/accuracy/zeros_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/Greater_1"
  op: "Greater"
  input: "binary_logistic_head/metrics/accuracy/AssignAdd_1"
  input: "binary_logistic_head/metrics/accuracy/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy/update_op"
  op: "Select"
  input: "binary_logistic_head/metrics/accuracy/Greater_1"
  input: "binary_logistic_head/metrics/accuracy/truediv_1"
  input: "binary_logistic_head/metrics/accuracy/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/total/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/total/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/total/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_1/total/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_1/total/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/total/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/mean_1/total"
  input: "binary_logistic_head/metrics/mean_1/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/total/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/mean_1/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/count/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/count/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/count/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_1/count/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_1/count/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/count/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/mean_1/count"
  input: "binary_logistic_head/metrics/mean_1/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/count/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/mean_1/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/Size"
  op: "Size"
  input: "binary_logistic_head/predictions/logistic"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/mean_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/Sum"
  op: "Sum"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/mean_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/mean_1/total"
  input: "binary_logistic_head/metrics/mean_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/mean_1/count"
  input: "binary_logistic_head/metrics/mean_1/ToFloat_1"
  input: "^binary_logistic_head/predictions/logistic"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/truediv"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/mean_1/total/read"
  input: "binary_logistic_head/metrics/mean_1/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/zeros_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/zeros_like"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_1/zeros_like/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_1/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/mean_1/count/read"
  input: "binary_logistic_head/metrics/mean_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/value"
  op: "Select"
  input: "binary_logistic_head/metrics/mean_1/Greater"
  input: "binary_logistic_head/metrics/mean_1/truediv"
  input: "binary_logistic_head/metrics/mean_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/truediv_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/mean_1/AssignAdd"
  input: "binary_logistic_head/metrics/mean_1/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/zeros_like_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/zeros_like_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/zeros_like_1"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_1/zeros_like_1/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_1/zeros_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/Greater_1"
  op: "Greater"
  input: "binary_logistic_head/metrics/mean_1/AssignAdd_1"
  input: "binary_logistic_head/metrics/mean_1/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_1/update_op"
  op: "Select"
  input: "binary_logistic_head/metrics/mean_1/Greater_1"
  input: "binary_logistic_head/metrics/mean_1/truediv_1"
  input: "binary_logistic_head/metrics/mean_1/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/ToFloat_2"
  op: "Cast"
  input: "output"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/total/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/total/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/total/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_2/total/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_2/total/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/total/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/mean_2/total"
  input: "binary_logistic_head/metrics/mean_2/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/total/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/mean_2/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/count/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/count/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/count/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_2/count/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_2/count/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/count/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/mean_2/count"
  input: "binary_logistic_head/metrics/mean_2/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/count/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/mean_2/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/Size"
  op: "Size"
  input: "binary_logistic_head/metrics/ToFloat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/mean_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/Sum"
  op: "Sum"
  input: "binary_logistic_head/metrics/ToFloat_2"
  input: "binary_logistic_head/metrics/mean_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/mean_2/total"
  input: "binary_logistic_head/metrics/mean_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/mean_2/count"
  input: "binary_logistic_head/metrics/mean_2/ToFloat_1"
  input: "^binary_logistic_head/metrics/ToFloat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/truediv"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/mean_2/total/read"
  input: "binary_logistic_head/metrics/mean_2/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/zeros_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/zeros_like"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_2/zeros_like/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_2/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/mean_2/count/read"
  input: "binary_logistic_head/metrics/mean_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/value"
  op: "Select"
  input: "binary_logistic_head/metrics/mean_2/Greater"
  input: "binary_logistic_head/metrics/mean_2/truediv"
  input: "binary_logistic_head/metrics/mean_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/truediv_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/mean_2/AssignAdd"
  input: "binary_logistic_head/metrics/mean_2/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/zeros_like_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/zeros_like_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/zeros_like_1"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_2/zeros_like_1/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_2/zeros_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/Greater_1"
  op: "Greater"
  input: "binary_logistic_head/metrics/mean_2/AssignAdd_1"
  input: "binary_logistic_head/metrics/mean_2/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_2/update_op"
  op: "Select"
  input: "binary_logistic_head/metrics/mean_2/Greater_1"
  input: "binary_logistic_head/metrics/mean_2/truediv_1"
  input: "binary_logistic_head/metrics/mean_2/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/ToFloat_3"
  op: "Cast"
  input: "output"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/total/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/total/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/total/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_3/total/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_3/total/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/total/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/mean_3/total"
  input: "binary_logistic_head/metrics/mean_3/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/total/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/mean_3/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/count/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/count/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/count/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_3/count/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_3/count/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/count/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/mean_3/count"
  input: "binary_logistic_head/metrics/mean_3/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/count/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/mean_3/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/Size"
  op: "Size"
  input: "binary_logistic_head/metrics/ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/mean_3/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/Sum"
  op: "Sum"
  input: "binary_logistic_head/metrics/ToFloat_3"
  input: "binary_logistic_head/metrics/mean_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/mean_3/total"
  input: "binary_logistic_head/metrics/mean_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/mean_3/count"
  input: "binary_logistic_head/metrics/mean_3/ToFloat_1"
  input: "^binary_logistic_head/metrics/ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/truediv"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/mean_3/total/read"
  input: "binary_logistic_head/metrics/mean_3/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/zeros_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/zeros_like"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_3/zeros_like/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_3/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/mean_3/count/read"
  input: "binary_logistic_head/metrics/mean_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/value"
  op: "Select"
  input: "binary_logistic_head/metrics/mean_3/Greater"
  input: "binary_logistic_head/metrics/mean_3/truediv"
  input: "binary_logistic_head/metrics/mean_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/truediv_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/mean_3/AssignAdd"
  input: "binary_logistic_head/metrics/mean_3/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/zeros_like_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/zeros_like_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/zeros_like_1"
  op: "Fill"
  input: "binary_logistic_head/metrics/mean_3/zeros_like_1/shape_as_tensor"
  input: "binary_logistic_head/metrics/mean_3/zeros_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/Greater_1"
  op: "Greater"
  input: "binary_logistic_head/metrics/mean_3/AssignAdd_1"
  input: "binary_logistic_head/metrics/mean_3/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/mean_3/update_op"
  op: "Select"
  input: "binary_logistic_head/metrics/mean_3/Greater_1"
  input: "binary_logistic_head/metrics/mean_3/truediv_1"
  input: "binary_logistic_head/metrics/mean_3/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/auc/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/All"
  op: "All"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/GreaterEqual"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/auc/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/All"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_t"
  input: "^binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/auc/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/All"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/assert_greater_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/predictions/logistic"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc/Cast/x"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/Cast/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  input: "^binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  input: "binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/auc/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/All"
  op: "All"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/LessEqual"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/auc/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/All"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/auc/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/All"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/predictions/logistic"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc/Cast_1/x"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/Cast_1/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "binary_logistic_head/predictions/logistic"
  input: "^binary_logistic_head/metrics/auc/assert_greater_equal/Assert/AssertGuard/Merge"
  input: "^binary_logistic_head/metrics/auc/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Reshape"
  op: "Reshape"
  input: "binary_logistic_head/metrics/auc/remove_squeezable_dimensions/Squeeze"
  input: "binary_logistic_head/metrics/auc/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Reshape_1"
  op: "Reshape"
  input: "output"
  input: "binary_logistic_head/metrics/auc/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Shape"
  op: "Shape"
  input: "binary_logistic_head/metrics/auc/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc/Shape"
  input: "binary_logistic_head/metrics/auc/strided_slice/stack"
  input: "binary_logistic_head/metrics/auc/strided_slice/stack_1"
  input: "binary_logistic_head/metrics/auc/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        tensor_content: "\225\277\326\263\317\251\244;\317\251$<\267\376v<\317\251\244<C\324\315<\267\376\366<\225\024\020=\317\251$=\t?9=C\324M=}ib=\267\376v=\370\311\205=\225\024\220=2_\232=\317\251\244=l\364\256=\t?\271=\246\211\303=C\324\315=\340\036\330=}i\342=\032\264\354=\267\376\366=\252\244\000>\370\311\005>G\357\n>\225\024\020>\3449\025>2_\032>\201\204\037>\317\251$>\036\317)>l\364.>\273\0314>\t?9>Wd>>\246\211C>\364\256H>C\324M>\221\371R>\340\036X>.D]>}ib>\313\216g>\032\264l>h\331q>\267\376v>\005$|>\252\244\200>Q7\203>\370\311\205>\240\\\210>G\357\212>\356\201\215>\225\024\220><\247\222>\3449\225>\213\314\227>2_\232>\331\361\234>\201\204\237>(\027\242>\317\251\244>v<\247>\036\317\251>\305a\254>l\364\256>\023\207\261>\273\031\264>b\254\266>\t?\271>\260\321\273>Wd\276>\377\366\300>\246\211\303>M\034\306>\364\256\310>\234A\313>C\324\315>\352f\320>\221\371\322>9\214\325>\340\036\330>\207\261\332>.D\335>\326\326\337>}i\342>$\374\344>\313\216\347>r!\352>\032\264\354>\301F\357>h\331\361>\017l\364>\267\376\366>^\221\371>\005$\374>\254\266\376>\252\244\000?\375\355\001?Q7\003?\245\200\004?\370\311\005?L\023\007?\240\\\010?\363\245\t?G\357\n?\2328\014?\356\201\r?B\313\016?\225\024\020?\351]\021?<\247\022?\220\360\023?\3449\025?7\203\026?\213\314\027?\337\025\031?2_\032?\206\250\033?\331\361\034?-;\036?\201\204\037?\324\315 ?(\027\"?{`#?\317\251$?#\363%?v<\'?\312\205(?\036\317)?q\030+?\305a,?\030\253-?l\364.?\300=0?\023\2071?g\3202?\273\0314?\016c5?b\2546?\265\3657?\t?9?]\210:?\260\321;?\004\033=?Wd>?\253\255??\377\366@?R@B?\246\211C?\372\322D?M\034F?\241eG?\364\256H?H\370I?\234AK?\357\212L?C\324M?\227\035O?\352fP?>\260Q?\221\371R?\345BT?9\214U?\214\325V?\340\036X?3hY?\207\261Z?\333\372[?.D]?\202\215^?\326\326_?) a?}ib?\320\262c?$\374d?xEf?\313\216g?\037\330h?r!j?\306jk?\032\264l?m\375m?\301Fo?\025\220p?h\331q?\274\"s?\017lt?c\265u?\267\376v?\nHx?^\221y?\262\332z?\005$|?Ym}?\254\266~?\001\000\200?"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/ExpandDims"
  op: "ExpandDims"
  input: "binary_logistic_head/metrics/auc/Const"
  input: "binary_logistic_head/metrics/auc/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/stack"
  op: "Pack"
  input: "binary_logistic_head/metrics/auc/stack/0"
  input: "binary_logistic_head/metrics/auc/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Tile"
  op: "Tile"
  input: "binary_logistic_head/metrics/auc/ExpandDims"
  input: "binary_logistic_head/metrics/auc/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/transpose/Rank"
  op: "Rank"
  input: "binary_logistic_head/metrics/auc/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/transpose/sub"
  op: "Sub"
  input: "binary_logistic_head/metrics/auc/transpose/Rank"
  input: "binary_logistic_head/metrics/auc/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/transpose/Range"
  op: "Range"
  input: "binary_logistic_head/metrics/auc/transpose/Range/start"
  input: "binary_logistic_head/metrics/auc/transpose/Rank"
  input: "binary_logistic_head/metrics/auc/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/transpose/sub_1"
  op: "Sub"
  input: "binary_logistic_head/metrics/auc/transpose/sub"
  input: "binary_logistic_head/metrics/auc/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/transpose"
  op: "Transpose"
  input: "binary_logistic_head/metrics/auc/Reshape"
  input: "binary_logistic_head/metrics/auc/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Tile_1"
  op: "Tile"
  input: "binary_logistic_head/metrics/auc/transpose"
  input: "binary_logistic_head/metrics/auc/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/auc/Tile_1"
  input: "binary_logistic_head/metrics/auc/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/LogicalNot"
  op: "LogicalNot"
  input: "binary_logistic_head/metrics/auc/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Tile_2"
  op: "Tile"
  input: "binary_logistic_head/metrics/auc/Reshape_1"
  input: "binary_logistic_head/metrics/auc/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/LogicalNot_1"
  op: "LogicalNot"
  input: "binary_logistic_head/metrics/auc/Tile_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_positives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_positives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_positives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/auc/true_positives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/auc/true_positives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_positives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_positives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/auc/true_positives"
  input: "binary_logistic_head/metrics/auc/true_positives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_positives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/true_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/LogicalAnd"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/auc/Tile_2"
  input: "binary_logistic_head/metrics/auc/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/auc/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Sum"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc/ToFloat_1"
  input: "binary_logistic_head/metrics/auc/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/auc/true_positives"
  input: "binary_logistic_head/metrics/auc/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_negatives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_negatives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_negatives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/auc/false_negatives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/auc/false_negatives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_negatives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_negatives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/auc/false_negatives"
  input: "binary_logistic_head/metrics/auc/false_negatives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_negatives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/false_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/LogicalAnd_1"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/auc/Tile_2"
  input: "binary_logistic_head/metrics/auc/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/ToFloat_2"
  op: "Cast"
  input: "binary_logistic_head/metrics/auc/LogicalAnd_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Sum_1"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc/ToFloat_2"
  input: "binary_logistic_head/metrics/auc/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/auc/false_negatives"
  input: "binary_logistic_head/metrics/auc/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_negatives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_negatives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_negatives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/auc/true_negatives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/auc/true_negatives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_negatives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_negatives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/auc/true_negatives"
  input: "binary_logistic_head/metrics/auc/true_negatives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/true_negatives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/true_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/LogicalAnd_2"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/auc/LogicalNot_1"
  input: "binary_logistic_head/metrics/auc/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/ToFloat_3"
  op: "Cast"
  input: "binary_logistic_head/metrics/auc/LogicalAnd_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Sum_2/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Sum_2"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc/ToFloat_3"
  input: "binary_logistic_head/metrics/auc/Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/AssignAdd_2"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/auc/true_negatives"
  input: "binary_logistic_head/metrics/auc/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_positives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_positives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_positives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/auc/false_positives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/auc/false_positives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_positives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_positives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/auc/false_positives"
  input: "binary_logistic_head/metrics/auc/false_positives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/false_positives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc/false_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/LogicalAnd_3"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/auc/LogicalNot_1"
  input: "binary_logistic_head/metrics/auc/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/ToFloat_4"
  op: "Cast"
  input: "binary_logistic_head/metrics/auc/LogicalAnd_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Sum_3/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Sum_3"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc/ToFloat_4"
  input: "binary_logistic_head/metrics/auc/Sum_3/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/AssignAdd_3"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/auc/false_positives"
  input: "binary_logistic_head/metrics/auc/Sum_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/true_positives/read"
  input: "binary_logistic_head/metrics/auc/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_1"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/true_positives/read"
  input: "binary_logistic_head/metrics/auc/false_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_2"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/add_1"
  input: "binary_logistic_head/metrics/auc/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/div"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc/add"
  input: "binary_logistic_head/metrics/auc/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_3"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/false_positives/read"
  input: "binary_logistic_head/metrics/auc/true_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_4/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_4"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/add_3"
  input: "binary_logistic_head/metrics/auc/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/div_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc/false_positives/read"
  input: "binary_logistic_head/metrics/auc/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_1"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc/div_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_1/stack"
  input: "binary_logistic_head/metrics/auc/strided_slice_1/stack_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_2"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc/div_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_2/stack"
  input: "binary_logistic_head/metrics/auc/strided_slice_2/stack_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/sub"
  op: "Sub"
  input: "binary_logistic_head/metrics/auc/strided_slice_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_3"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc/div"
  input: "binary_logistic_head/metrics/auc/strided_slice_3/stack"
  input: "binary_logistic_head/metrics/auc/strided_slice_3/stack_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_4"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc/div"
  input: "binary_logistic_head/metrics/auc/strided_slice_4/stack"
  input: "binary_logistic_head/metrics/auc/strided_slice_4/stack_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_5"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/strided_slice_3"
  input: "binary_logistic_head/metrics/auc/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/truediv"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc/add_5"
  input: "binary_logistic_head/metrics/auc/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Mul"
  op: "Mul"
  input: "binary_logistic_head/metrics/auc/sub"
  input: "binary_logistic_head/metrics/auc/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/value"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc/Mul"
  input: "binary_logistic_head/metrics/auc/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_6/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_6"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/AssignAdd"
  input: "binary_logistic_head/metrics/auc/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_7"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/AssignAdd"
  input: "binary_logistic_head/metrics/auc/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_8/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_8"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/add_7"
  input: "binary_logistic_head/metrics/auc/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/div_2"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc/add_6"
  input: "binary_logistic_head/metrics/auc/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_9"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/AssignAdd_3"
  input: "binary_logistic_head/metrics/auc/AssignAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_10/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_10"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/add_9"
  input: "binary_logistic_head/metrics/auc/add_10/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/div_3"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc/AssignAdd_3"
  input: "binary_logistic_head/metrics/auc/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_5"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc/div_3"
  input: "binary_logistic_head/metrics/auc/strided_slice_5/stack"
  input: "binary_logistic_head/metrics/auc/strided_slice_5/stack_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_6"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc/div_3"
  input: "binary_logistic_head/metrics/auc/strided_slice_6/stack"
  input: "binary_logistic_head/metrics/auc/strided_slice_6/stack_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/sub_1"
  op: "Sub"
  input: "binary_logistic_head/metrics/auc/strided_slice_5"
  input: "binary_logistic_head/metrics/auc/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_7"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc/div_2"
  input: "binary_logistic_head/metrics/auc/strided_slice_7/stack"
  input: "binary_logistic_head/metrics/auc/strided_slice_7/stack_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/strided_slice_8"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc/div_2"
  input: "binary_logistic_head/metrics/auc/strided_slice_8/stack"
  input: "binary_logistic_head/metrics/auc/strided_slice_8/stack_1"
  input: "binary_logistic_head/metrics/auc/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/add_11"
  op: "Add"
  input: "binary_logistic_head/metrics/auc/strided_slice_7"
  input: "binary_logistic_head/metrics/auc/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/truediv_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc/add_11"
  input: "binary_logistic_head/metrics/auc/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Mul_1"
  op: "Mul"
  input: "binary_logistic_head/metrics/auc/sub_1"
  input: "binary_logistic_head/metrics/auc/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc/update_op"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc/Mul_1"
  input: "binary_logistic_head/metrics/auc/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/auc_1/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/All"
  op: "All"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/GreaterEqual"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/auc_1/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/All"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_t"
  input: "^binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/auc_1/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/All"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/assert_greater_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/predictions/logistic"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc_1/Cast/x"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/Cast/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_f"
  input: "^binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  input: "binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/auc_1/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/All"
  op: "All"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/LessEqual"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/auc_1/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/All"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/auc_1/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/All"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/predictions/logistic"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "binary_logistic_head/metrics/auc_1/Cast_1/x"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/Cast_1/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "binary_logistic_head/predictions/logistic"
  input: "^binary_logistic_head/metrics/auc_1/assert_greater_equal/Assert/AssertGuard/Merge"
  input: "^binary_logistic_head/metrics/auc_1/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Reshape"
  op: "Reshape"
  input: "binary_logistic_head/metrics/auc_1/remove_squeezable_dimensions/Squeeze"
  input: "binary_logistic_head/metrics/auc_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Reshape_1"
  op: "Reshape"
  input: "output"
  input: "binary_logistic_head/metrics/auc_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Shape"
  op: "Shape"
  input: "binary_logistic_head/metrics/auc_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc_1/Shape"
  input: "binary_logistic_head/metrics/auc_1/strided_slice/stack"
  input: "binary_logistic_head/metrics/auc_1/strided_slice/stack_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        tensor_content: "\225\277\326\263\317\251\244;\317\251$<\267\376v<\317\251\244<C\324\315<\267\376\366<\225\024\020=\317\251$=\t?9=C\324M=}ib=\267\376v=\370\311\205=\225\024\220=2_\232=\317\251\244=l\364\256=\t?\271=\246\211\303=C\324\315=\340\036\330=}i\342=\032\264\354=\267\376\366=\252\244\000>\370\311\005>G\357\n>\225\024\020>\3449\025>2_\032>\201\204\037>\317\251$>\036\317)>l\364.>\273\0314>\t?9>Wd>>\246\211C>\364\256H>C\324M>\221\371R>\340\036X>.D]>}ib>\313\216g>\032\264l>h\331q>\267\376v>\005$|>\252\244\200>Q7\203>\370\311\205>\240\\\210>G\357\212>\356\201\215>\225\024\220><\247\222>\3449\225>\213\314\227>2_\232>\331\361\234>\201\204\237>(\027\242>\317\251\244>v<\247>\036\317\251>\305a\254>l\364\256>\023\207\261>\273\031\264>b\254\266>\t?\271>\260\321\273>Wd\276>\377\366\300>\246\211\303>M\034\306>\364\256\310>\234A\313>C\324\315>\352f\320>\221\371\322>9\214\325>\340\036\330>\207\261\332>.D\335>\326\326\337>}i\342>$\374\344>\313\216\347>r!\352>\032\264\354>\301F\357>h\331\361>\017l\364>\267\376\366>^\221\371>\005$\374>\254\266\376>\252\244\000?\375\355\001?Q7\003?\245\200\004?\370\311\005?L\023\007?\240\\\010?\363\245\t?G\357\n?\2328\014?\356\201\r?B\313\016?\225\024\020?\351]\021?<\247\022?\220\360\023?\3449\025?7\203\026?\213\314\027?\337\025\031?2_\032?\206\250\033?\331\361\034?-;\036?\201\204\037?\324\315 ?(\027\"?{`#?\317\251$?#\363%?v<\'?\312\205(?\036\317)?q\030+?\305a,?\030\253-?l\364.?\300=0?\023\2071?g\3202?\273\0314?\016c5?b\2546?\265\3657?\t?9?]\210:?\260\321;?\004\033=?Wd>?\253\255??\377\366@?R@B?\246\211C?\372\322D?M\034F?\241eG?\364\256H?H\370I?\234AK?\357\212L?C\324M?\227\035O?\352fP?>\260Q?\221\371R?\345BT?9\214U?\214\325V?\340\036X?3hY?\207\261Z?\333\372[?.D]?\202\215^?\326\326_?) a?}ib?\320\262c?$\374d?xEf?\313\216g?\037\330h?r!j?\306jk?\032\264l?m\375m?\301Fo?\025\220p?h\331q?\274\"s?\017lt?c\265u?\267\376v?\nHx?^\221y?\262\332z?\005$|?Ym}?\254\266~?\001\000\200?"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/ExpandDims"
  op: "ExpandDims"
  input: "binary_logistic_head/metrics/auc_1/Const"
  input: "binary_logistic_head/metrics/auc_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/stack"
  op: "Pack"
  input: "binary_logistic_head/metrics/auc_1/stack/0"
  input: "binary_logistic_head/metrics/auc_1/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Tile"
  op: "Tile"
  input: "binary_logistic_head/metrics/auc_1/ExpandDims"
  input: "binary_logistic_head/metrics/auc_1/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/transpose/Rank"
  op: "Rank"
  input: "binary_logistic_head/metrics/auc_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/transpose/sub"
  op: "Sub"
  input: "binary_logistic_head/metrics/auc_1/transpose/Rank"
  input: "binary_logistic_head/metrics/auc_1/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/transpose/Range"
  op: "Range"
  input: "binary_logistic_head/metrics/auc_1/transpose/Range/start"
  input: "binary_logistic_head/metrics/auc_1/transpose/Rank"
  input: "binary_logistic_head/metrics/auc_1/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/transpose/sub_1"
  op: "Sub"
  input: "binary_logistic_head/metrics/auc_1/transpose/sub"
  input: "binary_logistic_head/metrics/auc_1/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/transpose"
  op: "Transpose"
  input: "binary_logistic_head/metrics/auc_1/Reshape"
  input: "binary_logistic_head/metrics/auc_1/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Tile_1"
  op: "Tile"
  input: "binary_logistic_head/metrics/auc_1/transpose"
  input: "binary_logistic_head/metrics/auc_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/auc_1/Tile_1"
  input: "binary_logistic_head/metrics/auc_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/LogicalNot"
  op: "LogicalNot"
  input: "binary_logistic_head/metrics/auc_1/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Tile_2"
  op: "Tile"
  input: "binary_logistic_head/metrics/auc_1/Reshape_1"
  input: "binary_logistic_head/metrics/auc_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/LogicalNot_1"
  op: "LogicalNot"
  input: "binary_logistic_head/metrics/auc_1/Tile_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_positives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_positives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_positives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/auc_1/true_positives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/auc_1/true_positives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_positives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_positives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/auc_1/true_positives"
  input: "binary_logistic_head/metrics/auc_1/true_positives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_positives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/true_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/LogicalAnd"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/auc_1/Tile_2"
  input: "binary_logistic_head/metrics/auc_1/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/auc_1/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Sum"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc_1/ToFloat_1"
  input: "binary_logistic_head/metrics/auc_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/auc_1/true_positives"
  input: "binary_logistic_head/metrics/auc_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_negatives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_negatives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_negatives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/auc_1/false_negatives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/auc_1/false_negatives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_negatives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_negatives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/auc_1/false_negatives"
  input: "binary_logistic_head/metrics/auc_1/false_negatives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_negatives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/false_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/LogicalAnd_1"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/auc_1/Tile_2"
  input: "binary_logistic_head/metrics/auc_1/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/ToFloat_2"
  op: "Cast"
  input: "binary_logistic_head/metrics/auc_1/LogicalAnd_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Sum_1"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc_1/ToFloat_2"
  input: "binary_logistic_head/metrics/auc_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/auc_1/false_negatives"
  input: "binary_logistic_head/metrics/auc_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_negatives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_negatives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_negatives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/auc_1/true_negatives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/auc_1/true_negatives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_negatives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_negatives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/auc_1/true_negatives"
  input: "binary_logistic_head/metrics/auc_1/true_negatives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/true_negatives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/true_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/LogicalAnd_2"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/auc_1/LogicalNot_1"
  input: "binary_logistic_head/metrics/auc_1/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/ToFloat_3"
  op: "Cast"
  input: "binary_logistic_head/metrics/auc_1/LogicalAnd_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Sum_2/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Sum_2"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc_1/ToFloat_3"
  input: "binary_logistic_head/metrics/auc_1/Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/AssignAdd_2"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/auc_1/true_negatives"
  input: "binary_logistic_head/metrics/auc_1/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_positives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_positives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_positives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/auc_1/false_positives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/auc_1/false_positives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_positives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_positives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/auc_1/false_positives"
  input: "binary_logistic_head/metrics/auc_1/false_positives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/false_positives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/auc_1/false_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/LogicalAnd_3"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/auc_1/LogicalNot_1"
  input: "binary_logistic_head/metrics/auc_1/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/ToFloat_4"
  op: "Cast"
  input: "binary_logistic_head/metrics/auc_1/LogicalAnd_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Sum_3/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Sum_3"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc_1/ToFloat_4"
  input: "binary_logistic_head/metrics/auc_1/Sum_3/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/AssignAdd_3"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/auc_1/false_positives"
  input: "binary_logistic_head/metrics/auc_1/Sum_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/true_positives/read"
  input: "binary_logistic_head/metrics/auc_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_1"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/true_positives/read"
  input: "binary_logistic_head/metrics/auc_1/false_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_2"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/add_1"
  input: "binary_logistic_head/metrics/auc_1/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/div"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc_1/add"
  input: "binary_logistic_head/metrics/auc_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_3/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_3"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/true_positives/read"
  input: "binary_logistic_head/metrics/auc_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_4"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/true_positives/read"
  input: "binary_logistic_head/metrics/auc_1/false_positives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_5/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_5"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/add_4"
  input: "binary_logistic_head/metrics/auc_1/add_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/div_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc_1/add_3"
  input: "binary_logistic_head/metrics/auc_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_1"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc_1/div"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_1/stack"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_1/stack_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_2"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc_1/div"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_2/stack"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_2/stack_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/sub"
  op: "Sub"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_3"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc_1/div_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_3/stack"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_3/stack_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_4"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc_1/div_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_4/stack"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_4/stack_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_6"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_3"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/truediv"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc_1/add_6"
  input: "binary_logistic_head/metrics/auc_1/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Mul"
  op: "Mul"
  input: "binary_logistic_head/metrics/auc_1/sub"
  input: "binary_logistic_head/metrics/auc_1/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/value"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc_1/Mul"
  input: "binary_logistic_head/metrics/auc_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_7/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_7"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/AssignAdd"
  input: "binary_logistic_head/metrics/auc_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_8"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/AssignAdd"
  input: "binary_logistic_head/metrics/auc_1/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_9/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_9"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/add_8"
  input: "binary_logistic_head/metrics/auc_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/div_2"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc_1/add_7"
  input: "binary_logistic_head/metrics/auc_1/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_10/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_10"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/AssignAdd"
  input: "binary_logistic_head/metrics/auc_1/add_10/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_11"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/AssignAdd"
  input: "binary_logistic_head/metrics/auc_1/AssignAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_12/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_12"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/add_11"
  input: "binary_logistic_head/metrics/auc_1/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/div_3"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc_1/add_10"
  input: "binary_logistic_head/metrics/auc_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_5"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc_1/div_2"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_5/stack"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_5/stack_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_6"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc_1/div_2"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_6/stack"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_6/stack_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/sub_1"
  op: "Sub"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_5"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_7"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc_1/div_3"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_7/stack"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_7/stack_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/strided_slice_8"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/auc_1/div_3"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_8/stack"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_8/stack_1"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/add_13"
  op: "Add"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_7"
  input: "binary_logistic_head/metrics/auc_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/truediv_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/auc_1/add_13"
  input: "binary_logistic_head/metrics/auc_1/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Mul_1"
  op: "Mul"
  input: "binary_logistic_head/metrics/auc_1/sub_1"
  input: "binary_logistic_head/metrics/auc_1/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/auc_1/update_op"
  op: "Sum"
  input: "binary_logistic_head/metrics/auc_1/Mul_1"
  input: "binary_logistic_head/metrics/auc_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/GreaterEqual"
  op: "GreaterEqual"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/ToFloat_6"
  op: "Cast"
  input: "binary_logistic_head/metrics/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/remove_squeezable_dimensions_1/Squeeze"
  op: "Squeeze"
  input: "binary_logistic_head/metrics/ToFloat_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/Cast_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/remove_squeezable_dimensions_1/Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/Equal_1"
  op: "Equal"
  input: "binary_logistic_head/metrics/Cast_1"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/ToFloat_7"
  op: "Cast"
  input: "binary_logistic_head/metrics/Equal_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/total/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/total/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/total/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/accuracy_1/total/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/accuracy_1/total/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/total/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/accuracy_1/total"
  input: "binary_logistic_head/metrics/accuracy_1/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/total/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/accuracy_1/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/count/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/count/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/count/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/accuracy_1/count/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/accuracy_1/count/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/count/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/accuracy_1/count"
  input: "binary_logistic_head/metrics/accuracy_1/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/count/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/accuracy_1/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/Size"
  op: "Size"
  input: "binary_logistic_head/metrics/ToFloat_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/accuracy_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/Sum"
  op: "Sum"
  input: "binary_logistic_head/metrics/ToFloat_7"
  input: "binary_logistic_head/metrics/accuracy_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/accuracy_1/total"
  input: "binary_logistic_head/metrics/accuracy_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/accuracy_1/count"
  input: "binary_logistic_head/metrics/accuracy_1/ToFloat_1"
  input: "^binary_logistic_head/metrics/ToFloat_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/truediv"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/accuracy_1/total/read"
  input: "binary_logistic_head/metrics/accuracy_1/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/zeros_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/zeros_like"
  op: "Fill"
  input: "binary_logistic_head/metrics/accuracy_1/zeros_like/shape_as_tensor"
  input: "binary_logistic_head/metrics/accuracy_1/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/accuracy_1/count/read"
  input: "binary_logistic_head/metrics/accuracy_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/value"
  op: "Select"
  input: "binary_logistic_head/metrics/accuracy_1/Greater"
  input: "binary_logistic_head/metrics/accuracy_1/truediv"
  input: "binary_logistic_head/metrics/accuracy_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/truediv_1"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/accuracy_1/AssignAdd"
  input: "binary_logistic_head/metrics/accuracy_1/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/zeros_like_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/zeros_like_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/zeros_like_1"
  op: "Fill"
  input: "binary_logistic_head/metrics/accuracy_1/zeros_like_1/shape_as_tensor"
  input: "binary_logistic_head/metrics/accuracy_1/zeros_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/Greater_1"
  op: "Greater"
  input: "binary_logistic_head/metrics/accuracy_1/AssignAdd_1"
  input: "binary_logistic_head/metrics/accuracy_1/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/accuracy_1/update_op"
  op: "Select"
  input: "binary_logistic_head/metrics/accuracy_1/Greater_1"
  input: "binary_logistic_head/metrics/accuracy_1/truediv_1"
  input: "binary_logistic_head/metrics/accuracy_1/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/All"
  op: "All"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/GreaterEqual"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/precision_at_thresholds/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/All"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_t"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/precision_at_thresholds/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/All"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/predictions/logistic"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Cast/x"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/Cast/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/All"
  op: "All"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/LessEqual"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/precision_at_thresholds/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/All"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/precision_at_thresholds/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/All"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/predictions/logistic"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Cast_1/x"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/Cast_1/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "binary_logistic_head/predictions/logistic"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_greater_equal/Assert/AssertGuard/Merge"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Reshape"
  op: "Reshape"
  input: "binary_logistic_head/metrics/precision_at_thresholds/remove_squeezable_dimensions/Squeeze"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Reshape_1"
  op: "Reshape"
  input: "output"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Shape"
  op: "Shape"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/strided_slice"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Shape"
  input: "binary_logistic_head/metrics/precision_at_thresholds/strided_slice/stack"
  input: "binary_logistic_head/metrics/precision_at_thresholds/strided_slice/stack_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/ExpandDims"
  op: "ExpandDims"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Const"
  input: "binary_logistic_head/metrics/precision_at_thresholds/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/stack"
  op: "Pack"
  input: "binary_logistic_head/metrics/precision_at_thresholds/stack/0"
  input: "binary_logistic_head/metrics/precision_at_thresholds/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Tile"
  op: "Tile"
  input: "binary_logistic_head/metrics/precision_at_thresholds/ExpandDims"
  input: "binary_logistic_head/metrics/precision_at_thresholds/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/transpose/Rank"
  op: "Rank"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/transpose/sub"
  op: "Sub"
  input: "binary_logistic_head/metrics/precision_at_thresholds/transpose/Rank"
  input: "binary_logistic_head/metrics/precision_at_thresholds/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/transpose/Range"
  op: "Range"
  input: "binary_logistic_head/metrics/precision_at_thresholds/transpose/Range/start"
  input: "binary_logistic_head/metrics/precision_at_thresholds/transpose/Rank"
  input: "binary_logistic_head/metrics/precision_at_thresholds/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/transpose/sub_1"
  op: "Sub"
  input: "binary_logistic_head/metrics/precision_at_thresholds/transpose/sub"
  input: "binary_logistic_head/metrics/precision_at_thresholds/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/transpose"
  op: "Transpose"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Reshape"
  input: "binary_logistic_head/metrics/precision_at_thresholds/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Tile_1"
  op: "Tile"
  input: "binary_logistic_head/metrics/precision_at_thresholds/transpose"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Tile_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Tile_2"
  op: "Tile"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Reshape_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/LogicalNot"
  op: "LogicalNot"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Tile_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  input: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/LogicalAnd"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Tile_2"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/precision_at_thresholds/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Sum"
  op: "Sum"
  input: "binary_logistic_head/metrics/precision_at_thresholds/ToFloat_1"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/false_positives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/false_positives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/false_positives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/precision_at_thresholds/false_positives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/precision_at_thresholds/false_positives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/false_positives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  input: "binary_logistic_head/metrics/precision_at_thresholds/false_positives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/false_positives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/LogicalAnd_1"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/precision_at_thresholds/LogicalNot"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/ToFloat_2"
  op: "Cast"
  input: "binary_logistic_head/metrics/precision_at_thresholds/LogicalAnd_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/Sum_1"
  op: "Sum"
  input: "binary_logistic_head/metrics/precision_at_thresholds/ToFloat_2"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  input: "binary_logistic_head/metrics/precision_at_thresholds/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/add/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/add"
  op: "Add"
  input: "binary_logistic_head/metrics/precision_at_thresholds/add/x"
  input: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/add_1"
  op: "Add"
  input: "binary_logistic_head/metrics/precision_at_thresholds/add"
  input: "binary_logistic_head/metrics/precision_at_thresholds/false_positives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/precision_value"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/precision_at_thresholds/true_positives/read"
  input: "binary_logistic_head/metrics/precision_at_thresholds/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/add_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/add_2"
  op: "Add"
  input: "binary_logistic_head/metrics/precision_at_thresholds/add_2/x"
  input: "binary_logistic_head/metrics/precision_at_thresholds/AssignAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/add_3"
  op: "Add"
  input: "binary_logistic_head/metrics/precision_at_thresholds/add_2"
  input: "binary_logistic_head/metrics/precision_at_thresholds/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/precision_at_thresholds/precision_update_op"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/precision_at_thresholds/AssignAdd"
  input: "binary_logistic_head/metrics/precision_at_thresholds/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/Squeeze"
  op: "Squeeze"
  input: "binary_logistic_head/metrics/precision_at_thresholds/precision_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/Squeeze_1"
  op: "Squeeze"
  input: "binary_logistic_head/metrics/precision_at_thresholds/precision_update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/All"
  op: "All"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/GreaterEqual"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/recall_at_thresholds/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/All"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_t"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/recall_at_thresholds/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/All"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/predictions/logistic"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Cast/x"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/Cast/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/All"
  op: "All"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/LessEqual"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/recall_at_thresholds/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/All"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (binary_logistic_head/predictions/logistic:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (binary_logistic_head/metrics/recall_at_thresholds/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/All"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "binary_logistic_head/predictions/logistic"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/predictions/logistic"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Cast_1/x"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/Cast_1/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "binary_logistic_head/predictions/logistic"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_greater_equal/Assert/AssertGuard/Merge"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Reshape"
  op: "Reshape"
  input: "binary_logistic_head/metrics/recall_at_thresholds/remove_squeezable_dimensions/Squeeze"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Reshape_1"
  op: "Reshape"
  input: "output"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Shape"
  op: "Shape"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/strided_slice"
  op: "StridedSlice"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Shape"
  input: "binary_logistic_head/metrics/recall_at_thresholds/strided_slice/stack"
  input: "binary_logistic_head/metrics/recall_at_thresholds/strided_slice/stack_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/ExpandDims"
  op: "ExpandDims"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Const"
  input: "binary_logistic_head/metrics/recall_at_thresholds/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/stack"
  op: "Pack"
  input: "binary_logistic_head/metrics/recall_at_thresholds/stack/0"
  input: "binary_logistic_head/metrics/recall_at_thresholds/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Tile"
  op: "Tile"
  input: "binary_logistic_head/metrics/recall_at_thresholds/ExpandDims"
  input: "binary_logistic_head/metrics/recall_at_thresholds/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/transpose/Rank"
  op: "Rank"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/transpose/sub"
  op: "Sub"
  input: "binary_logistic_head/metrics/recall_at_thresholds/transpose/Rank"
  input: "binary_logistic_head/metrics/recall_at_thresholds/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/transpose/Range"
  op: "Range"
  input: "binary_logistic_head/metrics/recall_at_thresholds/transpose/Range/start"
  input: "binary_logistic_head/metrics/recall_at_thresholds/transpose/Rank"
  input: "binary_logistic_head/metrics/recall_at_thresholds/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/transpose/sub_1"
  op: "Sub"
  input: "binary_logistic_head/metrics/recall_at_thresholds/transpose/sub"
  input: "binary_logistic_head/metrics/recall_at_thresholds/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/transpose"
  op: "Transpose"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Reshape"
  input: "binary_logistic_head/metrics/recall_at_thresholds/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Tile_1"
  op: "Tile"
  input: "binary_logistic_head/metrics/recall_at_thresholds/transpose"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Greater"
  op: "Greater"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Tile_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/LogicalNot"
  op: "LogicalNot"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Tile_2"
  op: "Tile"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Reshape_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  input: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/LogicalAnd"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Tile_2"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/ToFloat_1"
  op: "Cast"
  input: "binary_logistic_head/metrics/recall_at_thresholds/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Sum"
  op: "Sum"
  input: "binary_logistic_head/metrics/recall_at_thresholds/ToFloat_1"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/AssignAdd"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Initializer/zeros"
  op: "Fill"
  input: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Initializer/zeros/shape_as_tensor"
  input: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Assign"
  op: "Assign"
  input: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  input: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives/read"
  op: "Identity"
  input: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/LogicalAnd_1"
  op: "LogicalAnd"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Tile_2"
  input: "binary_logistic_head/metrics/recall_at_thresholds/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/ToFloat_2"
  op: "Cast"
  input: "binary_logistic_head/metrics/recall_at_thresholds/LogicalAnd_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/Sum_1"
  op: "Sum"
  input: "binary_logistic_head/metrics/recall_at_thresholds/ToFloat_2"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/AssignAdd_1"
  op: "AssignAdd"
  input: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  input: "binary_logistic_head/metrics/recall_at_thresholds/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/add/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/add"
  op: "Add"
  input: "binary_logistic_head/metrics/recall_at_thresholds/add/x"
  input: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/add_1"
  op: "Add"
  input: "binary_logistic_head/metrics/recall_at_thresholds/add"
  input: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/recall_value"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/recall_at_thresholds/true_positives/read"
  input: "binary_logistic_head/metrics/recall_at_thresholds/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/add_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/add_2"
  op: "Add"
  input: "binary_logistic_head/metrics/recall_at_thresholds/add_2/x"
  input: "binary_logistic_head/metrics/recall_at_thresholds/AssignAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/add_3"
  op: "Add"
  input: "binary_logistic_head/metrics/recall_at_thresholds/add_2"
  input: "binary_logistic_head/metrics/recall_at_thresholds/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/recall_at_thresholds/recall_update_op"
  op: "RealDiv"
  input: "binary_logistic_head/metrics/recall_at_thresholds/AssignAdd"
  input: "binary_logistic_head/metrics/recall_at_thresholds/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/Squeeze_2"
  op: "Squeeze"
  input: "binary_logistic_head/metrics/recall_at_thresholds/recall_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "binary_logistic_head/metrics/Squeeze_3"
  op: "Squeeze"
  input: "binary_logistic_head/metrics/recall_at_thresholds/recall_update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/Shape"
  op: "Shape"
  input: "binary_logistic_head/predictions/probabilities"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/strided_slice"
  op: "StridedSlice"
  input: "binary_logistic_head/_classification_output_alternatives/Shape"
  input: "binary_logistic_head/_classification_output_alternatives/strided_slice/stack"
  input: "binary_logistic_head/_classification_output_alternatives/strided_slice/stack_1"
  input: "binary_logistic_head/_classification_output_alternatives/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/Shape_1"
  op: "Shape"
  input: "binary_logistic_head/predictions/probabilities"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/strided_slice_1"
  op: "StridedSlice"
  input: "binary_logistic_head/_classification_output_alternatives/Shape_1"
  input: "binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack"
  input: "binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack_1"
  input: "binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/range"
  op: "Range"
  input: "binary_logistic_head/_classification_output_alternatives/range/start"
  input: "binary_logistic_head/_classification_output_alternatives/strided_slice_1"
  input: "binary_logistic_head/_classification_output_alternatives/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/ExpandDims"
  op: "ExpandDims"
  input: "binary_logistic_head/_classification_output_alternatives/range"
  input: "binary_logistic_head/_classification_output_alternatives/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/Tile/multiples"
  op: "Pack"
  input: "binary_logistic_head/_classification_output_alternatives/strided_slice"
  input: "binary_logistic_head/_classification_output_alternatives/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/Tile"
  op: "Tile"
  input: "binary_logistic_head/_classification_output_alternatives/ExpandDims"
  input: "binary_logistic_head/_classification_output_alternatives/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "binary_logistic_head/_classification_output_alternatives/classes_tensor"
  op: "AsString"
  input: "binary_logistic_head/_classification_output_alternatives/Tile"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "DestroyResourceOp"
  op: "DestroyResourceOp"
  input: "tree-0"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_1"
  op: "DestroyResourceOp"
  input: "tree-1"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_2"
  op: "DestroyResourceOp"
  input: "tree-2"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_3"
  op: "DestroyResourceOp"
  input: "tree-3"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_4"
  op: "DestroyResourceOp"
  input: "tree-4"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_5"
  op: "DestroyResourceOp"
  input: "tree-5"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_6"
  op: "DestroyResourceOp"
  input: "tree-6"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_7"
  op: "DestroyResourceOp"
  input: "tree-7"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_8"
  op: "DestroyResourceOp"
  input: "tree-8"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_9"
  op: "DestroyResourceOp"
  input: "tree-9"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_10"
  op: "DestroyResourceOp"
  input: "tree-10"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_11"
  op: "DestroyResourceOp"
  input: "tree-11"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_12"
  op: "DestroyResourceOp"
  input: "tree-12"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_13"
  op: "DestroyResourceOp"
  input: "tree-13"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_14"
  op: "DestroyResourceOp"
  input: "tree-14"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_15"
  op: "DestroyResourceOp"
  input: "tree-15"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_16"
  op: "DestroyResourceOp"
  input: "tree-16"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_17"
  op: "DestroyResourceOp"
  input: "tree-17"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_18"
  op: "DestroyResourceOp"
  input: "tree-18"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_19"
  op: "DestroyResourceOp"
  input: "tree-19"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_20"
  op: "DestroyResourceOp"
  input: "tree-20"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_21"
  op: "DestroyResourceOp"
  input: "tree-21"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_22"
  op: "DestroyResourceOp"
  input: "tree-22"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_23"
  op: "DestroyResourceOp"
  input: "tree-23"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_24"
  op: "DestroyResourceOp"
  input: "tree-24"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_25"
  op: "DestroyResourceOp"
  input: "tree-25"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_26"
  op: "DestroyResourceOp"
  input: "tree-26"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_27"
  op: "DestroyResourceOp"
  input: "tree-27"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_28"
  op: "DestroyResourceOp"
  input: "tree-28"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_29"
  op: "DestroyResourceOp"
  input: "tree-29"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_30"
  op: "DestroyResourceOp"
  input: "tree-30"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_31"
  op: "DestroyResourceOp"
  input: "tree-31"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_32"
  op: "DestroyResourceOp"
  input: "tree-32"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_33"
  op: "DestroyResourceOp"
  input: "tree-33"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_34"
  op: "DestroyResourceOp"
  input: "tree-34"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_35"
  op: "DestroyResourceOp"
  input: "tree-35"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_36"
  op: "DestroyResourceOp"
  input: "tree-36"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_37"
  op: "DestroyResourceOp"
  input: "tree-37"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_38"
  op: "DestroyResourceOp"
  input: "tree-38"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_39"
  op: "DestroyResourceOp"
  input: "tree-39"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_40"
  op: "DestroyResourceOp"
  input: "tree-40"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_41"
  op: "DestroyResourceOp"
  input: "tree-41"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_42"
  op: "DestroyResourceOp"
  input: "tree-42"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_43"
  op: "DestroyResourceOp"
  input: "tree-43"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_44"
  op: "DestroyResourceOp"
  input: "tree-44"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_45"
  op: "DestroyResourceOp"
  input: "tree-45"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_46"
  op: "DestroyResourceOp"
  input: "tree-46"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_47"
  op: "DestroyResourceOp"
  input: "tree-47"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_48"
  op: "DestroyResourceOp"
  input: "tree-48"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_49"
  op: "DestroyResourceOp"
  input: "tree-49"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_50"
  op: "DestroyResourceOp"
  input: "stats-0"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_51"
  op: "DestroyResourceOp"
  input: "stats-1"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_52"
  op: "DestroyResourceOp"
  input: "stats-2"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_53"
  op: "DestroyResourceOp"
  input: "stats-3"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_54"
  op: "DestroyResourceOp"
  input: "stats-4"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_55"
  op: "DestroyResourceOp"
  input: "stats-5"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_56"
  op: "DestroyResourceOp"
  input: "stats-6"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_57"
  op: "DestroyResourceOp"
  input: "stats-7"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_58"
  op: "DestroyResourceOp"
  input: "stats-8"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_59"
  op: "DestroyResourceOp"
  input: "stats-9"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_60"
  op: "DestroyResourceOp"
  input: "stats-10"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_61"
  op: "DestroyResourceOp"
  input: "stats-11"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_62"
  op: "DestroyResourceOp"
  input: "stats-12"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_63"
  op: "DestroyResourceOp"
  input: "stats-13"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_64"
  op: "DestroyResourceOp"
  input: "stats-14"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_65"
  op: "DestroyResourceOp"
  input: "stats-15"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_66"
  op: "DestroyResourceOp"
  input: "stats-16"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_67"
  op: "DestroyResourceOp"
  input: "stats-17"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_68"
  op: "DestroyResourceOp"
  input: "stats-18"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_69"
  op: "DestroyResourceOp"
  input: "stats-19"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_70"
  op: "DestroyResourceOp"
  input: "stats-20"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_71"
  op: "DestroyResourceOp"
  input: "stats-21"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_72"
  op: "DestroyResourceOp"
  input: "stats-22"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_73"
  op: "DestroyResourceOp"
  input: "stats-23"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_74"
  op: "DestroyResourceOp"
  input: "stats-24"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_75"
  op: "DestroyResourceOp"
  input: "stats-25"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_76"
  op: "DestroyResourceOp"
  input: "stats-26"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_77"
  op: "DestroyResourceOp"
  input: "stats-27"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_78"
  op: "DestroyResourceOp"
  input: "stats-28"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_79"
  op: "DestroyResourceOp"
  input: "stats-29"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_80"
  op: "DestroyResourceOp"
  input: "stats-30"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_81"
  op: "DestroyResourceOp"
  input: "stats-31"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_82"
  op: "DestroyResourceOp"
  input: "stats-32"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_83"
  op: "DestroyResourceOp"
  input: "stats-33"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_84"
  op: "DestroyResourceOp"
  input: "stats-34"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_85"
  op: "DestroyResourceOp"
  input: "stats-35"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_86"
  op: "DestroyResourceOp"
  input: "stats-36"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_87"
  op: "DestroyResourceOp"
  input: "stats-37"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_88"
  op: "DestroyResourceOp"
  input: "stats-38"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_89"
  op: "DestroyResourceOp"
  input: "stats-39"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_90"
  op: "DestroyResourceOp"
  input: "stats-40"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_91"
  op: "DestroyResourceOp"
  input: "stats-41"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_92"
  op: "DestroyResourceOp"
  input: "stats-42"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_93"
  op: "DestroyResourceOp"
  input: "stats-43"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_94"
  op: "DestroyResourceOp"
  input: "stats-44"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_95"
  op: "DestroyResourceOp"
  input: "stats-45"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_96"
  op: "DestroyResourceOp"
  input: "stats-46"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_97"
  op: "DestroyResourceOp"
  input: "stats-47"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_98"
  op: "DestroyResourceOp"
  input: "stats-48"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "DestroyResourceOp_99"
  op: "DestroyResourceOp"
  input: "stats-49"
  attr {
    key: "ignore_lookup_error"
    value {
      b: true
    }
  }
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^DestroyResourceOp"
  input: "^DestroyResourceOp_1"
  input: "^DestroyResourceOp_2"
  input: "^DestroyResourceOp_3"
  input: "^DestroyResourceOp_4"
  input: "^DestroyResourceOp_5"
  input: "^DestroyResourceOp_6"
  input: "^DestroyResourceOp_7"
  input: "^DestroyResourceOp_8"
  input: "^DestroyResourceOp_9"
  input: "^DestroyResourceOp_10"
  input: "^DestroyResourceOp_11"
  input: "^DestroyResourceOp_12"
  input: "^DestroyResourceOp_13"
  input: "^DestroyResourceOp_14"
  input: "^DestroyResourceOp_15"
  input: "^DestroyResourceOp_16"
  input: "^DestroyResourceOp_17"
  input: "^DestroyResourceOp_18"
  input: "^DestroyResourceOp_19"
  input: "^DestroyResourceOp_20"
  input: "^DestroyResourceOp_21"
  input: "^DestroyResourceOp_22"
  input: "^DestroyResourceOp_23"
  input: "^DestroyResourceOp_24"
  input: "^DestroyResourceOp_25"
  input: "^DestroyResourceOp_26"
  input: "^DestroyResourceOp_27"
  input: "^DestroyResourceOp_28"
  input: "^DestroyResourceOp_29"
  input: "^DestroyResourceOp_30"
  input: "^DestroyResourceOp_31"
  input: "^DestroyResourceOp_32"
  input: "^DestroyResourceOp_33"
  input: "^DestroyResourceOp_34"
  input: "^DestroyResourceOp_35"
  input: "^DestroyResourceOp_36"
  input: "^DestroyResourceOp_37"
  input: "^DestroyResourceOp_38"
  input: "^DestroyResourceOp_39"
  input: "^DestroyResourceOp_40"
  input: "^DestroyResourceOp_41"
  input: "^DestroyResourceOp_42"
  input: "^DestroyResourceOp_43"
  input: "^DestroyResourceOp_44"
  input: "^DestroyResourceOp_45"
  input: "^DestroyResourceOp_46"
  input: "^DestroyResourceOp_47"
  input: "^DestroyResourceOp_48"
  input: "^DestroyResourceOp_49"
  input: "^DestroyResourceOp_50"
  input: "^DestroyResourceOp_51"
  input: "^DestroyResourceOp_52"
  input: "^DestroyResourceOp_53"
  input: "^DestroyResourceOp_54"
  input: "^DestroyResourceOp_55"
  input: "^DestroyResourceOp_56"
  input: "^DestroyResourceOp_57"
  input: "^DestroyResourceOp_58"
  input: "^DestroyResourceOp_59"
  input: "^DestroyResourceOp_60"
  input: "^DestroyResourceOp_61"
  input: "^DestroyResourceOp_62"
  input: "^DestroyResourceOp_63"
  input: "^DestroyResourceOp_64"
  input: "^DestroyResourceOp_65"
  input: "^DestroyResourceOp_66"
  input: "^DestroyResourceOp_67"
  input: "^DestroyResourceOp_68"
  input: "^DestroyResourceOp_69"
  input: "^DestroyResourceOp_70"
  input: "^DestroyResourceOp_71"
  input: "^DestroyResourceOp_72"
  input: "^DestroyResourceOp_73"
  input: "^DestroyResourceOp_74"
  input: "^DestroyResourceOp_75"
  input: "^DestroyResourceOp_76"
  input: "^DestroyResourceOp_77"
  input: "^DestroyResourceOp_78"
  input: "^DestroyResourceOp_79"
  input: "^DestroyResourceOp_80"
  input: "^DestroyResourceOp_81"
  input: "^DestroyResourceOp_82"
  input: "^DestroyResourceOp_83"
  input: "^DestroyResourceOp_84"
  input: "^DestroyResourceOp_85"
  input: "^DestroyResourceOp_86"
  input: "^DestroyResourceOp_87"
  input: "^DestroyResourceOp_88"
  input: "^DestroyResourceOp_89"
  input: "^DestroyResourceOp_90"
  input: "^DestroyResourceOp_91"
  input: "^DestroyResourceOp_92"
  input: "^DestroyResourceOp_93"
  input: "^DestroyResourceOp_94"
  input: "^DestroyResourceOp_95"
  input: "^DestroyResourceOp_96"
  input: "^DestroyResourceOp_97"
  input: "^DestroyResourceOp_98"
  input: "^DestroyResourceOp_99"
}
node {
  name: "init/NoOp"
  op: "NoOp"
  input: "^global_step/Assign"
}
node {
  name: "init/NoOp_1"
  op: "NoOp"
  input: "^device_dummy_0/Assign"
  input: "^device_dummy_1/Assign"
  input: "^device_dummy_2/Assign"
  input: "^device_dummy_3/Assign"
  input: "^device_dummy_4/Assign"
  input: "^device_dummy_5/Assign"
  input: "^device_dummy_6/Assign"
  input: "^device_dummy_7/Assign"
  input: "^device_dummy_8/Assign"
  input: "^device_dummy_9/Assign"
  input: "^device_dummy_10/Assign"
  input: "^device_dummy_11/Assign"
  input: "^device_dummy_12/Assign"
  input: "^device_dummy_13/Assign"
  input: "^device_dummy_14/Assign"
  input: "^device_dummy_15/Assign"
  input: "^device_dummy_16/Assign"
  input: "^device_dummy_17/Assign"
  input: "^device_dummy_18/Assign"
  input: "^device_dummy_19/Assign"
  input: "^device_dummy_20/Assign"
  input: "^device_dummy_21/Assign"
  input: "^device_dummy_22/Assign"
  input: "^device_dummy_23/Assign"
  input: "^device_dummy_24/Assign"
  input: "^device_dummy_25/Assign"
  input: "^device_dummy_26/Assign"
  input: "^device_dummy_27/Assign"
  input: "^device_dummy_28/Assign"
  input: "^device_dummy_29/Assign"
  input: "^device_dummy_30/Assign"
  input: "^device_dummy_31/Assign"
  input: "^device_dummy_32/Assign"
  input: "^device_dummy_33/Assign"
  input: "^device_dummy_34/Assign"
  input: "^device_dummy_35/Assign"
  input: "^device_dummy_36/Assign"
  input: "^device_dummy_37/Assign"
  input: "^device_dummy_38/Assign"
  input: "^device_dummy_39/Assign"
  input: "^device_dummy_40/Assign"
  input: "^device_dummy_41/Assign"
  input: "^device_dummy_42/Assign"
  input: "^device_dummy_43/Assign"
  input: "^device_dummy_44/Assign"
  input: "^device_dummy_45/Assign"
  input: "^device_dummy_46/Assign"
  input: "^device_dummy_47/Assign"
  input: "^device_dummy_48/Assign"
  input: "^device_dummy_49/Assign"
  device: "/device:CPU:0"
}
node {
  name: "init"
  op: "NoOp"
  input: "^init/NoOp"
  input: "^init/NoOp_1"
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^stats-0/CreateFertileStatsVariable"
  input: "^tree-0/CreateTreeVariable"
  input: "^stats-1/CreateFertileStatsVariable"
  input: "^tree-1/CreateTreeVariable"
  input: "^stats-2/CreateFertileStatsVariable"
  input: "^tree-2/CreateTreeVariable"
  input: "^stats-3/CreateFertileStatsVariable"
  input: "^tree-3/CreateTreeVariable"
  input: "^stats-4/CreateFertileStatsVariable"
  input: "^tree-4/CreateTreeVariable"
  input: "^stats-5/CreateFertileStatsVariable"
  input: "^tree-5/CreateTreeVariable"
  input: "^stats-6/CreateFertileStatsVariable"
  input: "^tree-6/CreateTreeVariable"
  input: "^stats-7/CreateFertileStatsVariable"
  input: "^tree-7/CreateTreeVariable"
  input: "^stats-8/CreateFertileStatsVariable"
  input: "^tree-8/CreateTreeVariable"
  input: "^stats-9/CreateFertileStatsVariable"
  input: "^tree-9/CreateTreeVariable"
  input: "^stats-10/CreateFertileStatsVariable"
  input: "^tree-10/CreateTreeVariable"
  input: "^stats-11/CreateFertileStatsVariable"
  input: "^tree-11/CreateTreeVariable"
  input: "^stats-12/CreateFertileStatsVariable"
  input: "^tree-12/CreateTreeVariable"
  input: "^stats-13/CreateFertileStatsVariable"
  input: "^tree-13/CreateTreeVariable"
  input: "^stats-14/CreateFertileStatsVariable"
  input: "^tree-14/CreateTreeVariable"
  input: "^stats-15/CreateFertileStatsVariable"
  input: "^tree-15/CreateTreeVariable"
  input: "^stats-16/CreateFertileStatsVariable"
  input: "^tree-16/CreateTreeVariable"
  input: "^stats-17/CreateFertileStatsVariable"
  input: "^tree-17/CreateTreeVariable"
  input: "^stats-18/CreateFertileStatsVariable"
  input: "^tree-18/CreateTreeVariable"
  input: "^stats-19/CreateFertileStatsVariable"
  input: "^tree-19/CreateTreeVariable"
  input: "^stats-20/CreateFertileStatsVariable"
  input: "^tree-20/CreateTreeVariable"
  input: "^stats-21/CreateFertileStatsVariable"
  input: "^tree-21/CreateTreeVariable"
  input: "^stats-22/CreateFertileStatsVariable"
  input: "^tree-22/CreateTreeVariable"
  input: "^stats-23/CreateFertileStatsVariable"
  input: "^tree-23/CreateTreeVariable"
  input: "^stats-24/CreateFertileStatsVariable"
  input: "^tree-24/CreateTreeVariable"
  input: "^stats-25/CreateFertileStatsVariable"
  input: "^tree-25/CreateTreeVariable"
  input: "^stats-26/CreateFertileStatsVariable"
  input: "^tree-26/CreateTreeVariable"
  input: "^stats-27/CreateFertileStatsVariable"
  input: "^tree-27/CreateTreeVariable"
  input: "^stats-28/CreateFertileStatsVariable"
  input: "^tree-28/CreateTreeVariable"
  input: "^stats-29/CreateFertileStatsVariable"
  input: "^tree-29/CreateTreeVariable"
  input: "^stats-30/CreateFertileStatsVariable"
  input: "^tree-30/CreateTreeVariable"
  input: "^stats-31/CreateFertileStatsVariable"
  input: "^tree-31/CreateTreeVariable"
  input: "^stats-32/CreateFertileStatsVariable"
  input: "^tree-32/CreateTreeVariable"
  input: "^stats-33/CreateFertileStatsVariable"
  input: "^tree-33/CreateTreeVariable"
  input: "^stats-34/CreateFertileStatsVariable"
  input: "^tree-34/CreateTreeVariable"
  input: "^stats-35/CreateFertileStatsVariable"
  input: "^tree-35/CreateTreeVariable"
  input: "^stats-36/CreateFertileStatsVariable"
  input: "^tree-36/CreateTreeVariable"
  input: "^stats-37/CreateFertileStatsVariable"
  input: "^tree-37/CreateTreeVariable"
  input: "^stats-38/CreateFertileStatsVariable"
  input: "^tree-38/CreateTreeVariable"
  input: "^stats-39/CreateFertileStatsVariable"
  input: "^tree-39/CreateTreeVariable"
  input: "^stats-40/CreateFertileStatsVariable"
  input: "^tree-40/CreateTreeVariable"
  input: "^stats-41/CreateFertileStatsVariable"
  input: "^tree-41/CreateTreeVariable"
  input: "^stats-42/CreateFertileStatsVariable"
  input: "^tree-42/CreateTreeVariable"
  input: "^stats-43/CreateFertileStatsVariable"
  input: "^tree-43/CreateTreeVariable"
  input: "^stats-44/CreateFertileStatsVariable"
  input: "^tree-44/CreateTreeVariable"
  input: "^stats-45/CreateFertileStatsVariable"
  input: "^tree-45/CreateTreeVariable"
  input: "^stats-46/CreateFertileStatsVariable"
  input: "^tree-46/CreateTreeVariable"
  input: "^stats-47/CreateFertileStatsVariable"
  input: "^tree-47/CreateTreeVariable"
  input: "^stats-48/CreateFertileStatsVariable"
  input: "^tree-48/CreateTreeVariable"
  input: "^stats-49/CreateFertileStatsVariable"
  input: "^tree-49/CreateTreeVariable"
  device: "/device:CPU:0"
}
node {
  name: "group_deps_2/NoOp"
  op: "NoOp"
  input: "^init"
}
node {
  name: "group_deps_2/NoOp_1"
  op: "NoOp"
  input: "^init_1"
  device: "/device:CPU:0"
}
node {
  name: "group_deps_2"
  op: "NoOp"
  input: "^group_deps_2/NoOp"
  input: "^group_deps_2/NoOp_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "device_dummy_0"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "device_dummy_1"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "device_dummy_2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "device_dummy_3"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "device_dummy_4"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "device_dummy_5"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "device_dummy_6"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "device_dummy_7"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "device_dummy_8"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "device_dummy_9"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "device_dummy_10"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "device_dummy_11"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "device_dummy_12"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "device_dummy_13"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "device_dummy_14"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "device_dummy_15"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "device_dummy_16"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "device_dummy_17"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "device_dummy_18"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "device_dummy_19"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "device_dummy_20"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "device_dummy_21"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "device_dummy_22"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "device_dummy_23"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "device_dummy_24"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "device_dummy_25"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "device_dummy_26"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "device_dummy_27"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "device_dummy_28"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "device_dummy_29"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "device_dummy_30"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "device_dummy_31"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "device_dummy_32"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "device_dummy_33"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "device_dummy_34"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "device_dummy_35"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "device_dummy_36"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "device_dummy_37"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "device_dummy_38"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "device_dummy_39"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "device_dummy_40"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "device_dummy_41"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "device_dummy_42"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "device_dummy_43"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "device_dummy_44"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "device_dummy_45"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "device_dummy_46"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "device_dummy_47"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "device_dummy_48"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "device_dummy_49"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/mean/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/mean/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/accuracy/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/accuracy/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/mean_1/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/mean_1/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/mean_2/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/mean_2/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/mean_3/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/mean_3/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/auc/true_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/auc/false_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/auc/true_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/auc/false_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/auc_1/true_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/auc_1/false_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/auc_1/true_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/auc_1/false_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/accuracy_1/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/accuracy_1/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  input: "report_uninitialized_variables/IsVariableInitialized_63"
  input: "report_uninitialized_variables/IsVariableInitialized_64"
  input: "report_uninitialized_variables/IsVariableInitialized_65"
  input: "report_uninitialized_variables/IsVariableInitialized_66"
  input: "report_uninitialized_variables/IsVariableInitialized_67"
  input: "report_uninitialized_variables/IsVariableInitialized_68"
  input: "report_uninitialized_variables/IsVariableInitialized_69"
  input: "report_uninitialized_variables/IsVariableInitialized_70"
  input: "report_uninitialized_variables/IsVariableInitialized_71"
  input: "report_uninitialized_variables/IsVariableInitialized_72"
  input: "report_uninitialized_variables/IsVariableInitialized_73"
  input: "report_uninitialized_variables/IsVariableInitialized_74"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 75
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 75
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 75
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 75
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 75
          }
        }
        string_val: "global_step"
        string_val: "device_dummy_0"
        string_val: "device_dummy_1"
        string_val: "device_dummy_2"
        string_val: "device_dummy_3"
        string_val: "device_dummy_4"
        string_val: "device_dummy_5"
        string_val: "device_dummy_6"
        string_val: "device_dummy_7"
        string_val: "device_dummy_8"
        string_val: "device_dummy_9"
        string_val: "device_dummy_10"
        string_val: "device_dummy_11"
        string_val: "device_dummy_12"
        string_val: "device_dummy_13"
        string_val: "device_dummy_14"
        string_val: "device_dummy_15"
        string_val: "device_dummy_16"
        string_val: "device_dummy_17"
        string_val: "device_dummy_18"
        string_val: "device_dummy_19"
        string_val: "device_dummy_20"
        string_val: "device_dummy_21"
        string_val: "device_dummy_22"
        string_val: "device_dummy_23"
        string_val: "device_dummy_24"
        string_val: "device_dummy_25"
        string_val: "device_dummy_26"
        string_val: "device_dummy_27"
        string_val: "device_dummy_28"
        string_val: "device_dummy_29"
        string_val: "device_dummy_30"
        string_val: "device_dummy_31"
        string_val: "device_dummy_32"
        string_val: "device_dummy_33"
        string_val: "device_dummy_34"
        string_val: "device_dummy_35"
        string_val: "device_dummy_36"
        string_val: "device_dummy_37"
        string_val: "device_dummy_38"
        string_val: "device_dummy_39"
        string_val: "device_dummy_40"
        string_val: "device_dummy_41"
        string_val: "device_dummy_42"
        string_val: "device_dummy_43"
        string_val: "device_dummy_44"
        string_val: "device_dummy_45"
        string_val: "device_dummy_46"
        string_val: "device_dummy_47"
        string_val: "device_dummy_48"
        string_val: "device_dummy_49"
        string_val: "binary_logistic_head/metrics/mean/total"
        string_val: "binary_logistic_head/metrics/mean/count"
        string_val: "binary_logistic_head/metrics/accuracy/total"
        string_val: "binary_logistic_head/metrics/accuracy/count"
        string_val: "binary_logistic_head/metrics/mean_1/total"
        string_val: "binary_logistic_head/metrics/mean_1/count"
        string_val: "binary_logistic_head/metrics/mean_2/total"
        string_val: "binary_logistic_head/metrics/mean_2/count"
        string_val: "binary_logistic_head/metrics/mean_3/total"
        string_val: "binary_logistic_head/metrics/mean_3/count"
        string_val: "binary_logistic_head/metrics/auc/true_positives"
        string_val: "binary_logistic_head/metrics/auc/false_negatives"
        string_val: "binary_logistic_head/metrics/auc/true_negatives"
        string_val: "binary_logistic_head/metrics/auc/false_positives"
        string_val: "binary_logistic_head/metrics/auc_1/true_positives"
        string_val: "binary_logistic_head/metrics/auc_1/false_negatives"
        string_val: "binary_logistic_head/metrics/auc_1/true_negatives"
        string_val: "binary_logistic_head/metrics/auc_1/false_positives"
        string_val: "binary_logistic_head/metrics/accuracy_1/total"
        string_val: "binary_logistic_head/metrics/accuracy_1/count"
        string_val: "binary_logistic_head/metrics/precision_at_thresholds/true_positives"
        string_val: "binary_logistic_head/metrics/precision_at_thresholds/false_positives"
        string_val: "binary_logistic_head/metrics/recall_at_thresholds/true_positives"
        string_val: "binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 75
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 75
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 75
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 75
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 75
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/stack"
  op: "Pack"
  input: "stats-0/FertileStatsIsInitializedOp"
  input: "tree-0/TreeIsInitializedOp"
  input: "stats-1/FertileStatsIsInitializedOp"
  input: "tree-1/TreeIsInitializedOp"
  input: "stats-2/FertileStatsIsInitializedOp"
  input: "tree-2/TreeIsInitializedOp"
  input: "stats-3/FertileStatsIsInitializedOp"
  input: "tree-3/TreeIsInitializedOp"
  input: "stats-4/FertileStatsIsInitializedOp"
  input: "tree-4/TreeIsInitializedOp"
  input: "stats-5/FertileStatsIsInitializedOp"
  input: "tree-5/TreeIsInitializedOp"
  input: "stats-6/FertileStatsIsInitializedOp"
  input: "tree-6/TreeIsInitializedOp"
  input: "stats-7/FertileStatsIsInitializedOp"
  input: "tree-7/TreeIsInitializedOp"
  input: "stats-8/FertileStatsIsInitializedOp"
  input: "tree-8/TreeIsInitializedOp"
  input: "stats-9/FertileStatsIsInitializedOp"
  input: "tree-9/TreeIsInitializedOp"
  input: "stats-10/FertileStatsIsInitializedOp"
  input: "tree-10/TreeIsInitializedOp"
  input: "stats-11/FertileStatsIsInitializedOp"
  input: "tree-11/TreeIsInitializedOp"
  input: "stats-12/FertileStatsIsInitializedOp"
  input: "tree-12/TreeIsInitializedOp"
  input: "stats-13/FertileStatsIsInitializedOp"
  input: "tree-13/TreeIsInitializedOp"
  input: "stats-14/FertileStatsIsInitializedOp"
  input: "tree-14/TreeIsInitializedOp"
  input: "stats-15/FertileStatsIsInitializedOp"
  input: "tree-15/TreeIsInitializedOp"
  input: "stats-16/FertileStatsIsInitializedOp"
  input: "tree-16/TreeIsInitializedOp"
  input: "stats-17/FertileStatsIsInitializedOp"
  input: "tree-17/TreeIsInitializedOp"
  input: "stats-18/FertileStatsIsInitializedOp"
  input: "tree-18/TreeIsInitializedOp"
  input: "stats-19/FertileStatsIsInitializedOp"
  input: "tree-19/TreeIsInitializedOp"
  input: "stats-20/FertileStatsIsInitializedOp"
  input: "tree-20/TreeIsInitializedOp"
  input: "stats-21/FertileStatsIsInitializedOp"
  input: "tree-21/TreeIsInitializedOp"
  input: "stats-22/FertileStatsIsInitializedOp"
  input: "tree-22/TreeIsInitializedOp"
  input: "stats-23/FertileStatsIsInitializedOp"
  input: "tree-23/TreeIsInitializedOp"
  input: "stats-24/FertileStatsIsInitializedOp"
  input: "tree-24/TreeIsInitializedOp"
  input: "stats-25/FertileStatsIsInitializedOp"
  input: "tree-25/TreeIsInitializedOp"
  input: "stats-26/FertileStatsIsInitializedOp"
  input: "tree-26/TreeIsInitializedOp"
  input: "stats-27/FertileStatsIsInitializedOp"
  input: "tree-27/TreeIsInitializedOp"
  input: "stats-28/FertileStatsIsInitializedOp"
  input: "tree-28/TreeIsInitializedOp"
  input: "stats-29/FertileStatsIsInitializedOp"
  input: "tree-29/TreeIsInitializedOp"
  input: "stats-30/FertileStatsIsInitializedOp"
  input: "tree-30/TreeIsInitializedOp"
  input: "stats-31/FertileStatsIsInitializedOp"
  input: "tree-31/TreeIsInitializedOp"
  input: "stats-32/FertileStatsIsInitializedOp"
  input: "tree-32/TreeIsInitializedOp"
  input: "stats-33/FertileStatsIsInitializedOp"
  input: "tree-33/TreeIsInitializedOp"
  input: "stats-34/FertileStatsIsInitializedOp"
  input: "tree-34/TreeIsInitializedOp"
  input: "stats-35/FertileStatsIsInitializedOp"
  input: "tree-35/TreeIsInitializedOp"
  input: "stats-36/FertileStatsIsInitializedOp"
  input: "tree-36/TreeIsInitializedOp"
  input: "stats-37/FertileStatsIsInitializedOp"
  input: "tree-37/TreeIsInitializedOp"
  input: "stats-38/FertileStatsIsInitializedOp"
  input: "tree-38/TreeIsInitializedOp"
  input: "stats-39/FertileStatsIsInitializedOp"
  input: "tree-39/TreeIsInitializedOp"
  input: "stats-40/FertileStatsIsInitializedOp"
  input: "tree-40/TreeIsInitializedOp"
  input: "stats-41/FertileStatsIsInitializedOp"
  input: "tree-41/TreeIsInitializedOp"
  input: "stats-42/FertileStatsIsInitializedOp"
  input: "tree-42/TreeIsInitializedOp"
  input: "stats-43/FertileStatsIsInitializedOp"
  input: "tree-43/TreeIsInitializedOp"
  input: "stats-44/FertileStatsIsInitializedOp"
  input: "tree-44/TreeIsInitializedOp"
  input: "stats-45/FertileStatsIsInitializedOp"
  input: "tree-45/TreeIsInitializedOp"
  input: "stats-46/FertileStatsIsInitializedOp"
  input: "tree-46/TreeIsInitializedOp"
  input: "stats-47/FertileStatsIsInitializedOp"
  input: "tree-47/TreeIsInitializedOp"
  input: "stats-48/FertileStatsIsInitializedOp"
  input: "tree-48/TreeIsInitializedOp"
  input: "stats-49/FertileStatsIsInitializedOp"
  input: "tree-49/TreeIsInitializedOp"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 100
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_resources/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 100
          }
        }
        string_val: "stats-0:0"
        string_val: "tree-0:0"
        string_val: "stats-1:0"
        string_val: "tree-1:0"
        string_val: "stats-2:0"
        string_val: "tree-2:0"
        string_val: "stats-3:0"
        string_val: "tree-3:0"
        string_val: "stats-4:0"
        string_val: "tree-4:0"
        string_val: "stats-5:0"
        string_val: "tree-5:0"
        string_val: "stats-6:0"
        string_val: "tree-6:0"
        string_val: "stats-7:0"
        string_val: "tree-7:0"
        string_val: "stats-8:0"
        string_val: "tree-8:0"
        string_val: "stats-9:0"
        string_val: "tree-9:0"
        string_val: "stats-10:0"
        string_val: "tree-10:0"
        string_val: "stats-11:0"
        string_val: "tree-11:0"
        string_val: "stats-12:0"
        string_val: "tree-12:0"
        string_val: "stats-13:0"
        string_val: "tree-13:0"
        string_val: "stats-14:0"
        string_val: "tree-14:0"
        string_val: "stats-15:0"
        string_val: "tree-15:0"
        string_val: "stats-16:0"
        string_val: "tree-16:0"
        string_val: "stats-17:0"
        string_val: "tree-17:0"
        string_val: "stats-18:0"
        string_val: "tree-18:0"
        string_val: "stats-19:0"
        string_val: "tree-19:0"
        string_val: "stats-20:0"
        string_val: "tree-20:0"
        string_val: "stats-21:0"
        string_val: "tree-21:0"
        string_val: "stats-22:0"
        string_val: "tree-22:0"
        string_val: "stats-23:0"
        string_val: "tree-23:0"
        string_val: "stats-24:0"
        string_val: "tree-24:0"
        string_val: "stats-25:0"
        string_val: "tree-25:0"
        string_val: "stats-26:0"
        string_val: "tree-26:0"
        string_val: "stats-27:0"
        string_val: "tree-27:0"
        string_val: "stats-28:0"
        string_val: "tree-28:0"
        string_val: "stats-29:0"
        string_val: "tree-29:0"
        string_val: "stats-30:0"
        string_val: "tree-30:0"
        string_val: "stats-31:0"
        string_val: "tree-31:0"
        string_val: "stats-32:0"
        string_val: "tree-32:0"
        string_val: "stats-33:0"
        string_val: "tree-33:0"
        string_val: "stats-34:0"
        string_val: "tree-34:0"
        string_val: "stats-35:0"
        string_val: "tree-35:0"
        string_val: "stats-36:0"
        string_val: "tree-36:0"
        string_val: "stats-37:0"
        string_val: "tree-37:0"
        string_val: "stats-38:0"
        string_val: "tree-38:0"
        string_val: "stats-39:0"
        string_val: "tree-39:0"
        string_val: "stats-40:0"
        string_val: "tree-40:0"
        string_val: "stats-41:0"
        string_val: "tree-41:0"
        string_val: "stats-42:0"
        string_val: "tree-42:0"
        string_val: "stats-43:0"
        string_val: "tree-43:0"
        string_val: "stats-44:0"
        string_val: "tree-44:0"
        string_val: "stats-45:0"
        string_val: "tree-45:0"
        string_val: "stats-46:0"
        string_val: "tree-46:0"
        string_val: "stats-47:0"
        string_val: "tree-47:0"
        string_val: "stats-48:0"
        string_val: "tree-48:0"
        string_val: "stats-49:0"
        string_val: "tree-49:0"
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_resources/boolean_mask/Shape"
  input: "report_uninitialized_resources/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_resources/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_resources/boolean_mask/strided_slice"
  input: "report_uninitialized_resources/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_resources/boolean_mask/Shape_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_resources/boolean_mask/Shape_2"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_resources/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1"
  input: "report_uninitialized_resources/boolean_mask/concat/values_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2"
  input: "report_uninitialized_resources/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_resources/Const"
  input: "report_uninitialized_resources/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_resources/LogicalNot"
  input: "report_uninitialized_resources/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_resources/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_resources/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_resources/boolean_mask/Reshape"
  input: "report_uninitialized_resources/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_2"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/boolean_mask/Gather"
  input: "concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "device_dummy_0"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "device_dummy_1"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "device_dummy_2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "device_dummy_3"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "device_dummy_4"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "device_dummy_5"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "device_dummy_6"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "device_dummy_7"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "device_dummy_8"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "device_dummy_9"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "device_dummy_10"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "device_dummy_11"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "device_dummy_12"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "device_dummy_13"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "device_dummy_14"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "device_dummy_15"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "device_dummy_16"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "device_dummy_17"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "device_dummy_18"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "device_dummy_19"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "device_dummy_20"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "device_dummy_21"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "device_dummy_22"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "device_dummy_23"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "device_dummy_24"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "device_dummy_25"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "device_dummy_26"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "device_dummy_27"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "device_dummy_28"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "device_dummy_29"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "device_dummy_30"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "device_dummy_31"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "device_dummy_32"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "device_dummy_33"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "device_dummy_34"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "device_dummy_35"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "device_dummy_36"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "device_dummy_37"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "device_dummy_38"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "device_dummy_39"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "device_dummy_40"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "device_dummy_41"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "device_dummy_42"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "device_dummy_43"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "device_dummy_44"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "device_dummy_45"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "device_dummy_46"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "device_dummy_47"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "device_dummy_48"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "device_dummy_49"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  input: "report_uninitialized_variables_1/IsVariableInitialized_43"
  input: "report_uninitialized_variables_1/IsVariableInitialized_44"
  input: "report_uninitialized_variables_1/IsVariableInitialized_45"
  input: "report_uninitialized_variables_1/IsVariableInitialized_46"
  input: "report_uninitialized_variables_1/IsVariableInitialized_47"
  input: "report_uninitialized_variables_1/IsVariableInitialized_48"
  input: "report_uninitialized_variables_1/IsVariableInitialized_49"
  input: "report_uninitialized_variables_1/IsVariableInitialized_50"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 51
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 51
          }
        }
        string_val: "global_step"
        string_val: "device_dummy_0"
        string_val: "device_dummy_1"
        string_val: "device_dummy_2"
        string_val: "device_dummy_3"
        string_val: "device_dummy_4"
        string_val: "device_dummy_5"
        string_val: "device_dummy_6"
        string_val: "device_dummy_7"
        string_val: "device_dummy_8"
        string_val: "device_dummy_9"
        string_val: "device_dummy_10"
        string_val: "device_dummy_11"
        string_val: "device_dummy_12"
        string_val: "device_dummy_13"
        string_val: "device_dummy_14"
        string_val: "device_dummy_15"
        string_val: "device_dummy_16"
        string_val: "device_dummy_17"
        string_val: "device_dummy_18"
        string_val: "device_dummy_19"
        string_val: "device_dummy_20"
        string_val: "device_dummy_21"
        string_val: "device_dummy_22"
        string_val: "device_dummy_23"
        string_val: "device_dummy_24"
        string_val: "device_dummy_25"
        string_val: "device_dummy_26"
        string_val: "device_dummy_27"
        string_val: "device_dummy_28"
        string_val: "device_dummy_29"
        string_val: "device_dummy_30"
        string_val: "device_dummy_31"
        string_val: "device_dummy_32"
        string_val: "device_dummy_33"
        string_val: "device_dummy_34"
        string_val: "device_dummy_35"
        string_val: "device_dummy_36"
        string_val: "device_dummy_37"
        string_val: "device_dummy_38"
        string_val: "device_dummy_39"
        string_val: "device_dummy_40"
        string_val: "device_dummy_41"
        string_val: "device_dummy_42"
        string_val: "device_dummy_43"
        string_val: "device_dummy_44"
        string_val: "device_dummy_45"
        string_val: "device_dummy_46"
        string_val: "device_dummy_47"
        string_val: "device_dummy_48"
        string_val: "device_dummy_49"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 51
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 51
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 51
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^binary_logistic_head/metrics/mean/total/Assign"
  input: "^binary_logistic_head/metrics/mean/count/Assign"
  input: "^binary_logistic_head/metrics/accuracy/total/Assign"
  input: "^binary_logistic_head/metrics/accuracy/count/Assign"
  input: "^binary_logistic_head/metrics/mean_1/total/Assign"
  input: "^binary_logistic_head/metrics/mean_1/count/Assign"
  input: "^binary_logistic_head/metrics/mean_2/total/Assign"
  input: "^binary_logistic_head/metrics/mean_2/count/Assign"
  input: "^binary_logistic_head/metrics/mean_3/total/Assign"
  input: "^binary_logistic_head/metrics/mean_3/count/Assign"
  input: "^binary_logistic_head/metrics/auc/true_positives/Assign"
  input: "^binary_logistic_head/metrics/auc/false_negatives/Assign"
  input: "^binary_logistic_head/metrics/auc/true_negatives/Assign"
  input: "^binary_logistic_head/metrics/auc/false_positives/Assign"
  input: "^binary_logistic_head/metrics/auc_1/true_positives/Assign"
  input: "^binary_logistic_head/metrics/auc_1/false_negatives/Assign"
  input: "^binary_logistic_head/metrics/auc_1/true_negatives/Assign"
  input: "^binary_logistic_head/metrics/auc_1/false_positives/Assign"
  input: "^binary_logistic_head/metrics/accuracy_1/total/Assign"
  input: "^binary_logistic_head/metrics/accuracy_1/count/Assign"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/true_positives/Assign"
  input: "^binary_logistic_head/metrics/precision_at_thresholds/false_positives/Assign"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/true_positives/Assign"
  input: "^binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_3"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
  input: "^init_3"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "average_tree_size"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_b9557367a7bb4bb8b9b35fa800294014/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename_1/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 150
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 150
          }
        }
        string_val: "device_dummy_0"
        string_val: "device_dummy_1"
        string_val: "device_dummy_10"
        string_val: "device_dummy_11"
        string_val: "device_dummy_12"
        string_val: "device_dummy_13"
        string_val: "device_dummy_14"
        string_val: "device_dummy_15"
        string_val: "device_dummy_16"
        string_val: "device_dummy_17"
        string_val: "device_dummy_18"
        string_val: "device_dummy_19"
        string_val: "device_dummy_2"
        string_val: "device_dummy_20"
        string_val: "device_dummy_21"
        string_val: "device_dummy_22"
        string_val: "device_dummy_23"
        string_val: "device_dummy_24"
        string_val: "device_dummy_25"
        string_val: "device_dummy_26"
        string_val: "device_dummy_27"
        string_val: "device_dummy_28"
        string_val: "device_dummy_29"
        string_val: "device_dummy_3"
        string_val: "device_dummy_30"
        string_val: "device_dummy_31"
        string_val: "device_dummy_32"
        string_val: "device_dummy_33"
        string_val: "device_dummy_34"
        string_val: "device_dummy_35"
        string_val: "device_dummy_36"
        string_val: "device_dummy_37"
        string_val: "device_dummy_38"
        string_val: "device_dummy_39"
        string_val: "device_dummy_4"
        string_val: "device_dummy_40"
        string_val: "device_dummy_41"
        string_val: "device_dummy_42"
        string_val: "device_dummy_43"
        string_val: "device_dummy_44"
        string_val: "device_dummy_45"
        string_val: "device_dummy_46"
        string_val: "device_dummy_47"
        string_val: "device_dummy_48"
        string_val: "device_dummy_49"
        string_val: "device_dummy_5"
        string_val: "device_dummy_6"
        string_val: "device_dummy_7"
        string_val: "device_dummy_8"
        string_val: "device_dummy_9"
        string_val: "stats-0:0"
        string_val: "stats-10:0"
        string_val: "stats-11:0"
        string_val: "stats-12:0"
        string_val: "stats-13:0"
        string_val: "stats-14:0"
        string_val: "stats-15:0"
        string_val: "stats-16:0"
        string_val: "stats-17:0"
        string_val: "stats-18:0"
        string_val: "stats-19:0"
        string_val: "stats-1:0"
        string_val: "stats-20:0"
        string_val: "stats-21:0"
        string_val: "stats-22:0"
        string_val: "stats-23:0"
        string_val: "stats-24:0"
        string_val: "stats-25:0"
        string_val: "stats-26:0"
        string_val: "stats-27:0"
        string_val: "stats-28:0"
        string_val: "stats-29:0"
        string_val: "stats-2:0"
        string_val: "stats-30:0"
        string_val: "stats-31:0"
        string_val: "stats-32:0"
        string_val: "stats-33:0"
        string_val: "stats-34:0"
        string_val: "stats-35:0"
        string_val: "stats-36:0"
        string_val: "stats-37:0"
        string_val: "stats-38:0"
        string_val: "stats-39:0"
        string_val: "stats-3:0"
        string_val: "stats-40:0"
        string_val: "stats-41:0"
        string_val: "stats-42:0"
        string_val: "stats-43:0"
        string_val: "stats-44:0"
        string_val: "stats-45:0"
        string_val: "stats-46:0"
        string_val: "stats-47:0"
        string_val: "stats-48:0"
        string_val: "stats-49:0"
        string_val: "stats-4:0"
        string_val: "stats-5:0"
        string_val: "stats-6:0"
        string_val: "stats-7:0"
        string_val: "stats-8:0"
        string_val: "stats-9:0"
        string_val: "tree-0:0"
        string_val: "tree-10:0"
        string_val: "tree-11:0"
        string_val: "tree-12:0"
        string_val: "tree-13:0"
        string_val: "tree-14:0"
        string_val: "tree-15:0"
        string_val: "tree-16:0"
        string_val: "tree-17:0"
        string_val: "tree-18:0"
        string_val: "tree-19:0"
        string_val: "tree-1:0"
        string_val: "tree-20:0"
        string_val: "tree-21:0"
        string_val: "tree-22:0"
        string_val: "tree-23:0"
        string_val: "tree-24:0"
        string_val: "tree-25:0"
        string_val: "tree-26:0"
        string_val: "tree-27:0"
        string_val: "tree-28:0"
        string_val: "tree-29:0"
        string_val: "tree-2:0"
        string_val: "tree-30:0"
        string_val: "tree-31:0"
        string_val: "tree-32:0"
        string_val: "tree-33:0"
        string_val: "tree-34:0"
        string_val: "tree-35:0"
        string_val: "tree-36:0"
        string_val: "tree-37:0"
        string_val: "tree-38:0"
        string_val: "tree-39:0"
        string_val: "tree-3:0"
        string_val: "tree-40:0"
        string_val: "tree-41:0"
        string_val: "tree-42:0"
        string_val: "tree-43:0"
        string_val: "tree-44:0"
        string_val: "tree-45:0"
        string_val: "tree-46:0"
        string_val: "tree-47:0"
        string_val: "tree-48:0"
        string_val: "tree-49:0"
        string_val: "tree-4:0"
        string_val: "tree-5:0"
        string_val: "tree-6:0"
        string_val: "tree-7:0"
        string_val: "tree-8:0"
        string_val: "tree-9:0"
      }
    }
  }
}
node {
  name: "save/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 150
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 150
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/ShardedFilename_1"
  input: "save/SaveV2_1/tensor_names"
  input: "save/SaveV2_1/shape_and_slices"
  input: "device_dummy_0"
  input: "device_dummy_1"
  input: "device_dummy_10"
  input: "device_dummy_11"
  input: "device_dummy_12"
  input: "device_dummy_13"
  input: "device_dummy_14"
  input: "device_dummy_15"
  input: "device_dummy_16"
  input: "device_dummy_17"
  input: "device_dummy_18"
  input: "device_dummy_19"
  input: "device_dummy_2"
  input: "device_dummy_20"
  input: "device_dummy_21"
  input: "device_dummy_22"
  input: "device_dummy_23"
  input: "device_dummy_24"
  input: "device_dummy_25"
  input: "device_dummy_26"
  input: "device_dummy_27"
  input: "device_dummy_28"
  input: "device_dummy_29"
  input: "device_dummy_3"
  input: "device_dummy_30"
  input: "device_dummy_31"
  input: "device_dummy_32"
  input: "device_dummy_33"
  input: "device_dummy_34"
  input: "device_dummy_35"
  input: "device_dummy_36"
  input: "device_dummy_37"
  input: "device_dummy_38"
  input: "device_dummy_39"
  input: "device_dummy_4"
  input: "device_dummy_40"
  input: "device_dummy_41"
  input: "device_dummy_42"
  input: "device_dummy_43"
  input: "device_dummy_44"
  input: "device_dummy_45"
  input: "device_dummy_46"
  input: "device_dummy_47"
  input: "device_dummy_48"
  input: "device_dummy_49"
  input: "device_dummy_5"
  input: "device_dummy_6"
  input: "device_dummy_7"
  input: "device_dummy_8"
  input: "device_dummy_9"
  input: "stats-0/FertileStatsSerialize"
  input: "stats-10/FertileStatsSerialize"
  input: "stats-11/FertileStatsSerialize"
  input: "stats-12/FertileStatsSerialize"
  input: "stats-13/FertileStatsSerialize"
  input: "stats-14/FertileStatsSerialize"
  input: "stats-15/FertileStatsSerialize"
  input: "stats-16/FertileStatsSerialize"
  input: "stats-17/FertileStatsSerialize"
  input: "stats-18/FertileStatsSerialize"
  input: "stats-19/FertileStatsSerialize"
  input: "stats-1/FertileStatsSerialize"
  input: "stats-20/FertileStatsSerialize"
  input: "stats-21/FertileStatsSerialize"
  input: "stats-22/FertileStatsSerialize"
  input: "stats-23/FertileStatsSerialize"
  input: "stats-24/FertileStatsSerialize"
  input: "stats-25/FertileStatsSerialize"
  input: "stats-26/FertileStatsSerialize"
  input: "stats-27/FertileStatsSerialize"
  input: "stats-28/FertileStatsSerialize"
  input: "stats-29/FertileStatsSerialize"
  input: "stats-2/FertileStatsSerialize"
  input: "stats-30/FertileStatsSerialize"
  input: "stats-31/FertileStatsSerialize"
  input: "stats-32/FertileStatsSerialize"
  input: "stats-33/FertileStatsSerialize"
  input: "stats-34/FertileStatsSerialize"
  input: "stats-35/FertileStatsSerialize"
  input: "stats-36/FertileStatsSerialize"
  input: "stats-37/FertileStatsSerialize"
  input: "stats-38/FertileStatsSerialize"
  input: "stats-39/FertileStatsSerialize"
  input: "stats-3/FertileStatsSerialize"
  input: "stats-40/FertileStatsSerialize"
  input: "stats-41/FertileStatsSerialize"
  input: "stats-42/FertileStatsSerialize"
  input: "stats-43/FertileStatsSerialize"
  input: "stats-44/FertileStatsSerialize"
  input: "stats-45/FertileStatsSerialize"
  input: "stats-46/FertileStatsSerialize"
  input: "stats-47/FertileStatsSerialize"
  input: "stats-48/FertileStatsSerialize"
  input: "stats-49/FertileStatsSerialize"
  input: "stats-4/FertileStatsSerialize"
  input: "stats-5/FertileStatsSerialize"
  input: "stats-6/FertileStatsSerialize"
  input: "stats-7/FertileStatsSerialize"
  input: "stats-8/FertileStatsSerialize"
  input: "stats-9/FertileStatsSerialize"
  input: "tree-0/TreeSerialize"
  input: "tree-10/TreeSerialize"
  input: "tree-11/TreeSerialize"
  input: "tree-12/TreeSerialize"
  input: "tree-13/TreeSerialize"
  input: "tree-14/TreeSerialize"
  input: "tree-15/TreeSerialize"
  input: "tree-16/TreeSerialize"
  input: "tree-17/TreeSerialize"
  input: "tree-18/TreeSerialize"
  input: "tree-19/TreeSerialize"
  input: "tree-1/TreeSerialize"
  input: "tree-20/TreeSerialize"
  input: "tree-21/TreeSerialize"
  input: "tree-22/TreeSerialize"
  input: "tree-23/TreeSerialize"
  input: "tree-24/TreeSerialize"
  input: "tree-25/TreeSerialize"
  input: "tree-26/TreeSerialize"
  input: "tree-27/TreeSerialize"
  input: "tree-28/TreeSerialize"
  input: "tree-29/TreeSerialize"
  input: "tree-2/TreeSerialize"
  input: "tree-30/TreeSerialize"
  input: "tree-31/TreeSerialize"
  input: "tree-32/TreeSerialize"
  input: "tree-33/TreeSerialize"
  input: "tree-34/TreeSerialize"
  input: "tree-35/TreeSerialize"
  input: "tree-36/TreeSerialize"
  input: "tree-37/TreeSerialize"
  input: "tree-38/TreeSerialize"
  input: "tree-39/TreeSerialize"
  input: "tree-3/TreeSerialize"
  input: "tree-40/TreeSerialize"
  input: "tree-41/TreeSerialize"
  input: "tree-42/TreeSerialize"
  input: "tree-43/TreeSerialize"
  input: "tree-44/TreeSerialize"
  input: "tree-45/TreeSerialize"
  input: "tree-46/TreeSerialize"
  input: "tree-47/TreeSerialize"
  input: "tree-48/TreeSerialize"
  input: "tree-49/TreeSerialize"
  input: "tree-4/TreeSerialize"
  input: "tree-5/TreeSerialize"
  input: "tree-6/TreeSerialize"
  input: "tree-7/TreeSerialize"
  input: "tree-8/TreeSerialize"
  input: "tree-9/TreeSerialize"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/ShardedFilename_1"
  input: "^save/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "save/ShardedFilename_1"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  input: "^save/MergeV2Checkpoints"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 150
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 150
          }
        }
        string_val: "device_dummy_0"
        string_val: "device_dummy_1"
        string_val: "device_dummy_10"
        string_val: "device_dummy_11"
        string_val: "device_dummy_12"
        string_val: "device_dummy_13"
        string_val: "device_dummy_14"
        string_val: "device_dummy_15"
        string_val: "device_dummy_16"
        string_val: "device_dummy_17"
        string_val: "device_dummy_18"
        string_val: "device_dummy_19"
        string_val: "device_dummy_2"
        string_val: "device_dummy_20"
        string_val: "device_dummy_21"
        string_val: "device_dummy_22"
        string_val: "device_dummy_23"
        string_val: "device_dummy_24"
        string_val: "device_dummy_25"
        string_val: "device_dummy_26"
        string_val: "device_dummy_27"
        string_val: "device_dummy_28"
        string_val: "device_dummy_29"
        string_val: "device_dummy_3"
        string_val: "device_dummy_30"
        string_val: "device_dummy_31"
        string_val: "device_dummy_32"
        string_val: "device_dummy_33"
        string_val: "device_dummy_34"
        string_val: "device_dummy_35"
        string_val: "device_dummy_36"
        string_val: "device_dummy_37"
        string_val: "device_dummy_38"
        string_val: "device_dummy_39"
        string_val: "device_dummy_4"
        string_val: "device_dummy_40"
        string_val: "device_dummy_41"
        string_val: "device_dummy_42"
        string_val: "device_dummy_43"
        string_val: "device_dummy_44"
        string_val: "device_dummy_45"
        string_val: "device_dummy_46"
        string_val: "device_dummy_47"
        string_val: "device_dummy_48"
        string_val: "device_dummy_49"
        string_val: "device_dummy_5"
        string_val: "device_dummy_6"
        string_val: "device_dummy_7"
        string_val: "device_dummy_8"
        string_val: "device_dummy_9"
        string_val: "stats-0:0"
        string_val: "stats-10:0"
        string_val: "stats-11:0"
        string_val: "stats-12:0"
        string_val: "stats-13:0"
        string_val: "stats-14:0"
        string_val: "stats-15:0"
        string_val: "stats-16:0"
        string_val: "stats-17:0"
        string_val: "stats-18:0"
        string_val: "stats-19:0"
        string_val: "stats-1:0"
        string_val: "stats-20:0"
        string_val: "stats-21:0"
        string_val: "stats-22:0"
        string_val: "stats-23:0"
        string_val: "stats-24:0"
        string_val: "stats-25:0"
        string_val: "stats-26:0"
        string_val: "stats-27:0"
        string_val: "stats-28:0"
        string_val: "stats-29:0"
        string_val: "stats-2:0"
        string_val: "stats-30:0"
        string_val: "stats-31:0"
        string_val: "stats-32:0"
        string_val: "stats-33:0"
        string_val: "stats-34:0"
        string_val: "stats-35:0"
        string_val: "stats-36:0"
        string_val: "stats-37:0"
        string_val: "stats-38:0"
        string_val: "stats-39:0"
        string_val: "stats-3:0"
        string_val: "stats-40:0"
        string_val: "stats-41:0"
        string_val: "stats-42:0"
        string_val: "stats-43:0"
        string_val: "stats-44:0"
        string_val: "stats-45:0"
        string_val: "stats-46:0"
        string_val: "stats-47:0"
        string_val: "stats-48:0"
        string_val: "stats-49:0"
        string_val: "stats-4:0"
        string_val: "stats-5:0"
        string_val: "stats-6:0"
        string_val: "stats-7:0"
        string_val: "stats-8:0"
        string_val: "stats-9:0"
        string_val: "tree-0:0"
        string_val: "tree-10:0"
        string_val: "tree-11:0"
        string_val: "tree-12:0"
        string_val: "tree-13:0"
        string_val: "tree-14:0"
        string_val: "tree-15:0"
        string_val: "tree-16:0"
        string_val: "tree-17:0"
        string_val: "tree-18:0"
        string_val: "tree-19:0"
        string_val: "tree-1:0"
        string_val: "tree-20:0"
        string_val: "tree-21:0"
        string_val: "tree-22:0"
        string_val: "tree-23:0"
        string_val: "tree-24:0"
        string_val: "tree-25:0"
        string_val: "tree-26:0"
        string_val: "tree-27:0"
        string_val: "tree-28:0"
        string_val: "tree-29:0"
        string_val: "tree-2:0"
        string_val: "tree-30:0"
        string_val: "tree-31:0"
        string_val: "tree-32:0"
        string_val: "tree-33:0"
        string_val: "tree-34:0"
        string_val: "tree-35:0"
        string_val: "tree-36:0"
        string_val: "tree-37:0"
        string_val: "tree-38:0"
        string_val: "tree-39:0"
        string_val: "tree-3:0"
        string_val: "tree-40:0"
        string_val: "tree-41:0"
        string_val: "tree-42:0"
        string_val: "tree-43:0"
        string_val: "tree-44:0"
        string_val: "tree-45:0"
        string_val: "tree-46:0"
        string_val: "tree-47:0"
        string_val: "tree-48:0"
        string_val: "tree-49:0"
        string_val: "tree-4:0"
        string_val: "tree-5:0"
        string_val: "tree-6:0"
        string_val: "tree-7:0"
        string_val: "tree-8:0"
        string_val: "tree-9:0"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 150
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 150
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "device_dummy_0"
  input: "save/RestoreV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "device_dummy_1"
  input: "save/RestoreV2_1:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "device_dummy_10"
  input: "save/RestoreV2_1:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "device_dummy_11"
  input: "save/RestoreV2_1:3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "device_dummy_12"
  input: "save/RestoreV2_1:4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "device_dummy_13"
  input: "save/RestoreV2_1:5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "device_dummy_14"
  input: "save/RestoreV2_1:6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "device_dummy_15"
  input: "save/RestoreV2_1:7"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "device_dummy_16"
  input: "save/RestoreV2_1:8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "device_dummy_17"
  input: "save/RestoreV2_1:9"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "device_dummy_18"
  input: "save/RestoreV2_1:10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_18"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "device_dummy_19"
  input: "save/RestoreV2_1:11"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_19"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "device_dummy_2"
  input: "save/RestoreV2_1:12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "device_dummy_20"
  input: "save/RestoreV2_1:13"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_20"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "device_dummy_21"
  input: "save/RestoreV2_1:14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_21"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "device_dummy_22"
  input: "save/RestoreV2_1:15"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_22"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "device_dummy_23"
  input: "save/RestoreV2_1:16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_23"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "device_dummy_24"
  input: "save/RestoreV2_1:17"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_24"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "device_dummy_25"
  input: "save/RestoreV2_1:18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_25"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "device_dummy_26"
  input: "save/RestoreV2_1:19"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_26"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "device_dummy_27"
  input: "save/RestoreV2_1:20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_27"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "device_dummy_28"
  input: "save/RestoreV2_1:21"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_28"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "device_dummy_29"
  input: "save/RestoreV2_1:22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_29"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "device_dummy_3"
  input: "save/RestoreV2_1:23"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "device_dummy_30"
  input: "save/RestoreV2_1:24"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_30"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "device_dummy_31"
  input: "save/RestoreV2_1:25"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_31"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "device_dummy_32"
  input: "save/RestoreV2_1:26"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_32"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "device_dummy_33"
  input: "save/RestoreV2_1:27"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_33"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "device_dummy_34"
  input: "save/RestoreV2_1:28"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_34"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "device_dummy_35"
  input: "save/RestoreV2_1:29"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_35"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "device_dummy_36"
  input: "save/RestoreV2_1:30"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_36"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "device_dummy_37"
  input: "save/RestoreV2_1:31"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_37"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "device_dummy_38"
  input: "save/RestoreV2_1:32"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_38"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "device_dummy_39"
  input: "save/RestoreV2_1:33"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_39"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "device_dummy_4"
  input: "save/RestoreV2_1:34"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "device_dummy_40"
  input: "save/RestoreV2_1:35"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_40"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "device_dummy_41"
  input: "save/RestoreV2_1:36"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_41"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "device_dummy_42"
  input: "save/RestoreV2_1:37"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_42"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "device_dummy_43"
  input: "save/RestoreV2_1:38"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_43"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "device_dummy_44"
  input: "save/RestoreV2_1:39"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_44"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "device_dummy_45"
  input: "save/RestoreV2_1:40"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_45"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "device_dummy_46"
  input: "save/RestoreV2_1:41"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_46"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "device_dummy_47"
  input: "save/RestoreV2_1:42"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_47"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "device_dummy_48"
  input: "save/RestoreV2_1:43"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_48"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "device_dummy_49"
  input: "save/RestoreV2_1:44"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_49"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "device_dummy_5"
  input: "save/RestoreV2_1:45"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "device_dummy_6"
  input: "save/RestoreV2_1:46"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "device_dummy_7"
  input: "save/RestoreV2_1:47"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "device_dummy_8"
  input: "save/RestoreV2_1:48"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "device_dummy_9"
  input: "save/RestoreV2_1:49"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@device_dummy_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/FertileStatsDeserialize"
  op: "FertileStatsDeserialize"
  input: "stats-0"
  input: "save/RestoreV2_1:50"
  input: "^stats-0/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_1"
  op: "FertileStatsDeserialize"
  input: "stats-10"
  input: "save/RestoreV2_1:51"
  input: "^stats-10/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_2"
  op: "FertileStatsDeserialize"
  input: "stats-11"
  input: "save/RestoreV2_1:52"
  input: "^stats-11/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_3"
  op: "FertileStatsDeserialize"
  input: "stats-12"
  input: "save/RestoreV2_1:53"
  input: "^stats-12/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_4"
  op: "FertileStatsDeserialize"
  input: "stats-13"
  input: "save/RestoreV2_1:54"
  input: "^stats-13/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_5"
  op: "FertileStatsDeserialize"
  input: "stats-14"
  input: "save/RestoreV2_1:55"
  input: "^stats-14/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_6"
  op: "FertileStatsDeserialize"
  input: "stats-15"
  input: "save/RestoreV2_1:56"
  input: "^stats-15/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_7"
  op: "FertileStatsDeserialize"
  input: "stats-16"
  input: "save/RestoreV2_1:57"
  input: "^stats-16/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_8"
  op: "FertileStatsDeserialize"
  input: "stats-17"
  input: "save/RestoreV2_1:58"
  input: "^stats-17/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_9"
  op: "FertileStatsDeserialize"
  input: "stats-18"
  input: "save/RestoreV2_1:59"
  input: "^stats-18/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_10"
  op: "FertileStatsDeserialize"
  input: "stats-19"
  input: "save/RestoreV2_1:60"
  input: "^stats-19/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_11"
  op: "FertileStatsDeserialize"
  input: "stats-1"
  input: "save/RestoreV2_1:61"
  input: "^stats-1/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_12"
  op: "FertileStatsDeserialize"
  input: "stats-20"
  input: "save/RestoreV2_1:62"
  input: "^stats-20/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_13"
  op: "FertileStatsDeserialize"
  input: "stats-21"
  input: "save/RestoreV2_1:63"
  input: "^stats-21/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_14"
  op: "FertileStatsDeserialize"
  input: "stats-22"
  input: "save/RestoreV2_1:64"
  input: "^stats-22/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_15"
  op: "FertileStatsDeserialize"
  input: "stats-23"
  input: "save/RestoreV2_1:65"
  input: "^stats-23/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_16"
  op: "FertileStatsDeserialize"
  input: "stats-24"
  input: "save/RestoreV2_1:66"
  input: "^stats-24/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_17"
  op: "FertileStatsDeserialize"
  input: "stats-25"
  input: "save/RestoreV2_1:67"
  input: "^stats-25/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_18"
  op: "FertileStatsDeserialize"
  input: "stats-26"
  input: "save/RestoreV2_1:68"
  input: "^stats-26/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_19"
  op: "FertileStatsDeserialize"
  input: "stats-27"
  input: "save/RestoreV2_1:69"
  input: "^stats-27/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_20"
  op: "FertileStatsDeserialize"
  input: "stats-28"
  input: "save/RestoreV2_1:70"
  input: "^stats-28/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_21"
  op: "FertileStatsDeserialize"
  input: "stats-29"
  input: "save/RestoreV2_1:71"
  input: "^stats-29/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_22"
  op: "FertileStatsDeserialize"
  input: "stats-2"
  input: "save/RestoreV2_1:72"
  input: "^stats-2/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_23"
  op: "FertileStatsDeserialize"
  input: "stats-30"
  input: "save/RestoreV2_1:73"
  input: "^stats-30/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_24"
  op: "FertileStatsDeserialize"
  input: "stats-31"
  input: "save/RestoreV2_1:74"
  input: "^stats-31/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_25"
  op: "FertileStatsDeserialize"
  input: "stats-32"
  input: "save/RestoreV2_1:75"
  input: "^stats-32/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_26"
  op: "FertileStatsDeserialize"
  input: "stats-33"
  input: "save/RestoreV2_1:76"
  input: "^stats-33/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_27"
  op: "FertileStatsDeserialize"
  input: "stats-34"
  input: "save/RestoreV2_1:77"
  input: "^stats-34/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_28"
  op: "FertileStatsDeserialize"
  input: "stats-35"
  input: "save/RestoreV2_1:78"
  input: "^stats-35/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_29"
  op: "FertileStatsDeserialize"
  input: "stats-36"
  input: "save/RestoreV2_1:79"
  input: "^stats-36/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_30"
  op: "FertileStatsDeserialize"
  input: "stats-37"
  input: "save/RestoreV2_1:80"
  input: "^stats-37/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_31"
  op: "FertileStatsDeserialize"
  input: "stats-38"
  input: "save/RestoreV2_1:81"
  input: "^stats-38/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_32"
  op: "FertileStatsDeserialize"
  input: "stats-39"
  input: "save/RestoreV2_1:82"
  input: "^stats-39/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_33"
  op: "FertileStatsDeserialize"
  input: "stats-3"
  input: "save/RestoreV2_1:83"
  input: "^stats-3/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_34"
  op: "FertileStatsDeserialize"
  input: "stats-40"
  input: "save/RestoreV2_1:84"
  input: "^stats-40/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_35"
  op: "FertileStatsDeserialize"
  input: "stats-41"
  input: "save/RestoreV2_1:85"
  input: "^stats-41/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_36"
  op: "FertileStatsDeserialize"
  input: "stats-42"
  input: "save/RestoreV2_1:86"
  input: "^stats-42/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_37"
  op: "FertileStatsDeserialize"
  input: "stats-43"
  input: "save/RestoreV2_1:87"
  input: "^stats-43/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_38"
  op: "FertileStatsDeserialize"
  input: "stats-44"
  input: "save/RestoreV2_1:88"
  input: "^stats-44/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_39"
  op: "FertileStatsDeserialize"
  input: "stats-45"
  input: "save/RestoreV2_1:89"
  input: "^stats-45/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_40"
  op: "FertileStatsDeserialize"
  input: "stats-46"
  input: "save/RestoreV2_1:90"
  input: "^stats-46/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_41"
  op: "FertileStatsDeserialize"
  input: "stats-47"
  input: "save/RestoreV2_1:91"
  input: "^stats-47/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_42"
  op: "FertileStatsDeserialize"
  input: "stats-48"
  input: "save/RestoreV2_1:92"
  input: "^stats-48/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_43"
  op: "FertileStatsDeserialize"
  input: "stats-49"
  input: "save/RestoreV2_1:93"
  input: "^stats-49/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_44"
  op: "FertileStatsDeserialize"
  input: "stats-4"
  input: "save/RestoreV2_1:94"
  input: "^stats-4/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_45"
  op: "FertileStatsDeserialize"
  input: "stats-5"
  input: "save/RestoreV2_1:95"
  input: "^stats-5/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_46"
  op: "FertileStatsDeserialize"
  input: "stats-6"
  input: "save/RestoreV2_1:96"
  input: "^stats-6/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_47"
  op: "FertileStatsDeserialize"
  input: "stats-7"
  input: "save/RestoreV2_1:97"
  input: "^stats-7/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_48"
  op: "FertileStatsDeserialize"
  input: "stats-8"
  input: "save/RestoreV2_1:98"
  input: "^stats-8/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/FertileStatsDeserialize_49"
  op: "FertileStatsDeserialize"
  input: "stats-9"
  input: "save/RestoreV2_1:99"
  input: "^stats-9/CreateFertileStatsVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize"
  op: "TreeDeserialize"
  input: "tree-0"
  input: "save/RestoreV2_1:100"
  input: "^tree-0/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_1"
  op: "TreeDeserialize"
  input: "tree-10"
  input: "save/RestoreV2_1:101"
  input: "^tree-10/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_2"
  op: "TreeDeserialize"
  input: "tree-11"
  input: "save/RestoreV2_1:102"
  input: "^tree-11/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_3"
  op: "TreeDeserialize"
  input: "tree-12"
  input: "save/RestoreV2_1:103"
  input: "^tree-12/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_4"
  op: "TreeDeserialize"
  input: "tree-13"
  input: "save/RestoreV2_1:104"
  input: "^tree-13/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_5"
  op: "TreeDeserialize"
  input: "tree-14"
  input: "save/RestoreV2_1:105"
  input: "^tree-14/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_6"
  op: "TreeDeserialize"
  input: "tree-15"
  input: "save/RestoreV2_1:106"
  input: "^tree-15/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_7"
  op: "TreeDeserialize"
  input: "tree-16"
  input: "save/RestoreV2_1:107"
  input: "^tree-16/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_8"
  op: "TreeDeserialize"
  input: "tree-17"
  input: "save/RestoreV2_1:108"
  input: "^tree-17/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_9"
  op: "TreeDeserialize"
  input: "tree-18"
  input: "save/RestoreV2_1:109"
  input: "^tree-18/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_10"
  op: "TreeDeserialize"
  input: "tree-19"
  input: "save/RestoreV2_1:110"
  input: "^tree-19/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_11"
  op: "TreeDeserialize"
  input: "tree-1"
  input: "save/RestoreV2_1:111"
  input: "^tree-1/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_12"
  op: "TreeDeserialize"
  input: "tree-20"
  input: "save/RestoreV2_1:112"
  input: "^tree-20/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_13"
  op: "TreeDeserialize"
  input: "tree-21"
  input: "save/RestoreV2_1:113"
  input: "^tree-21/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_14"
  op: "TreeDeserialize"
  input: "tree-22"
  input: "save/RestoreV2_1:114"
  input: "^tree-22/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_15"
  op: "TreeDeserialize"
  input: "tree-23"
  input: "save/RestoreV2_1:115"
  input: "^tree-23/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_16"
  op: "TreeDeserialize"
  input: "tree-24"
  input: "save/RestoreV2_1:116"
  input: "^tree-24/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_17"
  op: "TreeDeserialize"
  input: "tree-25"
  input: "save/RestoreV2_1:117"
  input: "^tree-25/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_18"
  op: "TreeDeserialize"
  input: "tree-26"
  input: "save/RestoreV2_1:118"
  input: "^tree-26/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_19"
  op: "TreeDeserialize"
  input: "tree-27"
  input: "save/RestoreV2_1:119"
  input: "^tree-27/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_20"
  op: "TreeDeserialize"
  input: "tree-28"
  input: "save/RestoreV2_1:120"
  input: "^tree-28/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_21"
  op: "TreeDeserialize"
  input: "tree-29"
  input: "save/RestoreV2_1:121"
  input: "^tree-29/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_22"
  op: "TreeDeserialize"
  input: "tree-2"
  input: "save/RestoreV2_1:122"
  input: "^tree-2/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_23"
  op: "TreeDeserialize"
  input: "tree-30"
  input: "save/RestoreV2_1:123"
  input: "^tree-30/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_24"
  op: "TreeDeserialize"
  input: "tree-31"
  input: "save/RestoreV2_1:124"
  input: "^tree-31/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_25"
  op: "TreeDeserialize"
  input: "tree-32"
  input: "save/RestoreV2_1:125"
  input: "^tree-32/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_26"
  op: "TreeDeserialize"
  input: "tree-33"
  input: "save/RestoreV2_1:126"
  input: "^tree-33/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_27"
  op: "TreeDeserialize"
  input: "tree-34"
  input: "save/RestoreV2_1:127"
  input: "^tree-34/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_28"
  op: "TreeDeserialize"
  input: "tree-35"
  input: "save/RestoreV2_1:128"
  input: "^tree-35/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_29"
  op: "TreeDeserialize"
  input: "tree-36"
  input: "save/RestoreV2_1:129"
  input: "^tree-36/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_30"
  op: "TreeDeserialize"
  input: "tree-37"
  input: "save/RestoreV2_1:130"
  input: "^tree-37/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_31"
  op: "TreeDeserialize"
  input: "tree-38"
  input: "save/RestoreV2_1:131"
  input: "^tree-38/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_32"
  op: "TreeDeserialize"
  input: "tree-39"
  input: "save/RestoreV2_1:132"
  input: "^tree-39/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_33"
  op: "TreeDeserialize"
  input: "tree-3"
  input: "save/RestoreV2_1:133"
  input: "^tree-3/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_34"
  op: "TreeDeserialize"
  input: "tree-40"
  input: "save/RestoreV2_1:134"
  input: "^tree-40/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_35"
  op: "TreeDeserialize"
  input: "tree-41"
  input: "save/RestoreV2_1:135"
  input: "^tree-41/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_36"
  op: "TreeDeserialize"
  input: "tree-42"
  input: "save/RestoreV2_1:136"
  input: "^tree-42/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_37"
  op: "TreeDeserialize"
  input: "tree-43"
  input: "save/RestoreV2_1:137"
  input: "^tree-43/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_38"
  op: "TreeDeserialize"
  input: "tree-44"
  input: "save/RestoreV2_1:138"
  input: "^tree-44/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_39"
  op: "TreeDeserialize"
  input: "tree-45"
  input: "save/RestoreV2_1:139"
  input: "^tree-45/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_40"
  op: "TreeDeserialize"
  input: "tree-46"
  input: "save/RestoreV2_1:140"
  input: "^tree-46/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_41"
  op: "TreeDeserialize"
  input: "tree-47"
  input: "save/RestoreV2_1:141"
  input: "^tree-47/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_42"
  op: "TreeDeserialize"
  input: "tree-48"
  input: "save/RestoreV2_1:142"
  input: "^tree-48/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_43"
  op: "TreeDeserialize"
  input: "tree-49"
  input: "save/RestoreV2_1:143"
  input: "^tree-49/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_44"
  op: "TreeDeserialize"
  input: "tree-4"
  input: "save/RestoreV2_1:144"
  input: "^tree-4/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_45"
  op: "TreeDeserialize"
  input: "tree-5"
  input: "save/RestoreV2_1:145"
  input: "^tree-5/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_46"
  op: "TreeDeserialize"
  input: "tree-6"
  input: "save/RestoreV2_1:146"
  input: "^tree-6/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_47"
  op: "TreeDeserialize"
  input: "tree-7"
  input: "save/RestoreV2_1:147"
  input: "^tree-7/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_48"
  op: "TreeDeserialize"
  input: "tree-8"
  input: "save/RestoreV2_1:148"
  input: "^tree-8/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/TreeDeserialize_49"
  op: "TreeDeserialize"
  input: "tree-9"
  input: "save/RestoreV2_1:149"
  input: "^tree-9/CreateTreeVariable"
  device: "/device:CPU:0"
  attr {
    key: "params"
    value {
      s: "\"\007\n\005\r\000\000\000\000*\007\n\005\r\000\000\000\000028\350\007`\002j\005\r\000\000\200Br\005\r\000\000zCz\005\r\244p}?\250\001\350 "
    }
  }
}
node {
  name: "save/restore_shard_1"
  op: "NoOp"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_50"
  input: "^save/FertileStatsDeserialize"
  input: "^save/FertileStatsDeserialize_1"
  input: "^save/FertileStatsDeserialize_2"
  input: "^save/FertileStatsDeserialize_3"
  input: "^save/FertileStatsDeserialize_4"
  input: "^save/FertileStatsDeserialize_5"
  input: "^save/FertileStatsDeserialize_6"
  input: "^save/FertileStatsDeserialize_7"
  input: "^save/FertileStatsDeserialize_8"
  input: "^save/FertileStatsDeserialize_9"
  input: "^save/FertileStatsDeserialize_10"
  input: "^save/FertileStatsDeserialize_11"
  input: "^save/FertileStatsDeserialize_12"
  input: "^save/FertileStatsDeserialize_13"
  input: "^save/FertileStatsDeserialize_14"
  input: "^save/FertileStatsDeserialize_15"
  input: "^save/FertileStatsDeserialize_16"
  input: "^save/FertileStatsDeserialize_17"
  input: "^save/FertileStatsDeserialize_18"
  input: "^save/FertileStatsDeserialize_19"
  input: "^save/FertileStatsDeserialize_20"
  input: "^save/FertileStatsDeserialize_21"
  input: "^save/FertileStatsDeserialize_22"
  input: "^save/FertileStatsDeserialize_23"
  input: "^save/FertileStatsDeserialize_24"
  input: "^save/FertileStatsDeserialize_25"
  input: "^save/FertileStatsDeserialize_26"
  input: "^save/FertileStatsDeserialize_27"
  input: "^save/FertileStatsDeserialize_28"
  input: "^save/FertileStatsDeserialize_29"
  input: "^save/FertileStatsDeserialize_30"
  input: "^save/FertileStatsDeserialize_31"
  input: "^save/FertileStatsDeserialize_32"
  input: "^save/FertileStatsDeserialize_33"
  input: "^save/FertileStatsDeserialize_34"
  input: "^save/FertileStatsDeserialize_35"
  input: "^save/FertileStatsDeserialize_36"
  input: "^save/FertileStatsDeserialize_37"
  input: "^save/FertileStatsDeserialize_38"
  input: "^save/FertileStatsDeserialize_39"
  input: "^save/FertileStatsDeserialize_40"
  input: "^save/FertileStatsDeserialize_41"
  input: "^save/FertileStatsDeserialize_42"
  input: "^save/FertileStatsDeserialize_43"
  input: "^save/FertileStatsDeserialize_44"
  input: "^save/FertileStatsDeserialize_45"
  input: "^save/FertileStatsDeserialize_46"
  input: "^save/FertileStatsDeserialize_47"
  input: "^save/FertileStatsDeserialize_48"
  input: "^save/FertileStatsDeserialize_49"
  input: "^save/TreeDeserialize"
  input: "^save/TreeDeserialize_1"
  input: "^save/TreeDeserialize_2"
  input: "^save/TreeDeserialize_3"
  input: "^save/TreeDeserialize_4"
  input: "^save/TreeDeserialize_5"
  input: "^save/TreeDeserialize_6"
  input: "^save/TreeDeserialize_7"
  input: "^save/TreeDeserialize_8"
  input: "^save/TreeDeserialize_9"
  input: "^save/TreeDeserialize_10"
  input: "^save/TreeDeserialize_11"
  input: "^save/TreeDeserialize_12"
  input: "^save/TreeDeserialize_13"
  input: "^save/TreeDeserialize_14"
  input: "^save/TreeDeserialize_15"
  input: "^save/TreeDeserialize_16"
  input: "^save/TreeDeserialize_17"
  input: "^save/TreeDeserialize_18"
  input: "^save/TreeDeserialize_19"
  input: "^save/TreeDeserialize_20"
  input: "^save/TreeDeserialize_21"
  input: "^save/TreeDeserialize_22"
  input: "^save/TreeDeserialize_23"
  input: "^save/TreeDeserialize_24"
  input: "^save/TreeDeserialize_25"
  input: "^save/TreeDeserialize_26"
  input: "^save/TreeDeserialize_27"
  input: "^save/TreeDeserialize_28"
  input: "^save/TreeDeserialize_29"
  input: "^save/TreeDeserialize_30"
  input: "^save/TreeDeserialize_31"
  input: "^save/TreeDeserialize_32"
  input: "^save/TreeDeserialize_33"
  input: "^save/TreeDeserialize_34"
  input: "^save/TreeDeserialize_35"
  input: "^save/TreeDeserialize_36"
  input: "^save/TreeDeserialize_37"
  input: "^save/TreeDeserialize_38"
  input: "^save/TreeDeserialize_39"
  input: "^save/TreeDeserialize_40"
  input: "^save/TreeDeserialize_41"
  input: "^save/TreeDeserialize_42"
  input: "^save/TreeDeserialize_43"
  input: "^save/TreeDeserialize_44"
  input: "^save/TreeDeserialize_45"
  input: "^save/TreeDeserialize_46"
  input: "^save/TreeDeserialize_47"
  input: "^save/TreeDeserialize_48"
  input: "^save/TreeDeserialize_49"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
versions {
  producer: 26
}
